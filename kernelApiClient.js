// Generated by generateSingleFileClient.cjs, do not edit manually.
// Timestamp: 2025-05-15T19:00:43.054Z
// Based on API definitions from: D:\siyuan\my-siyuan-kernel-SDK\apiDefs

/**
 * @typedef {object} KernelApiClientOptions
 * @property {string} [baseUrl="http://127.0.0.1:6806"] - The base URL of the Siyuan Kernel.
 * @property {string} [apiToken=""] - The API token for authentication.
 * @property {function} [customFetch=globalThis.fetch] - A custom fetch implementation.
 */

class KernelApiClient {
  /**
   * Creates an instance of KernelApiClient.
   * @param {KernelApiClientOptions} [options={}]
   */
  constructor(options = {}) {
    this.baseUrl = options.baseUrl || 'http://127.0.0.1:6806';
    this.apiToken = options.apiToken || '';
    this.customFetch = options.customFetch || globalThis.fetch;

    if (!this.customFetch) {
      throw new Error('Fetch API is not available. Please provide a customFetch implementation if running in an environment without globalThis.fetch.');
    }
    if (this.baseUrl.endsWith('/')) {
        this.baseUrl = this.baseUrl.slice(0, -1);
    }
  }

  async _fetchWrapper(endpoint, method, data, needsAuth) {
    const url = `${this.baseUrl}${endpoint}`;
    const headers = {
      'User-Agent': 'KernelApiClient/1.0',
    };

    if (data && !(data instanceof FormData) && method !== 'GET' && method !== 'HEAD') {
        headers['Content-Type'] = 'application/json';
    }
    
    if (needsAuth && this.apiToken) {
      headers['Authorization'] = `Token ${this.apiToken}`;
    } else if (needsAuth && !this.apiToken) {
      console.warn(`API endpoint ${endpoint} requires authentication, but no API token was provided.`);
    }

    const fetchOptions = {
      method,
      headers,
    };

    if (data !== undefined && method !== 'GET' && method !== 'HEAD') {
      if (data instanceof FormData) {
        fetchOptions.body = data;
      } else {
        fetchOptions.body = JSON.stringify(data);
      }
    } else if (data !== undefined && (method === 'GET' || method === 'HEAD')) {
        console.warn(`Data payload for GET/HEAD request to ${endpoint} will be ignored by fetch. Consider moving data to query parameters if applicable.`);
    }

    try {
      const response = await this.customFetch(url, fetchOptions);
      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch (e) {
          errorData = { message: response.statusText };
        }
        const error = new Error(`${method} ${endpoint} failed with status ${response.status}: ${errorData.message || response.statusText}`);
        error.status = response.status;
        error.data = errorData;
        throw error;
      }

      if (response.status === 204) { // No Content
        return; 
      }
      
      let responseData;
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
          responseData = await response.json();
      } else {
          responseData = await response.text(); // Or handle other content types as needed
      }
      
      // Assuming Siyuan API often wraps data in a top-level 'data' field
      // This might need to be more flexible based on actual API responses
      return responseData.data !== undefined ? responseData.data : responseData;

    } catch (error) {
      // If it's an error we threw deliberately from !response.ok, rethrow it
      if (error.status) throw error; 
      // Otherwise, it's likely a network error or an issue with customFetch itself
      const networkError = new Error(`Network error during ${method} ${endpoint}: ${error.message}`);
      networkError.cause = error;
      throw networkError;
    }
  }

  /**
   * 检查激活码
   * Endpoint: `POST /api/account/checkActivationcode`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} data - 要检查的激活码
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，其他表示失败
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 返回数据，此接口通常为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async checkActivationcode(data) {
    return this._fetchWrapper('/api/account/checkActivationcode', 'POST', data, true);
  }

  /**
   * 注销账号
   * Endpoint: `POST /api/account/deactivate`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，其他表示失败
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 返回数据，此接口通常为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async deactivateUser(data) {
    return this._fetchWrapper('/api/account/deactivate', 'POST', data, true);
  }

  /**
   * 登录账号
   * Endpoint: `POST /api/account/login`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} userName - 用户名
   *   @property {string} userPassword - 用户密码
   *   @property {string} captcha - 验证码
   *   @property {number} cloudRegion - 云端区域代码，例如 0 表示中国区
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，其他表示失败
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 登录成功时可能包含用户信息，失败时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async login(data) {
    return this._fetchWrapper('/api/account/login', 'POST', data, true);
  }

  /**
   * 开始免费试用
   * Endpoint: `POST /api/account/startFreeTrial`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，其他表示失败
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 返回数据，此接口通常为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async startFreeTrial(data) {
    return this._fetchWrapper('/api/account/startFreeTrial', 'POST', data, true);
  }

  /**
   * 使用激活码
   * Endpoint: `POST /api/account/useActivationcode`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} data - 要使用的激活码
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，其他表示失败
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 返回数据，此接口通常为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async useActivationcode(data) {
    return this._fetchWrapper('/api/account/useActivationcode', 'POST', data, true);
  }

  /**
   * 与 ChatGPT 对话
   * Endpoint: `POST /api/ai/chatGPT`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} msg - 发送给 ChatGPT 的消息内容
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any} Data - ChatGPT 的回复内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async chatGPT(data) {
    return this._fetchWrapper('/api/ai/chatGPT', 'POST', data, true);
  }

  /**
   * 调用 ChatGPT 执行动作
   * Endpoint: `POST /api/ai/chatGPTWithAction`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 要操作的块 ID 列表
   *   @property {string} action - 要执行的动作指令
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any} Data - ChatGPT 执行动作后的返回结果
   * @throws {Error} If the request fails or the server returns an error.
   */
  async chatGPTWithAction(data) {
    return this._fetchWrapper('/api/ai/chatGPTWithAction', 'POST', data, true);
  }

  /**
   * 解压文件
   * Endpoint: `POST /api/archive/unzip`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} zipPath - 要解压的 .zip 文件的绝对路径或相对于工作空间的路径
   *   @property {string} path - 解压到目标目录的绝对路径或相对于工作空间的路径
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async unzip(data) {
    return this._fetchWrapper('/api/archive/unzip', 'POST', data, true);
  }

  /**
   * 压缩文件/目录
   * Endpoint: `POST /api/archive/zip`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 要压缩的文件或目录的绝对路径或相对于工作空间的路径
   *   @property {string} zipPath - 生成的 .zip 文件保存的绝对路径或相对于工作空间的路径
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async zip(data) {
    return this._fetchWrapper('/api/archive/zip', 'POST', data, true);
  }

  /**
   * 重建资源文件内容索引
   * Endpoint: `POST /api/asset/fullReindexAssetContent`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async fullReindexAssetContent(data) {
    return this._fetchWrapper('/api/asset/fullReindexAssetContent', 'POST', data, true);
  }

  /**
   * 获取文档资源列表
   * Endpoint: `POST /api/asset/getDocAssets`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 文档块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any} Data - 资源文件对象数组，具体结构未定义
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDocAssets(data) {
    return this._fetchWrapper('/api/asset/getDocAssets', 'POST', data, true);
  }

  /**
   * 获取文档图片资源列表
   * Endpoint: `POST /api/asset/getDocImageAssets`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 文档块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any} Data - 图片资源文件对象数组，具体结构未定义
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDocImageAssets(data) {
    return this._fetchWrapper('/api/asset/getDocImageAssets', 'POST', data, true);
  }

  /**
   * 获取文件标注
   * Endpoint: `POST /api/asset/getFileAnnotation`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 资源文件的路径 (例如 assets/xxx.pdf)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {string} path - 资源文件的路径
   *     @property {string} data - 标注数据 (通常为 XFDF 格式的字符串)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getFileAnnotation(data) {
    return this._fetchWrapper('/api/asset/getFileAnnotation', 'POST', data, true);
  }

  /**
   * 获取图片 OCR 文本
   * Endpoint: `POST /api/asset/getImageOCRText`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 图片资源文件的路径 (例如 assets/xxx.png)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {string} text - OCR 识别出的文本内容
   *     @property {any} ocrJSON - 原始 OCR 结果，通常为 JSON 对象，具体结构取决于 OCR 引擎
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getImageOCRText(data) {
    return this._fetchWrapper('/api/asset/getImageOCRText', 'POST', data, true);
  }

  /**
   * 获取丢失的资源列表
   * Endpoint: `POST /api/asset/getMissingAssets`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {Array<any>} missingAssets - 丢失的资源路径列表，具体元素结构未定义
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getMissingAssets(data) {
    return this._fetchWrapper('/api/asset/getMissingAssets', 'POST', data, true);
  }

  /**
   * 获取未使用资源列表
   * Endpoint: `POST /api/asset/getUnusedAssets`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {Array<any>} unusedAssets - 未使用的资源文件对象列表，具体元素结构未定义
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getUnusedAssets(data) {
    return this._fetchWrapper('/api/asset/getUnusedAssets', 'POST', data, true);
  }

  /**
   * 插入本地资源文件
   * Endpoint: `POST /api/asset/insertLocalAssets`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} assetPaths - 本地资源文件的绝对路径数组
   *   @property {string} id - 要插入资源引用的目标文档块 ID
   *   @property {boolean | undefined} isUpload - 是否为上传操作，默认为 false
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {Record<string, string>} succMap - 成功插入的资源映射，键为原始文件名，值为在思源中的新资源路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async insertLocalAssets(data) {
    return this._fetchWrapper('/api/asset/insertLocalAssets', 'POST', data, true);
  }

  /**
   * 对图片进行 OCR
   * Endpoint: `POST /api/asset/ocr`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - path
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {string} text - OCR 识别出的文本内容
   *     @property {any} ocrJSON - 原始 OCR 结果，通常为 JSON 对象，具体结构取决于 OCR 引擎
   * @throws {Error} If the request fails or the server returns an error.
   */
  async ocr(data) {
    return this._fetchWrapper('/api/asset/ocr', 'POST', data, true);
  }

  /**
   * 移除单个未使用资源
   * Endpoint: `POST /api/asset/removeUnusedAsset`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - path
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {string} path - 被成功移除的资源文件的路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeUnusedAsset(data) {
    return this._fetchWrapper('/api/asset/removeUnusedAsset', 'POST', data, true);
  }

  /**
   * 移除所有未使用资源
   * Endpoint: `POST /api/asset/removeUnusedAssets`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {Array<string>} paths - 被成功移除的所有未使用资源文件的路径列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeUnusedAssets(data) {
    return this._fetchWrapper('/api/asset/removeUnusedAssets', 'POST', data, true);
  }

  /**
   * 重命名资源文件
   * Endpoint: `POST /api/asset/renameAsset`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} oldPath - 资源文件的当前路径 (例如 assets/old_name.png)
   *   @property {string} newName - 资源文件的新名称 (不含路径，例如 new_name.png)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {string} newPath - 资源文件重命名后的新路径 (例如 assets/new_name.png)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renameAsset(data) {
    return this._fetchWrapper('/api/asset/renameAsset', 'POST', data, true);
  }

  /**
   * 解析资源绝对路径
   * Endpoint: `POST /api/asset/resolveAssetPath`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 思源笔记中的资源相对路径 (例如 assets/image.png)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {string} Data - 资源文件在文件系统中的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async resolveAssetPath(data) {
    return this._fetchWrapper('/api/asset/resolveAssetPath', 'POST', data, true);
  }

  /**
   * 设置文件标注
   * Endpoint: `POST /api/asset/setFileAnnotation`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 资源文件的路径 (例如 assets/xxx.pdf)
   *   @property {string} data - 要设置的标注数据 (通常为 XFDF 格式的字符串)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setFileAnnotation(data) {
    return this._fetchWrapper('/api/asset/setFileAnnotation', 'POST', data, true);
  }

  /**
   * 设置图片 OCR 文本
   * Endpoint: `POST /api/asset/setImageOCRText`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 图片资源文件的路径 (例如 assets/xxx.png)
   *   @property {string} text - 要设置的 OCR 文本内容
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setImageOCRText(data) {
    return this._fetchWrapper('/api/asset/setImageOCRText', 'POST', data, true);
  }

  /**
   * 获取文件元信息
   * Endpoint: `POST /api/asset/statAsset`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 资源文件的 assets/ 路径或本地文件的 file:/// 绝对路径
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {number} size - 文件大小（字节）
   *     @property {string} hSize - 人类可读的文件大小 (例如 1.2MB)
   *     @property {number} created - 文件创建时间戳 (毫秒)
   *     @property {string} hCreated - 人类可读的文件创建时间
   *     @property {number} updated - 文件最后修改时间戳 (毫秒)
   *     @property {string} hUpdated - 人类可读的文件最后修改时间
   * @throws {Error} If the request fails or the server returns an error.
   */
  async statAsset(data) {
    return this._fetchWrapper('/api/asset/statAsset', 'POST', data, true);
  }

  /**
   * 上传文件
   * Endpoint: `POST /api/asset/upload`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} assetPath - 可选，指定资源在 assets 目录中保存的相对路径 (例如 myfolder/image.png)
   *   @property {string | undefined} id - 可选，关联的文档块 ID，如果提供，则会在该文档中插入对上传资源的引用
   *   @property {any} files - 通过 FormData 上传的文件对象或文件对象列表，此字段仅用于类型提示，实际通过 FormData 传递
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object} Data - Data
   *     @property {Array<string>} errFiles - 上传失败的文件名列表
   *     @property {Record<string, string>} succMap - 上传成功的文件映射，键为原始文件名，值为在思源中的新资源路径 (例如 assets/image.png)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async Upload(data) {
    return this._fetchWrapper('/api/asset/upload', 'POST', data, true);
  }

  /**
   * 上传资源到云端
   * Endpoint: `POST /api/asset/uploadCloud`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 文档块的 ID，将上传此文档及其子文档中引用的所有本地资源
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async uploadCloud(data) {
    return this._fetchWrapper('/api/asset/uploadCloud', 'POST', data, true);
  }

  /**
   * 批量获取块属性
   * Endpoint: `POST /api/attr/batchGetBlockAttrs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 要获取属性的块 ID 数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {Record<string, Record<string, string>>} Data - 一个对象，键为块 ID，值为该块的属性对象 (属性名: 属性值)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async batchGetBlockAttrs(data) {
    return this._fetchWrapper('/api/attr/batchGetBlockAttrs', 'POST', data, true);
  }

  /**
   * 批量设置块属性
   * Endpoint: `POST /api/attr/batchSetBlockAttrs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<object>} blockAttrs - 包含多个块属性设置的对象数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async batchSetBlockAttrs(data) {
    return this._fetchWrapper('/api/attr/batchSetBlockAttrs', 'POST', data, true);
  }

  /**
   * 获取块属性
   * Endpoint: `POST /api/attr/getBlockAttrs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取属性的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {Record<string, string>} Data - 该块的属性对象 (属性名: 属性值)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockAttrs(data) {
    return this._fetchWrapper('/api/attr/getBlockAttrs', 'POST', data, true);
  }

  /**
   * 获取书签标签
   * Endpoint: `POST /api/attr/getBookmarkLabels`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {Array<string>} Data - 书签标签字符串数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBookmarkLabels(data) {
    return this._fetchWrapper('/api/attr/getBookmarkLabels', 'POST', data, true);
  }

  /**
   * 重置块属性
   * Endpoint: `POST /api/attr/resetBlockAttrs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要重置属性的块 ID
   *   @property {Record<string, string>} attrs - 要重置的属性对象 (属性名: 期望的当前属性值)。只有当块的属性值与此处提供的值匹配时，该属性才会被移除。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async resetBlockAttrs(data) {
    return this._fetchWrapper('/api/attr/resetBlockAttrs', 'POST', data, true);
  }

  /**
   * 设置块属性
   * Endpoint: `POST /api/attr/setBlockAttrs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要设置属性的块 ID
   *   @property {Record<string, string | null>} attrs - 要设置的属性对象 (属性名: 属性值)。如果属性值为 null，则删除该属性。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setBlockAttrs(data) {
    return this._fetchWrapper('/api/attr/setBlockAttrs', 'POST', data, true);
  }

  /**
   * 添加属性视图块
   * Endpoint: `POST /api/av/addAttributeViewBlocks`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {string | undefined} blockID - 可选，新块将插入到此块 ID 之后
   *   @property {string | undefined} previousID - 可选，新块将插入到此块 ID 之前，如果 blockID 也提供，则此参数优先
   *   @property {boolean | undefined} ignoreFillFilter - 可选，是否忽略填充过滤器，默认为 false
   *   @property {Array<Record<string, any>>} srcs - 要添加的源数据块信息数组，具体结构取决于源类型
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async addAttributeViewBlocks(data) {
    return this._fetchWrapper('/api/av/addAttributeViewBlocks', 'POST', data, true);
  }

  /**
   * 添加属性视图列
   * Endpoint: `POST /api/av/addAttributeViewKey`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {string} keyID - 新列的 ID，如果为空则自动生成
   *   @property {string} keyName - 新列的名称
   *   @property {string} keyType - 新列的类型 (e.g., 'text', 'number', 'select')
   *   @property {string} keyIcon - 新列的图标 (Emoji 或思源图标名)
   *   @property {string} previousKeyID - 新列将插入到此列 ID 之前
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async addAttributeViewKey(data) {
    return this._fetchWrapper('/api/av/addAttributeViewKey', 'POST', data, true);
  }

  /**
   * 追加独立的属性视图块（带值）
   * Endpoint: `POST /api/av/appendAttributeViewDetachedBlocksWithValues`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {Array<Array<any>>} blocksValues - 二维数组，外层数组代表多个新块，内层数组代表每个块对应各列的初始值
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 返回新创建的块的 ID 列表或其他相关信息，具体结构依赖后端实现
   * @throws {Error} If the request fails or the server returns an error.
   */
  async appendAttributeViewDetachedBlocksWithValues(data) {
    return this._fetchWrapper('/api/av/appendAttributeViewDetachedBlocksWithValues', 'POST', data, true);
  }

  /**
   * 复制属性视图块
   * Endpoint: `POST /api/av/duplicateAttributeViewBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 要复制的属性视图块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 成功时返回新属性视图和块的ID
   *     @property {string} avID - 新复制的属性视图的 ID
   *     @property {string} blockID - 新复制的属性视图块的 ID
   * @throws {Error} If the request fails or the server returns an error.
   */
  async duplicateAttributeViewBlock(data) {
    return this._fetchWrapper('/api/av/duplicateAttributeViewBlock', 'POST', data, true);
  }

  /**
   * 获取属性视图
   * Endpoint: `POST /api/av/getAttributeView`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 属性视图的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含属性视图详细信息的对象
   *     @property {any} av - 属性视图对象的详细信息，具体结构复杂，参考前端实际使用或Go源码 `kernel.AttributeView`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getAttributeView(data) {
    return this._fetchWrapper('/api/av/getAttributeView', 'POST', data, true);
  }

  /**
   * 获取属性视图的筛选和排序规则
   * Endpoint: `POST /api/av/getAttributeViewFilterSort`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 属性视图的 ID
   *   @property {string} blockID - 属性视图关联的块 ID (通常与属性视图ID相同)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含筛选和排序规则的对象
   *     @property {Array<any>} filters - 筛选条件对象数组，具体结构参考 `kernel.AVFilter`
   *     @property {Array<any>} sorts - 排序规则对象数组，具体结构参考 `kernel.AVSort`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getAttributeViewFilterSort(data) {
    return this._fetchWrapper('/api/av/getAttributeViewFilterSort', 'POST', data, true);
  }

  /**
   * 获取属性视图的列定义
   * Endpoint: `POST /api/av/getAttributeViewKeys`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 属性视图的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {Array<any> | null} Data - 属性视图的列定义对象数组，具体结构参考 `kernel.AVKey`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getAttributeViewKeys(data) {
    return this._fetchWrapper('/api/av/getAttributeViewKeys', 'POST', data, true);
  }

  /**
   * 通过属性视图ID获取列定义
   * Endpoint: `POST /api/av/getAttributeViewKeysByAvID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {Array<any> | null} Data - 属性视图的列定义对象数组，具体结构参考 `kernel.AVKey`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getAttributeViewKeysByAvID(data) {
    return this._fetchWrapper('/api/av/getAttributeViewKeysByAvID', 'POST', data, true);
  }

  /**
   * 获取属性视图主键列的值
   * Endpoint: `POST /api/av/getAttributeViewPrimaryKeyValues`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 属性视图的 ID
   *   @property {string | undefined} keyword - 可选，搜索关键词
   *   @property {number | undefined} page - 可选，页码，从 1 开始
   *   @property {number | undefined} pageSize - 可选，每页数量
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含主键列值和相关信息的对象
   *     @property {string} name - 主键列的名称
   *     @property {Array<string>} blockIDs - 匹配的主键值对应的块 ID 列表
   *     @property {Array<any>} rows - 匹配的行数据数组，具体结构可能包含主键值和其他相关信息
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getAttributeViewPrimaryKeyValues(data) {
    return this._fetchWrapper('/api/av/getAttributeViewPrimaryKeyValues', 'POST', data, true);
  }

  /**
   * 获取镜像数据库块
   * Endpoint: `POST /api/av/getMirrorDatabaseBlocks`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含镜像数据库块引用信息的对象
   *     @property {Array<object>} refDefs - 引用定义对象数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getMirrorDatabaseBlocks(data) {
    return this._fetchWrapper('/api/av/getMirrorDatabaseBlocks', 'POST', data, true);
  }

  /**
   * 移除属性视图块
   * Endpoint: `POST /api/av/removeAttributeViewBlocks`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {Array<string>} srcIDs - 要移除的源数据块的 ID 数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeAttributeViewBlocks(data) {
    return this._fetchWrapper('/api/av/removeAttributeViewBlocks', 'POST', data, true);
  }

  /**
   * 移除属性视图列
   * Endpoint: `POST /api/av/removeAttributeViewKey`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {string} keyID - 要移除的列的 ID
   *   @property {boolean | undefined} removeRelationDest - 可选，如果是关联列，是否同时移除关联目标，默认为 false
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeAttributeViewKey(data) {
    return this._fetchWrapper('/api/av/removeAttributeViewKey', 'POST', data, true);
  }

  /**
   * 渲染属性视图
   * Endpoint: `POST /api/av/renderAttributeView`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 属性视图的 ID
   *   @property {string | undefined} viewID - 可选，要渲染的特定视图的 ID
   *   @property {string | undefined} query - 可选，查询关键词或条件
   *   @property {number | undefined} page - 可选，页码，从 1 开始
   *   @property {number | undefined} pageSize - 可选，每页数量
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含渲染结果的对象
   *     @property {string} name - 属性视图的名称
   *     @property {string} id - 属性视图的 ID
   *     @property {any} viewType - 当前视图的类型 (具体类型需查阅 kernel.AVViewType)
   *     @property {any} viewID - 当前视图的 ID (具体类型需查阅 kernel.AVViewID)
   *     @property {Array<any>} views - 属性视图包含的所有视图定义数组，元素结构参考 `kernel.AVView`
   *     @property {any} view - 当前渲染的视图的详细数据，结构复杂，取决于视图类型
   *     @property {boolean} isMirror - 是否为镜像属性视图
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renderAttributeView(data) {
    return this._fetchWrapper('/api/av/renderAttributeView', 'POST', data, true);
  }

  /**
   * 渲染历史版本属性视图
   * Endpoint: `POST /api/av/renderHistoryAttributeView`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 属性视图的 ID
   *   @property {string} created - 历史版本创建的时间戳字符串 (毫秒级)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含历史版本渲染结果的对象
   *     @property {string} name - 属性视图的名称
   *     @property {string} id - 属性视图的 ID
   *     @property {any} viewType - 视图的类型
   *     @property {any} viewID - 视图的 ID
   *     @property {Array<any>} views - 所有视图定义数组
   *     @property {any} view - 当前渲染的视图的详细数据
   *     @property {boolean} isMirror - 是否为镜像
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renderHistoryAttributeView(data) {
    return this._fetchWrapper('/api/av/renderHistoryAttributeView', 'POST', data, true);
  }

  /**
   * 渲染快照属性视图
   * Endpoint: `POST /api/av/renderSnapshotAttributeView`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} snapshot - 快照的路径或标识
   *   @property {string} id - 属性视图的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含快照渲染结果的对象
   *     @property {string} name - 属性视图的名称
   *     @property {string} id - 属性视图的 ID
   *     @property {any} viewType - 视图的类型
   *     @property {any} viewID - 视图的 ID
   *     @property {Array<any>} views - 所有视图定义数组
   *     @property {any} view - 当前渲染的视图的详细数据
   *     @property {boolean} isMirror - 是否为镜像
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renderSnapshotAttributeView(data) {
    return this._fetchWrapper('/api/av/renderSnapshotAttributeView', 'POST', data, true);
  }

  /**
   * 搜索属性视图
   * Endpoint: `POST /api/av/searchAttributeView`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} keyword - 搜索关键词
   *   @property {Array<string> | undefined} excludes - 可选，要排除的属性视图 ID 数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含搜索结果的对象
   *     @property {Array<any>} results - 搜索结果对象数组，每个对象包含属性视图的基本信息 (如 id, name)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchAttributeView(data) {
    return this._fetchWrapper('/api/av/searchAttributeView', 'POST', data, true);
  }

  /**
   * 搜索属性视图的非关联列
   * Endpoint: `POST /api/av/searchAttributeViewNonRelationKey`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {string} keyword - 搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含搜索到的非关联列的对象
   *     @property {Array<any>} keys - 匹配的非关联列定义对象数组，结构参考 `kernel.AVKey`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchAttributeViewNonRelationKey(data) {
    return this._fetchWrapper('/api/av/searchAttributeViewNonRelationKey', 'POST', data, true);
  }

  /**
   * 搜索属性视图的关联列
   * Endpoint: `POST /api/av/searchAttributeViewRelationKey`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {string} keyword - 搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含搜索到的关联列的对象
   *     @property {Array<any>} keys - 匹配的关联列定义对象数组，结构参考 `kernel.AVKey`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchAttributeViewRelationKey(data) {
    return this._fetchWrapper('/api/av/searchAttributeViewRelationKey', 'POST', data, true);
  }

  /**
   * 设置属性视图块的单元格属性值
   * Endpoint: `POST /api/av/setAttributeViewBlockAttr`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {string} keyID - 列的 ID (Key ID)
   *   @property {string} rowID - 行的 ID (通常是数据块的 ID)
   *   @property {any} value - 要设置的新值，具体类型取决于列的类型
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后值的对象
   *     @property {any} value - 成功设置后的值，可能经过转换或处理
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setAttributeViewBlockAttr(data) {
    return this._fetchWrapper('/api/av/setAttributeViewBlockAttr', 'POST', data, true);
  }

  /**
   * 设置数据库块的默认视图
   * Endpoint: `POST /api/av/setDatabaseBlockView`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 数据库块（属性视图块）的 ID
   *   @property {string} viewID - 要设置为默认视图的视图 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setDatabaseBlockView(data) {
    return this._fetchWrapper('/api/av/setDatabaseBlockView', 'POST', data, true);
  }

  /**
   * 排序属性视图列
   * Endpoint: `POST /api/av/sortAttributeViewKey`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {string} keyID - 要移动的列的 ID
   *   @property {string} previousKeyID - 目标位置：将列移动到此列 ID 之前
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async sortAttributeViewKey(data) {
    return this._fetchWrapper('/api/av/sortAttributeViewKey', 'POST', data, true);
  }

  /**
   * 排序属性视图中特定视图的列
   * Endpoint: `POST /api/av/sortAttributeViewViewKey`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} avID - 属性视图的 ID
   *   @property {string} viewID - 特定视图的 ID
   *   @property {string} keyID - 要移动的列的 ID
   *   @property {string} previousKeyID - 目标位置：将列移动到此列 ID 之前
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async sortAttributeViewViewKey(data) {
    return this._fetchWrapper('/api/av/sortAttributeViewViewKey', 'POST', data, true);
  }

  /**
   * 批量更新集市包
   * Endpoint: `POST /api/bazaar/batchUpdatePackage`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} frontend - 客户端类型，通常为 'frontend' 或 'app'
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {any | null} Data - 此接口通常不返回具体数据，null 表示成功
   * @throws {Error} If the request fails or the server returns an error.
   */
  async batchUpdatePackage(data) {
    return this._fetchWrapper('/api/bazaar/batchUpdatePackage', 'POST', data, true);
  }

  /**
   * 获取集市图标包列表
   * Endpoint: `POST /api/bazaar/getBazaarIcon`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含图标包列表的对象
   *     @property {Array<any>} packages - 集市图标包对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBazaarIcon(data) {
    return this._fetchWrapper('/api/bazaar/getBazaarIcon', 'POST', data, true);
  }

  /**
   * 获取集市包的README
   * Endpoint: `POST /api/bazaar/getBazaarPackageREAME`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} repoURL - 包所在的仓库 URL
   *   @property {string} repoHash - 包在仓库中的特定提交哈希或版本标签
   *   @property {string} packageType - 包类型 (例如 'icons', 'plugins', 'themes', 'templates', 'widgets')
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含 README HTML 的对象
   *     @property {string} html - README 文件的 HTML 内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBazaarPackageREAME(data) {
    return this._fetchWrapper('/api/bazaar/getBazaarPackageREAME', 'POST', data, true);
  }

  /**
   * 获取集市插件列表
   * Endpoint: `POST /api/bazaar/getBazaarPlugin`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} frontend - 客户端类型，通常为 'frontend' 或 'app'
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含插件列表的对象
   *     @property {Array<any>} packages - 集市插件包对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBazaarPlugin(data) {
    return this._fetchWrapper('/api/bazaar/getBazaarPlugin', 'POST', data, true);
  }

  /**
   * 获取集市模板列表
   * Endpoint: `POST /api/bazaar/getBazaarTemplate`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含模板列表的对象
   *     @property {Array<any>} packages - 集市模板包对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBazaarTemplate(data) {
    return this._fetchWrapper('/api/bazaar/getBazaarTemplate', 'POST', data, true);
  }

  /**
   * 获取集市主题列表
   * Endpoint: `POST /api/bazaar/getBazaarTheme`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含主题列表的对象
   *     @property {Array<any>} packages - 集市主题包对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBazaarTheme(data) {
    return this._fetchWrapper('/api/bazaar/getBazaarTheme', 'POST', data, true);
  }

  /**
   * 获取集市挂件列表
   * Endpoint: `POST /api/bazaar/getBazaarWidget`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含挂件列表的对象
   *     @property {Array<any>} packages - 集市挂件包对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBazaarWidget(data) {
    return this._fetchWrapper('/api/bazaar/getBazaarWidget', 'POST', data, true);
  }

  /**
   * 获取已安装的图标包列表
   * Endpoint: `POST /api/bazaar/getInstalledIcon`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含已安装图标包列表的对象
   *     @property {Array<any>} packages - 已安装图标包对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getInstalledIcon(data) {
    return this._fetchWrapper('/api/bazaar/getInstalledIcon', 'POST', data, true);
  }

  /**
   * 获取已安装的插件列表
   * Endpoint: `POST /api/bazaar/getInstalledPlugin`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} frontend - 客户端类型，通常为 'frontend' 或 'app'
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含已安装插件列表的对象
   *     @property {Array<any>} packages - 已安装插件对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getInstalledPlugin(data) {
    return this._fetchWrapper('/api/bazaar/getInstalledPlugin', 'POST', data, true);
  }

  /**
   * 获取已安装的模板列表
   * Endpoint: `POST /api/bazaar/getInstalledTemplate`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含已安装模板列表的对象
   *     @property {Array<any>} packages - 已安装模板对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getInstalledTemplate(data) {
    return this._fetchWrapper('/api/bazaar/getInstalledTemplate', 'POST', data, true);
  }

  /**
   * 获取已安装的主题列表
   * Endpoint: `POST /api/bazaar/getInstalledTheme`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含已安装主题列表的对象
   *     @property {Array<any>} packages - 已安装主题对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getInstalledTheme(data) {
    return this._fetchWrapper('/api/bazaar/getInstalledTheme', 'POST', data, true);
  }

  /**
   * 获取已安装的挂件列表
   * Endpoint: `POST /api/bazaar/getInstalledWidget`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} keyword - 可选，搜索关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含已安装挂件列表的对象
   *     @property {Array<any>} packages - 已安装挂件对象数组，具体结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getInstalledWidget(data) {
    return this._fetchWrapper('/api/bazaar/getInstalledWidget', 'POST', data, true);
  }

  /**
   * 获取可更新的集市包
   * Endpoint: `POST /api/bazaar/getUpdatedPackage`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} frontend - 客户端类型，通常为 'frontend' 或 'app'
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含各类可更新包列表的对象
   *     @property {Array<any>} plugins - 可更新的插件列表，元素结构参考 `kernel.BazaarPackage`
   *     @property {Array<any>} widgets - 可更新的挂件列表，元素结构参考 `kernel.BazaarPackage`
   *     @property {Array<any>} icons - 可更新的图标包列表，元素结构参考 `kernel.BazaarPackage`
   *     @property {Array<any>} themes - 可更新的主题列表，元素结构参考 `kernel.BazaarPackage`
   *     @property {Array<any>} templates - 可更新的模板列表，元素结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getUpdatedPackage(data) {
    return this._fetchWrapper('/api/bazaar/getUpdatedPackage', 'POST', data, true);
  }

  /**
   * 安装集市图标包
   * Endpoint: `POST /api/bazaar/installBazaarIcon`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} repoURL - 图标包所在的仓库 URL
   *   @property {string} repoHash - 图标包在仓库中的特定提交哈希或版本标签
   *   @property {string} packageName - 图标包的名称 (通常是仓库名)
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词，通常在安装后传递以更新UI
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后包列表和外观设置的对象
   *     @property {Array<any>} packages - 更新后的已安装图标包列表，元素结构参考 `kernel.BazaarPackage`
   *     @property {any} appearance - 更新后的外观设置对象，具体结构参考 `conf.Appearance`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async installBazaarIcon(data) {
    return this._fetchWrapper('/api/bazaar/installBazaarIcon', 'POST', data, true);
  }

  /**
   * 安装集市插件
   * Endpoint: `POST /api/bazaar/installBazaarPlugin`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} repoURL - 插件所在的仓库 URL
   *   @property {string} repoHash - 插件在仓库中的特定提交哈希或版本标签
   *   @property {string} packageName - 插件的名称 (通常是仓库名)
   *   @property {string} frontend - 客户端类型，通常为 'frontend' 或 'app'
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后插件列表的对象
   *     @property {Array<any>} packages - 更新后的已安装插件列表，元素结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async installBazaarPlugin(data) {
    return this._fetchWrapper('/api/bazaar/installBazaarPlugin', 'POST', data, true);
  }

  /**
   * 安装集市模板
   * Endpoint: `POST /api/bazaar/installBazaarTemplate`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} repoURL - 模板所在的仓库 URL
   *   @property {string} repoHash - 模板在仓库中的特定提交哈希或版本标签
   *   @property {string} packageName - 模板的名称 (通常是仓库名)
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后模板列表的对象
   *     @property {Array<any>} packages - 更新后的已安装模板列表，元素结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async installBazaarTemplate(data) {
    return this._fetchWrapper('/api/bazaar/installBazaarTemplate', 'POST', data, true);
  }

  /**
   * 安装集市主题
   * Endpoint: `POST /api/bazaar/installBazaarTheme`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} repoURL - 主题所在的仓库 URL
   *   @property {string} repoHash - 主题在仓库中的特定提交哈希或版本标签
   *   @property {string} packageName - 主题的名称 (通常是仓库名)
   *   @property {number} mode - 主题模式 (0: 亮色, 1: 暗色, 2: 根据系统)
   *   @property {boolean | undefined} update - 可选，是否为更新操作，默认为 false
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后包列表和外观设置的对象
   *     @property {Array<any>} packages - 更新后的已安装主题列表，元素结构参考 `kernel.BazaarPackage`
   *     @property {any} appearance - 更新后的外观设置对象，具体结构参考 `conf.Appearance`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async installBazaarTheme(data) {
    return this._fetchWrapper('/api/bazaar/installBazaarTheme', 'POST', data, true);
  }

  /**
   * 安装集市挂件
   * Endpoint: `POST /api/bazaar/installBazaarWidget`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} repoURL - 挂件所在的仓库 URL
   *   @property {string} repoHash - 挂件在仓库中的特定提交哈希或版本标签
   *   @property {string} packageName - 挂件的名称 (通常是仓库名)
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后挂件列表的对象
   *     @property {Array<any>} packages - 更新后的已安装挂件列表，元素结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async installBazaarWidget(data) {
    return this._fetchWrapper('/api/bazaar/installBazaarWidget', 'POST', data, true);
  }

  /**
   * 卸载图标包
   * Endpoint: `POST /api/bazaar/uninstallBazaarIcon`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} packageName - 要卸载的图标包的名称
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后包列表和外观设置的对象
   *     @property {Array<any>} packages - 更新后的已安装图标包列表，元素结构参考 `kernel.BazaarPackage`
   *     @property {any} appearance - 更新后的外观设置对象，具体结构参考 `conf.Appearance`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async uninstallBazaarIcon(data) {
    return this._fetchWrapper('/api/bazaar/uninstallBazaarIcon', 'POST', data, true);
  }

  /**
   * 卸载插件
   * Endpoint: `POST /api/bazaar/uninstallBazaarPlugin`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} packageName - 要卸载的插件的名称
   *   @property {string} frontend - 客户端类型，通常为 'frontend' 或 'app'
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后插件列表的对象
   *     @property {Array<any>} packages - 更新后的已安装插件列表，元素结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async uninstallBazaarPlugin(data) {
    return this._fetchWrapper('/api/bazaar/uninstallBazaarPlugin', 'POST', data, true);
  }

  /**
   * 卸载模板
   * Endpoint: `POST /api/bazaar/uninstallBazaarTemplate`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} packageName - 要卸载的模板的名称
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后模板列表的对象
   *     @property {Array<any>} packages - 更新后的已安装模板列表，元素结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async uninstallBazaarTemplate(data) {
    return this._fetchWrapper('/api/bazaar/uninstallBazaarTemplate', 'POST', data, true);
  }

  /**
   * 卸载主题
   * Endpoint: `POST /api/bazaar/uninstallBazaarTheme`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} packageName - 要卸载的主题的名称
   *   @property {number} mode - 主题模式 (0: 亮色, 1: 暗色, 2: 根据系统)，用于确定要卸载哪个模式下的主题或重置相关配置
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后包列表和外观设置的对象
   *     @property {Array<any>} packages - 更新后的已安装主题列表，元素结构参考 `kernel.BazaarPackage`
   *     @property {any} appearance - 更新后的外观设置对象，具体结构参考 `conf.Appearance`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async uninstallBazaarTheme(data) {
    return this._fetchWrapper('/api/bazaar/uninstallBazaarTheme', 'POST', data, true);
  }

  /**
   * 卸载挂件
   * Endpoint: `POST /api/bazaar/uninstallBazaarWidget`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} packageName - 要卸载的挂件的名称
   *   @property {string | undefined} keyword - 可选，用于刷新列表的关键词
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 返回消息
   *   @property {object | null} Data - 包含更新后挂件列表的对象
   *     @property {Array<any>} packages - 更新后的已安装挂件列表，元素结构参考 `kernel.BazaarPackage`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async uninstallBazaarWidget(data) {
    return this._fetchWrapper('/api/bazaar/uninstallBazaarWidget', 'POST', data, true);
  }

  /**
   * 插入后置子块
   * Endpoint: `POST /api/block/appendBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} data - 要插入的内容，可以是 Markdown 或 DOM 字符串
   *   @property {"markdown" | "dom"} dataType - 指定 data 参数的类型
   *   @property {string} parentID - 父块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object> | null} Data - 成功时返回包含新块 ID 的数组，失败时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async appendBlock(data) {
    return this._fetchWrapper('/api/block/appendBlock', 'POST', data, true);
  }

  /**
   * 追加日记块
   * Endpoint: `POST /api/block/appendDailyNoteBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} data - 要追加的内容，可以是 Markdown 或 DOM 字符串
   *   @property {"markdown" | "dom"} dataType - 指定 data 参数的类型
   *   @property {string} notebook - 目标笔记本的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object> | null} Data - 成功时返回包含新块 ID 的数组，失败时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async appendDailyNoteBlock(data) {
    return this._fetchWrapper('/api/block/appendDailyNoteBlock', 'POST', data, true);
  }

  /**
   * 批量更新块内容
   * Endpoint: `POST /api/block/batchUpdateBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<object>} blocks - 包含多个待更新块信息的数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object> | null} Data - 成功时返回包含已更新块 ID 的数组，失败时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async batchUpdateBlock(data) {
    return this._fetchWrapper('/api/block/batchUpdateBlock', 'POST', data, true);
  }

  /**
   * 检查块是否存在
   * Endpoint: `POST /api/block/checkBlockExist`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要检查的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {boolean} Data - 块是否存在
   * @throws {Error} If the request fails or the server returns an error.
   */
  async checkBlockExist(data) {
    return this._fetchWrapper('/api/block/checkBlockExist', 'POST', data, true);
  }

  /**
   * 检查块是否折叠
   * Endpoint: `POST /api/block/checkBlockFold`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要检查的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含折叠状态和是否为根块的信息
   *     @property {boolean} isFolded - 块是否已折叠
   *     @property {boolean} isRoot - 块是否为根块（通常指文档块）
   * @throws {Error} If the request fails or the server returns an error.
   */
  async checkBlockFold(data) {
    return this._fetchWrapper('/api/block/checkBlockFold', 'POST', data, true);
  }

  /**
   * 检查块引用状态
   * Endpoint: `POST /api/block/checkBlockRef`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 要检查的块 ID 数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Record<string, object>} Data - 一个记录对象，键为块 ID，值为该块的引用统计信息
   *     @property {number} defCount - 该块作为定义块被引用的次数
   *     @property {number} refCount - 该块作为引用块引用其他块的次数
   * @throws {Error} If the request fails or the server returns an error.
   */
  async checkBlockRef(data) {
    return this._fetchWrapper('/api/block/checkBlockRef', 'POST', data, true);
  }

  /**
   * 删除块
   * Endpoint: `POST /api/block/deleteBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要删除的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<any> | null} Data - 通常为 null，具体结构未在 Go 源码中明确，保持 any 以兼容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async deleteBlock(data) {
    return this._fetchWrapper('/api/block/deleteBlock', 'POST', data, true);
  }

  /**
   * 折叠块
   * Endpoint: `POST /api/block/foldBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要折叠的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<any> | null} Data - 通常为 null，具体结构未在 Go 源码中明确，保持 any 以兼容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async foldBlock(data) {
    return this._fetchWrapper('/api/block/foldBlock', 'POST', data, true);
  }

  /**
   * 获取块面包屑
   * Endpoint: `POST /api/block/getBlockBreadcrumb`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 目标块的 ID
   *   @property {Array<string> | undefined} excludeTypes - 可选，需要从面包屑中排除的块类型数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object>} Data - 面包屑路径数组，从根到目标块的父块
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockBreadcrumb(data) {
    return this._fetchWrapper('/api/block/getBlockBreadcrumb', 'POST', data, true);
  }

  /**
   * 获取块DOM
   * Endpoint: `POST /api/block/getBlockDOM`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取 DOM 的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含块 ID 和其 DOM 内容的对象
   *     @property {string} id - 块 ID
   *     @property {string} dom - 块的 DOM 内容 (HTML 字符串)
   *     @property {boolean | undefined} isFullWidth - 是否为页宽块
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockDOM(data) {
    return this._fetchWrapper('/api/block/getBlockDOM', 'POST', data, true);
  }

  /**
   * 根据引用文本获取块定义ID
   * Endpoint: `POST /api/block/getBlockDefIDsByRefText`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} anchor - 要搜索的引用锚文本
   *   @property {Array<string> | undefined} excludeIDs - 可选，需要排除的块 ID 数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含引用定义对列表的对象
   *     @property {Array<object>} refDefs - 引用定义对的列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockDefIDsByRefText(data) {
    return this._fetchWrapper('/api/block/getBlockDefIDsByRefText', 'POST', data, true);
  }

  /**
   * 获取块在父级中的位置
   * Endpoint: `POST /api/block/getBlockIndex`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取索引的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {number} Data - 块在其父块子节点中的索引位置，-1 表示未找到或出错
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockIndex(data) {
    return this._fetchWrapper('/api/block/getBlockIndex', 'POST', data, true);
  }

  /**
   * 获取块信息
   * Endpoint: `POST /api/block/getBlockInfo`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取信息的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含块的详细路径和上下文信息的对象
   *     @property {string} box - 块所在的笔记本 ID
   *     @property {string} path - 块在笔记本中的绝对路径
   *     @property {string} rootID - 块所属的根文档块 ID
   *     @property {string} rootTitle - 根文档块的标题
   *     @property {string} rootChildID - 该块在根文档块下的一级子块ID (如果自身不是一级子块，则为空)
   *     @property {string} rootIcon - 根文档块的图标
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockInfo(data) {
    return this._fetchWrapper('/api/block/getBlockInfo', 'POST', data, true);
  }

  /**
   * 获取块Kramdown源码
   * Endpoint: `POST /api/block/getBlockKramdown`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取 Kramdown 源码的块 ID
   *   @property {"md" | "textmark" | undefined} mode - 获取模式：'md' (Markdown 标记符) 或 'textmark' (文本标记)。默认为 'md'
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含块 ID 和其 Kramdown 源码的对象
   *     @property {string} id - 块 ID
   *     @property {string} kramdown - 块的 Kramdown 源码
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockKramdown(data) {
    return this._fetchWrapper('/api/block/getBlockKramdown', 'POST', data, true);
  }

  /**
   * 获取块的同级和父级ID
   * Endpoint: `POST /api/block/getBlockSiblingID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 目标块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含父块、上一个和下一个同级块 ID 的对象
   *     @property {string} parent - 父块 ID，如果目标块是根块则为空字符串
   *     @property {string} previous - 上一个同级块 ID，如果没有则为空字符串
   *     @property {string} next - 下一个同级块 ID，如果没有则为空字符串
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockSiblingID(data) {
    return this._fetchWrapper('/api/block/getBlockSiblingID', 'POST', data, true);
  }

  /**
   * 获取多个块的树信息
   * Endpoint: `POST /api/block/getBlockTreeInfos`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 要获取块树信息的块 ID 数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object>} Data - 一个包含多个块树信息的数组，每个对象代表一个块及其详细信息和可能的子节点
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlockTreeInfos(data) {
    return this._fetchWrapper('/api/block/getBlockTreeInfos', 'POST', data, true);
  }

  /**
   * 批量获取块在父级中的位置
   * Endpoint: `POST /api/block/getBlocksIndexes`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 要获取索引的块 ID 数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Record<string, number>} Data - 一个记录对象，键为块 ID，值为该块在其父块中的索引
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlocksIndexes(data) {
    return this._fetchWrapper('/api/block/getBlocksIndexes', 'POST', data, true);
  }

  /**
   * 获取多块字数统计
   * Endpoint: `POST /api/block/getBlocksWordCount`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 要统计字数的块 ID 数组
   *   @property {string | undefined} reqId - 可选的请求 ID，用于异步跟踪
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含字数统计结果和可选请求 ID 的对象
   *     @property {string | undefined} reqId - 如果请求中提供了 reqId，则在此返回
   *     @property {object} stat - 字数统计结果
   *       @property {number} wordCount - 总字数
   *       @property {number} charCount - 总字符数
   *       @property {number} linkCount - 总链接数
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBlocksWordCount(data) {
    return this._fetchWrapper('/api/block/getBlocksWordCount', 'POST', data, true);
  }

  /**
   * 获取子块基本信息
   * Endpoint: `POST /api/block/getChildBlocks`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 父块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object>} Data - 直接子块的基本信息数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getChildBlocks(data) {
    return this._fetchWrapper('/api/block/getChildBlocks', 'POST', data, true);
  }

  /**
   * 获取内容字数统计
   * Endpoint: `POST /api/block/getContentWordCount`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} content - 要统计字数的文本内容
   *   @property {string | undefined} reqId - 可选的请求 ID，用于异步跟踪
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含字数统计结果和可选请求 ID 的对象
   *     @property {string | undefined} reqId - 如果请求中提供了 reqId，则在此返回
   *     @property {object} stat - 字数统计结果
   *       @property {number} wordCount - 总字数
   *       @property {number} charCount - 总字符数
   *       @property {number} linkCount - 总链接数
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getContentWordCount(data) {
    return this._fetchWrapper('/api/block/getContentWordCount', 'POST', data, true);
  }

  /**
   * 获取DOM中的纯文本内容
   * Endpoint: `POST /api/block/getDOMText`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} dom - 包含 HTML 标签的 DOM 字符串
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {string} Data - 从 DOM 中提取的纯文本内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDOMText(data) {
    return this._fetchWrapper('/api/block/getDOMText', 'POST', data, true);
  }

  /**
   * 获取文档信息
   * Endpoint: `POST /api/block/getDocInfo`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 目标文档块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含文档详细信息的对象
   *     @property {string} id - 文档块 ID
   *     @property {string} box - 笔记本 ID
   *     @property {string} path - 文档的存储路径
   *     @property {string} dom - 文档内容的 DOM (HTML 字符串)
   *     @property {string} title - 文档标题
   *     @property {string} icon - 文档图标的 Base64 编码或 Emoji
   *     @property {string} iconURL - 文档图标的 URL
   *     @property {string} breadcrumb - 文档的面包屑路径 (HTML 字符串)
   *     @property {boolean} isTemplate - 该文档是否为模板
   *     @property {string} updated - 文档更新时间 (yyyyMMddHHmmss格式)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDocInfo(data) {
    return this._fetchWrapper('/api/block/getDocInfo', 'POST', data, true);
  }

  /**
   * 批量获取多个文档信息
   * Endpoint: `POST /api/block/getDocsInfo`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 包含多个文档块 ID 的数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object>} Data - 包含多个文档详细信息的数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDocsInfo(data) {
    return this._fetchWrapper('/api/block/getDocsInfo', 'POST', data, true);
  }

  /**
   * 获取标题块下所有子孙块的DOM
   * Endpoint: `POST /api/block/getHeadingChildrenDOM`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 目标标题块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {string} Data - 标题块下所有子孙块合并的 DOM (HTML 字符串)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getHeadingChildrenDOM(data) {
    return this._fetchWrapper('/api/block/getHeadingChildrenDOM', 'POST', data, true);
  }

  /**
   * 获取标题块下所有子孙块的ID
   * Endpoint: `POST /api/block/getHeadingChildrenIDs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 目标标题块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<string>} Data - 标题块下所有子孙块的 ID 数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getHeadingChildrenIDs(data) {
    return this._fetchWrapper('/api/block/getHeadingChildrenIDs', 'POST', data, true);
  }

  /**
   * 获取删除标题块的事务
   * Endpoint: `POST /api/block/getHeadingDeleteTransaction`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取删除事务的标题块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含删除操作的事务对象
   *     @property {Array<object>} doOperations - 正向操作列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getHeadingDeleteTransaction(data) {
    return this._fetchWrapper('/api/block/getHeadingDeleteTransaction', 'POST', data, true);
  }

  /**
   * 获取调整标题级别的事务
   * Endpoint: `POST /api/block/getHeadingLevelTransaction`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要调整级别的标题块 ID
   *   @property {number} level - 新的标题级别 (1-6)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含调整级别操作的事务对象
   *     @property {Array<object>} doOperations - 正向操作列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getHeadingLevelTransaction(data) {
    return this._fetchWrapper('/api/block/getHeadingLevelTransaction', 'POST', data, true);
  }

  /**
   * 获取最近更新的块列表
   * Endpoint: `POST /api/block/getRecentUpdatedBlocks`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object>} Data - 最近更新的块信息数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRecentUpdatedBlocks(data) {
    return this._fetchWrapper('/api/block/getRecentUpdatedBlocks', 'POST', data, true);
  }

  /**
   * 获取块引用的所有定义块ID
   * Endpoint: `POST /api/block/getRefIDs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 发起引用的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<string>} Data - 该块引用的所有定义块的 ID 数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRefIDs(data) {
    return this._fetchWrapper('/api/block/getRefIDs', 'POST', data, true);
  }

  /**
   * 通过文件注解ID获取相关的引用ID和定义ID
   * Endpoint: `POST /api/block/getRefIDsByFileAnnotationID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 文件注解块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 包含相关引用ID和定义ID的对象
   *     @property {string} refID - 相关的引用块 ID
   *     @property {string} defID - 相关的定义块 ID
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRefIDsByFileAnnotationID(data) {
    return this._fetchWrapper('/api/block/getRefIDsByFileAnnotationID', 'POST', data, true);
  }

  /**
   * 获取引用块的锚文本
   * Endpoint: `POST /api/block/getRefText`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 引用块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {string} Data - 引用块的锚文本
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRefText(data) {
    return this._fetchWrapper('/api/block/getRefText', 'POST', data, true);
  }

  /**
   * 获取块的尾部若干子块
   * Endpoint: `POST /api/block/getTailChildBlocks`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 父块的 ID
   *   @property {number} size - 要获取的尾部子块数量
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object>} Data - 尾部子块的基本信息数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getTailChildBlocks(data) {
    return this._fetchWrapper('/api/block/getTailChildBlocks', 'POST', data, true);
  }

  /**
   * 获取块树统计信息
   * Endpoint: `POST /api/block/getTreeStat`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 目标块的 ID，通常为文档块
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 块树的统计信息对象
   *     @property {string} id - 块 ID
   *     @property {string} box - 笔记本 ID
   *     @property {string} path - 块路径
   *     @property {number} refCount - 引用数量
   *     @property {number} defCount - 定义数量
   *     @property {number} childrenCount - 直接子块数量
   *     @property {number} codeBlockCount - 代码块数量
   *     @property {number} avCount - 属性视图数量
   *     @property {number} docSize - 文档大小 (字节)
   *     @property {number} subFileCount - 子文件数量 (文档内文档)
   *     @property {number} headingCount - 标题块数量
   *     @property {number} listCount - 列表块数量
   *     @property {number} listItemCount - 列表项数量
   *     @property {number} mathBlockCount - 数学公式块数量
   *     @property {number} htmlBlockCount - HTML块数量
   *     @property {number} tableCount - 表格块数量
   *     @property {number} quoteCount - 引述块数量
   *     @property {number} superBlockCount - 超级块数量
   *     @property {number} paragraphCount - 段落数量
   *     @property {number} todoCount - 待办事项数量 (已完成或未完成)
   *     @property {number} imageCount - 图片资源数量
   *     @property {number} audioCount - 音频资源数量
   *     @property {number} videoCount - 视频资源数量
   *     @property {number} otherAssetCount - 其他资源数量
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getTreeStat(data) {
    return this._fetchWrapper('/api/block/getTreeStat', 'POST', data, true);
  }

  /**
   * 获取块的最近展开的父块ID
   * Endpoint: `POST /api/block/getUnfoldedParentID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 起始块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {string} Data - 最近的已展开父块的 ID，如果无此类父块或出错则为空字符串
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getUnfoldedParentID(data) {
    return this._fetchWrapper('/api/block/getUnfoldedParentID', 'POST', data, true);
  }

  /**
   * 插入块
   * Endpoint: `POST /api/block/insertBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} anchorID - 锚点块的 ID
   *   @property {string} data - 要插入的内容，可以是 Markdown 或 DOM 字符串
   *   @property {"markdown" | "dom"} dataType - 指定 data 参数的类型
   *   @property {boolean} isBefore - 是否在锚点块之前插入 (true: 之前, false: 之后)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object> | null} Data - 成功时返回包含新块 ID 的数组，失败时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async insertBlock(data) {
    return this._fetchWrapper('/api/block/insertBlock', 'POST', data, true);
  }

  /**
   * 插入前置子块
   * Endpoint: `POST /api/block/prependBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} data - 要插入的内容，可以是 Markdown 或 DOM 字符串
   *   @property {"markdown" | "dom"} dataType - 指定 data 参数的类型
   *   @property {string} parentID - 父块的 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object> | null} Data - 成功时返回包含新块 ID 的数组，失败时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async prependBlock(data) {
    return this._fetchWrapper('/api/block/prependBlock', 'POST', data, true);
  }

  /**
   * 设置块提醒时间
   * Endpoint: `POST /api/block/setBlockReminder`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要设置提醒的块 ID
   *   @property {string} timed - 提醒时间，格式为 yyyyMMddHHmmss (例如: 20230815103000)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {null} Data - 成功时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setBlockReminder(data) {
    return this._fetchWrapper('/api/block/setBlockReminder', 'POST', data, true);
  }

  /**
   * 交换引用块和定义块
   * Endpoint: `POST /api/block/swapBlockRef`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} refID - 原引用块的 ID
   *   @property {string} defID - 原定义块的 ID
   *   @property {boolean} includeChildren - 是否包含子块进行交换 (通常用于嵌入块)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {null} Data - 成功时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async swapBlockRef(data) {
    return this._fetchWrapper('/api/block/swapBlockRef', 'POST', data, true);
  }

  /**
   * 转移块引用关系
   * Endpoint: `POST /api/block/transferBlockRef`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} fromID - 原块的 ID，其引用关系将被转移
   *   @property {string} toID - 目标块的 ID，将接收引用关系
   *   @property {Array<string> | undefined} refIDs - 可选，如果提供，则只转移这些指定的引用块ID；否则转移 fromID 的所有引用块
   *   @property {any} reloadUI - 操作完成后是否重新加载UI，默认为 true
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {null} Data - 成功时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async transferBlockRef(data) {
    return this._fetchWrapper('/api/block/transferBlockRef', 'POST', data, true);
  }

  /**
   * 展开块
   * Endpoint: `POST /api/block/unfoldBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要展开的块 ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<any> | null} Data - 通常为 null，具体结构未在 Go 源码中明确，保持 any 以兼容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async unfoldBlock(data) {
    return this._fetchWrapper('/api/block/unfoldBlock', 'POST', data, true);
  }

  /**
   * 更新块内容
   * Endpoint: `POST /api/block/updateBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要更新的块 ID
   *   @property {string} data - 新的块内容，可以是 Markdown 或 DOM 字符串
   *   @property {"markdown" | "dom"} dataType - 指定 data 参数的类型
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object> | null} Data - 成功时返回包含已更新块 ID 的数组，失败时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async updateBlock(data) {
    return this._fetchWrapper('/api/block/updateBlock', 'POST', data, true);
  }

  /**
   * 前置追加日记块
   * Endpoint: `POST /api/block/prependDailyNoteBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} data - 要追加的内容，可以是 Markdown 或 DOM 字符串。如果 dataType 为 'markdown'，内容会先转换为 DOM。注意：后端实现中此接口行为类似 appendDailyNoteBlock，均在末尾追加，但定义保留 prepend 以匹配接口名和潜在的未来行为调整。建议使用 appendDailyNoteBlock 以获得明确的末尾追加行为。后端 action 为 prependInsert。 
   *   @property {"markdown" | "dom"} dataType - 指定 data 参数的类型 ('markdown' 或 'dom')。 
   *   @property {string} notebook - 目标笔记本的 ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<any> | null} Data - 操作成功时返回事务列表，失败时可能为 null。具体结构请参考 Transaction 对象。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async prependDailyNoteBlock(data) {
    return this._fetchWrapper('/api/block/prependDailyNoteBlock', 'POST', data, true);
  }

  /**
   * 移动块
   * Endpoint: `POST /api/block/moveBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要移动的块的 ID。
   *   @property {string | undefined} parentID - 新的父块 ID。如果提供了 previousID，则此字段可选。如果两者都未提供或均为空，则行为未定义或可能出错。不能是文档块ID。 
   *   @property {string | undefined} previousID - 新的前一个同级块的 ID。如果提供此字段，块将被移动到该同级块之后。如果未提供，将尝试基于 parentID 移动到父块的末尾（若 parentID 有效）。不能是文档块ID。 
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {null} Data - 此接口成功时不返回具体数据，UI 通常通过 WebSocket 消息更新。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async moveBlock(data) {
    return this._fetchWrapper('/api/block/moveBlock', 'POST', data, true);
  }

  /**
   * 移动大纲标题块
   * Endpoint: `POST /api/block/moveOutlineHeading`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要移动的大纲标题块的 ID。
   *   @property {string | undefined} parentID - 新的父块 ID (可以是文档块或其他标题块)。如果提供了 previousID，则此字段可选。 
   *   @property {string | undefined} previousID - 新的前一个同级标题块的 ID。如果提供此字段，标题块将被移动到该同级块之后。 
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<any> | null} Data - 操作成功时返回事务列表，失败时可能为 null。具体结构请参考 Transaction 对象。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async moveOutlineHeading(data) {
    return this._fetchWrapper('/api/block/moveOutlineHeading', 'POST', data, true);
  }

  /**
   * 获取书签
   * Endpoint: `POST /api/bookmark/getBookmark`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object>} Data - 书签数据数组，每个元素是一个书签分组及其包含的书签块列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBookmark(data) {
    return this._fetchWrapper('/api/bookmark/getBookmark', 'POST', data, true);
  }

  /**
   * 移除书签
   * Endpoint: `POST /api/bookmark/removeBookmark`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} bookmark - 要移除的书签的名称 (块 IAL 中 bookmark 属性的值)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功，其他表示失败
   *   @property {string} Msg - API 调用返回消息
   *   @property {object | undefined | null} Data - 仅在操作失败时可能返回此对象，包含UI相关的附加信息；操作成功时为 null。
   *     @property {number} closeTimeout - 一个建议的关闭超时时间 (毫秒)，通常在错误时提供以便UI提示
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeBookmark(data) {
    return this._fetchWrapper('/api/bookmark/removeBookmark', 'POST', data, true);
  }

  /**
   * 重命名书签
   * Endpoint: `POST /api/bookmark/renameBookmark`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} oldBookmark - 要重命名的旧书签名称 (块 IAL 中 bookmark 属性的当前值)
   *   @property {string} newBookmark - 新的书签名称 (将写入块 IAL 中 bookmark 属性的新值)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功，其他表示失败
   *   @property {string} Msg - API 调用返回消息
   *   @property {object | undefined | null} Data - 仅在操作失败时可能返回此对象，包含UI相关的附加信息；操作成功时为 null。
   *     @property {number} closeTimeout - 一个建议的关闭超时时间 (毫秒)，通常在错误时提供以便UI提示
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renameBookmark(data) {
    return this._fetchWrapper('/api/bookmark/renameBookmark', 'POST', data, true);
  }

  /**
   * 获取频道信息
   * Endpoint: `POST /api/broadcast/getChannelInfo`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} name - 要查询的广播频道名称
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {object} Data - 频道信息对象
   *     @property {string} name - 频道名称
   *     @property {number} count - 频道的总订阅者数量 (WebSocket + SSE)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getChannelInfo(data) {
    return this._fetchWrapper('/api/broadcast/getChannelInfo', 'POST', data, true);
  }

  /**
   * 获取频道列表
   * Endpoint: `POST /api/broadcast/getChannels`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<object>} Data - 活跃频道信息对象数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getChannels(data) {
    return this._fetchWrapper('/api/broadcast/getChannels', 'POST', data, true);
  }

  /**
   * 发送消息到频道
   * Endpoint: `POST /api/broadcast/postMessage`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} channel - 目标广播频道的名称
   *   @property {string | undefined} cmd - 可选，要执行的命令（例如 wsctrl、protyle等）
   *   @property {string} data - 要发送的消息内容或命令参数 (JSON 字符串)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {any | null} Data - 通常不返回具体数据，具体依赖于发送的 cmd
   * @throws {Error} If the request fails or the server returns an error.
   */
  async postMessage(data) {
    return this._fetchWrapper('/api/broadcast/postMessage', 'POST', data, true);
  }

  /**
   * 发布消息到频道
   * Endpoint: `POST /api/broadcast/publish`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} channel - 目标广播频道的名称
   *   @property {"string" | "binary"} type - 消息类型：'string' (文本) 或 'binary' (二进制文件)
   *   @property {string | undefined} data - 当 type 为 'string' 时，此字段为消息内容
   *   @property {any | undefined} file - 当 type 为 'binary' 时，此字段为上传的文件 (应通过 FormData 传递)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码 (外层)
   *   @property {string} Msg - API 调用返回消息 (外层)
   *   @property {object} Data - 发布操作的结果详情
   *     @property {number} code - 操作结果返回码，0 表示成功
   *     @property {string} msg - 操作结果消息
   *     @property {object} channel - 频道信息
   *       @property {string} name - 目标频道名称
   *       @property {number} count - 发布时频道的订阅者数量
   *     @property {object} message - 发布的消息详情
   *       @property {"string" | "binary"} type - 发布的消息类型
   *       @property {number} size - 发布的消息大小 (字节)
   *       @property {string} filename - 发布的文件名 (如果 type 为 'binary')
   * @throws {Error} If the request fails or the server returns an error.
   */
  async broadcastPublish(data) {
    return this._fetchWrapper('/api/broadcast/publish', 'POST', data, true);
  }

  /**
   * 读取剪贴板文件路径
   * Endpoint: `POST /api/clipboard/readFilePaths`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {Array<string>} Data - 从剪贴板中读取到的文件绝对路径列表。如果剪贴板中不是文件路径，或在 Linux 等受限情况下，可能返回空数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async readFilePaths(data) {
    return this._fetchWrapper('/api/clipboard/readFilePaths', 'POST', data, true);
  }

  /**
   * 获取云端空间与流量信息
   * Endpoint: `POST /api/cloud/getCloudSpace`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功，1 表示获取信息时发生错误
   *   @property {string} Msg - API 调用返回消息，错误时包含错误信息
   *   @property {object} Data - 云端空间和流量的详细信息
   *     @property {object} sync - 云同步相关信息
   *       @property {number} size - 云端同步数据的大小 (字节)
   *       @property {string} hSize - 人类可读的云端同步数据大小 (例如 '1.2 GB')，仅当服务商为思源官方时有效，其他为'-'
   *       @property {string} updated - 云端同步数据最后更新时间戳 (格式可能为 Unix 时间戳或特定日期字符串)
   *       @property {string} cloudName - 云端同步数据存放的目录名 (例如 'main')
   *       @property {string} saveDir - 本地同步数据实际存放的目录绝对路径
   *     @property {object} backup - 云备份相关信息
   *       @property {number} size - 云端备份数据的大小 (字节)
   *       @property {string} hSize - 人类可读的云端备份数据大小 (例如 '500 MB')，仅当服务商为思源官方时有效，其他为'-'
   *       @property {string} updated - 云端备份数据最后更新时间戳 (格式可能为 Unix 时间戳或特定日期字符串)
   *       @property {string} saveDir - 本地备份数据实际存放的目录绝对路径
   *     @property {string} hAssetSize - 人类可读的云端资源文件总大小 (例如 '300 MB')，仅当服务商为思源官方时有效，其他为'-'
   *     @property {string} hSize - 人类可读的云端已用空间总大小 (同步数据 + 备份数据 + 资源文件，例如 '2 GB')，仅当服务商为思源官方时有效，其他为'-'
   *     @property {string} hTotalSize - 人类可读的云端总可用空间大小 (例如 '10 GB')，仅当服务商为思源官方时有效，其他为'-'
   *     @property {string} hExchangeSize - 人类可读的积分兑换云空间大小 (例如 '1 GB')，仅当服务商为思源官方时有效，其他为'-'
   *     @property {string} hTrafficUploadSize - 人类可读的当月已用上传流量 (例如 '5 GB')，仅当服务商为思源官方时有效，其他为'-'
   *     @property {string} hTrafficDownloadSize - 人类可读的当月已用下载流量 (例如 '12 GB')，仅当服务商为思源官方时有效，其他为'-'
   *     @property {string} hTrafficAPIGet - 人类可读的当月 API GET 请求次数 (例如 '1.5 k')，仅当服务商为思源官方时有效，其他为'-'
   *     @property {string} hTrafficAPIPut - 人类可读的当月 API PUT 请求次数 (例如 '800')，仅当服务商为思源官方时有效，其他为'-'
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getCloudSpace(data) {
    return this._fetchWrapper('/api/cloud/getCloudSpace', 'POST', data, true);
  }

  /**
   * Pandoc 格式转换
   * Endpoint: `POST /api/convert/pandoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} dir - Pandoc 命令执行的工作目录路径，如果为空则在临时目录中执行
   *   @property {Array<string>} args - Pandoc 命令行参数数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} path - 转换后输出文件的路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async pandoc(data) {
    return this._fetchWrapper('/api/convert/pandoc', 'POST', data, true);
  }

  /**
   * 导出到链滴
   * Endpoint: `POST /api/export/export2Liandi`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出到链滴的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功export
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async export2Liandi(data) {
    return this._fetchWrapper('/api/export/export2Liandi', 'POST', data, true);
  }

  /**
   * 导出上传的文件
   * Endpoint: `POST /api/export/exportAsFile`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} type - 上传文件的MIME类型
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 处理后的文件名
   *     @property {string} file - 文件在服务器上的可访问路径 (相对于/export/)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportAsFile(data) {
    return this._fetchWrapper('/api/export/exportAsFile', 'POST', data, true);
  }

  /**
   * 导出文档为AsciiDoc
   * Endpoint: `POST /api/export/exportAsciiDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportAsciiDoc(data) {
    return this._fetchWrapper('/api/export/exportAsciiDoc', 'POST', data, true);
  }

  /**
   * 导出属性视图为CSV
   * Endpoint: `POST /api/export/exportAttributeView`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 属性视图的ID (avID)
   *   @property {string} blockID - 包含该属性视图的块ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} zip - 导出的CSV压缩文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportAttributeView(data) {
    return this._fetchWrapper('/api/export/exportAttributeView', 'POST', data, true);
  }

  /**
   * 导出全部数据
   * Endpoint: `POST /api/export/exportData`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportData(data) {
    return this._fetchWrapper('/api/export/exportData', 'POST', data, true);
  }

  /**
   * 导出文件夹数据
   * Endpoint: `POST /api/export/exportDataInFolder`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} folder - 要导出数据的文件夹路径 (相对于工作空间data目录)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的压缩包文件名 (不含路径)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportDataInFolder(data) {
    return this._fetchWrapper('/api/export/exportDataInFolder', 'POST', data, true);
  }

  /**
   * 导出文档为DOCX
   * Endpoint: `POST /api/export/exportDocx`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   *   @property {string} savePath - 服务器上保存 .docx 文件的绝对路径
   *   @property {boolean} removeAssets - 是否移除导出的 Word 文件中包含的资源文件（如图片）的原始文件
   *   @property {boolean | undefined} merge - 是否将子文档内容合并到主文档中导出 (默认为 false)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} path - 最终生成的 .docx 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportDocx(data) {
    return this._fetchWrapper('/api/export/exportDocx', 'POST', data, true);
  }

  /**
   * 导出文档为EPUB
   * Endpoint: `POST /api/export/exportEPUB`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportEPUB(data) {
    return this._fetchWrapper('/api/export/exportEPUB', 'POST', data, true);
  }

  /**
   * 导出文档为标准HTML
   * Endpoint: `POST /api/export/exportHTML`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   *   @property {boolean} pdf - 是否为导出 PDF 进行预处理（例如，处理链接和资源路径以适应 PDF 生成环境）
   *   @property {string} savePath - 服务器上保存 HTML 文件的绝对路径 (如果 pdf 为 true，则此路径可能用于临时存储)
   *   @property {boolean | undefined} keepFold - 是否在导出时保持块的折叠状态 (默认为 false，展开所有)
   *   @property {boolean | undefined} merge - 是否将子文档内容合并到主文档中导出 (默认为 false)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} id - 导出的文档ID
   *     @property {string} name - 文档的原始名称
   *     @property {string} content - 生成的 HTML 内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportHTML(data) {
    return this._fetchWrapper('/api/export/exportHTML', 'POST', data, true);
  }

  /**
   * 导出单个文档为Markdown
   * Endpoint: `POST /api/export/exportMd`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportMd(data) {
    return this._fetchWrapper('/api/export/exportMd', 'POST', data, true);
  }

  /**
   * 导出文档Markdown内容
   * Endpoint: `POST /api/export/exportMdContent`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出 Markdown 内容的文档ID
   *   @property {number | undefined} refMode - 块引用处理模式 (0: 锚文本, 1: ((id)) 形式, 2: 嵌入块, 默认遵从全局配置)
   *   @property {number | undefined} embedMode - 嵌入块处理模式 (0: 忽略, 1: 展开, 默认遵从全局配置)
   *   @property {boolean | undefined} yfm - 是否包含 YAML Front Matter (默认为 true)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} hPath - 文档的人类可读路径 (面包屑路径)
   *     @property {string} content - 导出的 Markdown 文本内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportMdContent(data) {
    return this._fetchWrapper('/api/export/exportMdContent', 'POST', data, true);
  }

  /**
   * 导出文档为纯HTML内容
   * Endpoint: `POST /api/export/exportMdHTML`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出 HTML 内容的文档ID
   *   @property {string} savePath - 服务器上保存 HTML 文件的绝对路径 (此参数在后端代码中存在但似乎未实际用于此接口，可能为遗留或通用逻辑)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} id - 导出的文档ID
   *     @property {string} name - 文档的原始名称
   *     @property {string} content - 生成的纯 HTML 内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportMdHTML(data) {
    return this._fetchWrapper('/api/export/exportMdHTML', 'POST', data, true);
  }

  /**
   * 批量导出文档为Markdown
   * Endpoint: `POST /api/export/exportMds`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 要导出的文档ID数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportMds(data) {
    return this._fetchWrapper('/api/export/exportMds', 'POST', data, true);
  }

  /**
   * 导出文档为MediaWiki
   * Endpoint: `POST /api/export/exportMediaWiki`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportMediaWiki(data) {
    return this._fetchWrapper('/api/export/exportMediaWiki', 'POST', data, true);
  }

  /**
   * 导出笔记本为Markdown
   * Endpoint: `POST /api/export/exportNotebookMd`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要导出的笔记本ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名 (通常为笔记本名称)
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportNotebookMd(data) {
    return this._fetchWrapper('/api/export/exportNotebookMd', 'POST', data, true);
  }

  /**
   * 导出笔记本为.sy包
   * Endpoint: `POST /api/export/exportNotebookSY`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的笔记本ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} zip - 导出的 .sy 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportNotebookSY(data) {
    return this._fetchWrapper('/api/export/exportNotebookSY', 'POST', data, true);
  }

  /**
   * 导出文档为ODT
   * Endpoint: `POST /api/export/exportODT`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportODT(data) {
    return this._fetchWrapper('/api/export/exportODT', 'POST', data, true);
  }

  /**
   * 导出文档为OPML
   * Endpoint: `POST /api/export/exportOPML`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportOPML(data) {
    return this._fetchWrapper('/api/export/exportOPML', 'POST', data, true);
  }

  /**
   * 导出文档为OrgMode
   * Endpoint: `POST /api/export/exportOrgMode`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportOrgMode(data) {
    return this._fetchWrapper('/api/export/exportOrgMode', 'POST', data, true);
  }

  /**
   * 导出文档预览HTML
   * Endpoint: `POST /api/export/exportPreviewHTML`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出预览 HTML 的文档ID
   *   @property {boolean | undefined} keepFold - 是否在导出时保持块的折叠状态 (默认为 false，展开所有)
   *   @property {boolean | undefined} merge - 是否将子文档内容合并到主文档中导出 (默认为 false)
   *   @property {boolean | undefined} image - 是否为图片导出优化，例如，将图片转换为 Base64 嵌入 (默认为 false)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} id - 导出的文档ID
   *     @property {string} name - 文档的原始名称
   *     @property {string} content - 生成的预览 HTML 内容
   *     @property {Record<string, string>} attrs - 文档块的属性 (IAL)
   *     @property {string} type - 文档块的类型 (如 'd' 表示文档块)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportPreviewHTML(data) {
    return this._fetchWrapper('/api/export/exportPreviewHTML', 'POST', data, true);
  }

  /**
   * 导出文档为RTF
   * Endpoint: `POST /api/export/exportRTF`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportRTF(data) {
    return this._fetchWrapper('/api/export/exportRTF', 'POST', data, true);
  }

  /**
   * 导出文档为reStructuredText
   * Endpoint: `POST /api/export/exportReStructuredText`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportReStructuredText(data) {
    return this._fetchWrapper('/api/export/exportReStructuredText', 'POST', data, true);
  }

  /**
   * 导出指定资源
   * Endpoint: `POST /api/export/exportResources`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} name - 导出的 .zip 文件的主文件名 (不含扩展名)。如果为空，则默认为 'export-YYYY-MM-DD_HH-mm-ss' 格式
   *   @property {Array<string>} paths - 要导出的文件或文件夹在工作空间中的相对路径数组 (相对于data目录)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} path - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportResources(data) {
    return this._fetchWrapper('/api/export/exportResources', 'POST', data, true);
  }

  /**
   * 导出单个文档为.sy包
   * Endpoint: `POST /api/export/exportSY`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .sy 文件名
   *     @property {string} zip - 导出的 .sy 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportSY(data) {
    return this._fetchWrapper('/api/export/exportSY', 'POST', data, true);
  }

  /**
   * 导出临时内容预览
   * Endpoint: `POST /api/export/exportTempContent`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} content - 要导出预览的 Markdown 内容字符串
   *   @property {number | undefined} mode - 导出模式 (具体含义未在后端实现中明确使用)
   *   @property {string | undefined} theme - 主题名称 (未在后端实现中明确使用)
   *   @property {string | undefined} title - 导出内容的标题 (未在后端实现中明确使用)
   *   @property {string | undefined} type - 导出类型，如 'html', 'pdf', 'png' (未在后端实现中明确使用)
   *   @property {string | undefined} css - 自定义 CSS 内容 (未在后端实现中明确使用)
   *   @property {string | undefined} js - 自定义 JavaScript 内容 (未在后端实现中明确使用)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} url - 生成的临时内容预览 URL (形如 http://localhost:6806/export/temp/xxxxxxx)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportTempContent(data) {
    return this._fetchWrapper('/api/export/exportTempContent', 'POST', data, true);
  }

  /**
   * 导出文档为Textile
   * Endpoint: `POST /api/export/exportTextile`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} name - 导出的 .zip 文件名
   *     @property {string} zip - 导出的 .zip 文件在服务器上的绝对路径
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportTextile(data) {
    return this._fetchWrapper('/api/export/exportTextile', 'POST', data, true);
  }

  /**
   * 获取文档HTML预览
   * Endpoint: `POST /api/export/preview`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取 HTML 预览的文档ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回的数据
   *     @property {string} html - 生成的文档 HTML 预览内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportPreview(data) {
    return this._fetchWrapper('/api/export/preview', 'POST', data, true);
  }

  /**
   * PDF导出后处理
   * Endpoint: `POST /api/export/processPDF`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 相关文档的ID (用于日志记录或上下文关联)
   *   @property {string} path - 已生成的 HTML 文件的绝对路径 (该文件将被用于生成或处理 PDF)
   *   @property {boolean | undefined} merge - 是否将子文档内容合并 (默认为 false)
   *   @property {boolean} removeAssets - 处理完成后是否移除相关资源文件
   *   @property {boolean} watermark - 是否添加水印
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async processPDF(data) {
    return this._fetchWrapper('/api/export/processPDF', 'POST', data, true);
  }

  /**
   * 扩展内容复制处理
   * Endpoint: `POST /api/extension/copy`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} dom - 要处理的 HTML DOM 内容字符串。这是必须的字段。注意：即使是从链滴剪藏（href 指向链滴文章），也需要传递一个 dom 参数，内容可以为空字符串。
   *   @property {string | undefined} notebook - 目标笔记本的ID。如果提供，资源文件将保存到该笔记本的 assets 文件夹下；否则保存到工作空间根目录的 assets 文件夹下。
   *   @property {string | undefined} href - 原始剪藏页面的 URL。如果此 URL 指向链滴文章 (ld246.com 或 liuyun.io)，后端会尝试直接获取文章的 Markdown 内容，并优先使用此内容而非 dom 参数中的 HTML。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息，失败时错误信息显示在这里
   *   @property {object | null} Data - 成功时返回的数据，如果处理失败或没有有效内容则可能为 null
   *     @property {string} md - 转换后或直接获取的 Markdown 内容
   *     @property {boolean} withMath - 指示转换后的 Markdown 内容中是否包含数学公式 (KaTeX)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async extensionCopy(data) {
    return this._fetchWrapper('/api/extension/copy', 'POST', data, true);
  }

  /**
   * 复制文件
   * Endpoint: `POST /api/file/copyFile`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} src - 源文件路径。如果是资源文件，则为相对于 assets 目录的路径；如果是普通工作空间文件，则为相对于工作空间根目录的路径。后端会尝试将其解析为绝对路径。注意：此接口不能直接复制目录。后台实现会先尝试将其作为资源文件解析，如果失败则作为工作空间普通文件解析。若要复制普通文件，建议使用 /api/file/globalCopyFiles。 
   *   @property {string} dest - 目标文件绝对路径。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时 Data 为 null；失败时可能包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 在操作失败时，可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async copyFile(data) {
    return this._fetchWrapper('/api/file/copyFile', 'POST', data, true);
  }

  /**
   * 获取文件内容
   * Endpoint: `POST /api/file/getFile`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 要获取内容的文件路径 (相对于工作空间根目录)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误状态码 (例如 403, 404, 500)
   *   @property {string} Msg - 错误消息
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getFile(data) {
    return this._fetchWrapper('/api/file/getFile', 'POST', data, true);
  }

  /**
   * 获取文件唯一名
   * Endpoint: `POST /api/file/getUniqueFilename`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 原始文件路径 (通常包含期望的文件名和扩展名)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - Data
   *     @property {string} path - 处理后的唯一文件路径。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getUniqueFilename(data) {
    return this._fetchWrapper('/api/file/getUniqueFilename', 'POST', data, true);
  }

  /**
   * 全局复制多个文件
   * Endpoint: `POST /api/file/globalCopyFiles`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} srcs - 要复制的源文件绝对路径数组。如果任何一个文件不存在，操作将失败。注意：不能是目录。
   *   @property {string} destDir - 目标目录路径 (相对于工作空间根目录)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async globalCopyFiles(data) {
    return this._fetchWrapper('/api/file/globalCopyFiles', 'POST', data, true);
  }

  /**
   * 上传/创建文件或目录
   * Endpoint: `POST /api/file/putFile`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 目标文件或目录在工作空间内的相对路径。文件名需要符合规范，否则请求失败。
   *   @property {boolean} isDir - 是否创建目录。如果为 true，则创建目录；如果为 false 或未提供，则上传文件。
   *   @property {string | undefined} modTime - 可选的文件修改时间戳 (毫秒级字符串)。如果提供，则设置文件或目录的修改时间。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async putFile(data) {
    return this._fetchWrapper('/api/file/putFile', 'POST', data, true);
  }

  /**
   * 读取目录内容
   * Endpoint: `POST /api/file/readDir`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 要读取的目录路径 (相对于工作空间根目录)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {Array<object>} Data - 目录中的条目列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async readDir(data) {
    return this._fetchWrapper('/api/file/readDir', 'POST', data, true);
  }

  /**
   * 移除文件或目录
   * Endpoint: `POST /api/file/removeFile`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 要移除的文件或目录路径 (相对于工作空间根目录)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeFile(data) {
    return this._fetchWrapper('/api/file/removeFile', 'POST', data, true);
  }

  /**
   * 重命名文件或目录
   * Endpoint: `POST /api/file/renameFile`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 原始文件或目录路径 (相对于工作空间根目录)。
   *   @property {string} newPath - 新的文件或目录路径 (相对于工作空间根目录)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renameFile(data) {
    return this._fetchWrapper('/api/file/renameFile', 'POST', data, true);
  }

  /**
   * 更改文档树排序
   * Endpoint: `POST /api/filetree/changeSort`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要更改排序的笔记本ID。
   *   @property {Array<string>} paths - 需要调整排序的文档路径列表。这些路径通常是文档在其笔记本内的相对路径。后端会根据这些路径的顺序来更新文档树的排序。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async changeSort(data) {
    return this._fetchWrapper('/api/filetree/changeSort', 'POST', data, true);
  }

  /**
   * 创建或获取今日日记
   * Endpoint: `POST /api/filetree/createDailyNote`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要在哪个笔记本下创建日记的ID。
   *   @property {string | undefined} app - 发起创建请求的应用标识，可选参数，用于事件推送时的识别。
   *   @property {string | undefined} callback - 回调标识，可选参数，用于事件推送。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码。0 表示成功创建或获取；1 表示笔记本未找到；-1 表示其他错误。
   *   @property {string} Msg - 响应消息。
   *   @property {object | undefined} Data - 成功时返回日记文档的ID；笔记本未找到时此字段不存在。
   *     @property {string} id - 创建或获取到的日记文档的根块ID。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async createDailyNote(data) {
    return this._fetchWrapper('/api/filetree/createDailyNote', 'POST', data, true);
  }

  /**
   * 创建文档
   * Endpoint: `POST /api/filetree/createDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 文档所属的笔记本ID。
   *   @property {string} path - 文档的存储路径 (相对于笔记本根目录，例如 '/folder/documentName')。
   *   @property {string} title - 文档的标题。
   *   @property {string} md - 文档的初始 Markdown 内容。
   *   @property {Array<string> | undefined} sorts - 可选的排序信息数组。
   *   @property {boolean | undefined} listDocTree - 是否在创建后触发文档树列表更新事件，默认为 false。
   *   @property {string | undefined} callback - 回调标识，可选参数，用于事件推送。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回新文档的ID；失败时可能包含 closeTimeout。
   *     @property {string} id - 新创建文档的根块ID。
   *     @property {number | undefined} closeTimeout - 操作失败时，可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async createDoc(data) {
    return this._fetchWrapper('/api/filetree/createDoc', 'POST', data, true);
  }

  /**
   * 通过Markdown创建文档
   * Endpoint: `POST /api/filetree/createDocWithMd`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 文档所属的笔记本ID。
   *   @property {string} path - 文档的人类可读路径 (HPath)，例如 '/My Notes/New Document'。后端会处理路径中的非法字符和长度限制。
   *   @property {string} markdown - 新文档的Markdown内容。
   *   @property {string | undefined} parentID - 可选的父文档ID。如果提供，新文档将作为该文档的子文档创建。
   *   @property {string | undefined} id - 可选的新文档ID。如果提供且合法，将使用此ID创建文档；否则自动生成。
   *   @property {string | undefined} tags - 可选的文档标签字符串，多个标签以逗号分隔。
   *   @property {boolean | undefined} withMath - Markdown内容中是否包含数学公式，默认为false。
   *   @property {string | undefined} clippingHref - 如果是通过剪藏创建的，可以提供原始剪藏页面的URL。
   *   @property {boolean | undefined} listDocTree - 是否在创建后触发文档树列表更新事件，默认为 false。
   *   @property {string | undefined} callback - 回调标识，可选参数，用于事件推送。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {string | undefined} Data - 成功时返回新创建文档的ID。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async createDocWithMd(data) {
    return this._fetchWrapper('/api/filetree/createDocWithMd', 'POST', data, true);
  }

  /**
   * 文档转换为标题块
   * Endpoint: `POST /api/filetree/doc2Heading`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} srcID - 要转换的源文档的ID。
   *   @property {string} targetID - 目标文档中，新标题块将插入到其后的那个标题块的ID。如果 after 为 false，则插入其前。
   *   @property {boolean} after - 是否将源文档内容插入到 targetID 块之后 (true) 或之前 (false)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回源文档的笔记本和路径信息；失败时可能包含 closeTimeout。
   *     @property {string} srcTreeBox - 源文档所在的笔记本ID。
   *     @property {string} srcTreePath - 源文档的路径。
   *     @property {number | undefined} closeTimeout - 操作失败时，可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async doc2Heading(data) {
    return this._fetchWrapper('/api/filetree/doc2Heading', 'POST', data, true);
  }

  /**
   * 复制文档
   * Endpoint: `POST /api/filetree/duplicateDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要复制的源文档的ID。
   *   @property {boolean | undefined} listDocTree - 是否在复制后触发文档树列表更新事件，默认为 true (根据 Go 源码，此参数会添加到推送事件中)。
   *   @property {string | undefined} callback - 回调标识，可选参数，用于事件推送。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回新文档的相关信息；失败时可能包含 closeTimeout。
   *     @property {string} id - 新复制出来的文档的根块ID。
   *     @property {string} notebook - 新文档所在的笔记本ID。
   *     @property {string} path - 新文档的存储路径。
   *     @property {string} hPath - 新文档的人类可读路径 (HPath)。
   *     @property {number | undefined} closeTimeout - 操作失败时，可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async duplicateDoc(data) {
    return this._fetchWrapper('/api/filetree/duplicateDoc', 'POST', data, true);
  }

  /**
   * 获取文档内容和结构
   * Endpoint: `POST /api/filetree/getDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取的文档或块的ID。
   *   @property {number | undefined} index - 当 id 指向一个列表项容器块时，用于指定获取第几个列表项，从0开始。默认为0。主要用于动态加载长列表。
   *   @property {string | undefined} query - 搜索关键词，用于在文档内容中进行搜索和高亮。与 queryMethod 和 queryTypes 配合使用。
   *   @property {number | undefined} queryMethod - 搜索方法。0: 关键词，1: 查询语法。默认为0。
   *   @property {Record<string, boolean> | undefined} queryTypes - 搜索类型。一个键值对对象，如 {'blockquote': true, 'codeBlock': false}，表示搜索哪些类型的块。默认为搜索所有类型。
   *   @property {number | undefined} mode - 加载模式。0: 仅当前ID内容；1: 向上加载；2: 向下加载；3: 上下都加载；4: 加载末尾。默认为0。
   *   @property {number | undefined} size - 加载块的数量。默认为102400。当提供了 startID 和 endID 时，此值会被配置项 editor.dynamicLoadBlocks 覆盖。
   *   @property {string | undefined} startID - 动态加载范围的起始块ID。通常与 endID 一起使用。
   *   @property {string | undefined} endID - 动态加载范围的结束块ID。通常与 startID 一起使用。
   *   @property {boolean | undefined} isBacklink - 是否为反向链接视图的上下文加载，默认为 false。
   *   @property {Record<string, string> | undefined} originalRefBlockIDs - 原始引用块ID的映射，用于反链高亮等场景。键为当前文档中的块ID，值为原始文档中的块ID。
   *   @property {boolean | undefined} highlight - 是否对内容进行高亮处理（例如搜索结果高亮），默认为 true。
   *   @property {string | undefined} reqId - 请求ID，会透传到响应中，用于跟踪请求。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码。0: 成功；1: 通用错误；3: 块未找到。
   *   @property {string} Msg - 响应消息。
   *   @property {object | undefined} Data - 成功时返回文档内容和结构信息；失败时此字段可能不存在。
   *     @property {string} id - 请求的原始块ID。
   *     @property {number} mode - 请求的加载模式。
   *     @property {string} parentID - 父块ID。
   *     @property {string} parent2ID - 父父块ID。
   *     @property {string} rootID - 文档根块ID。
   *     @property {number} type - 块类型。
   *     @property {string} content - 块的DOM内容 (HTML字符串)。
   *     @property {number} blockCount - 返回的块数量。
   *     @property {boolean} eof - 是否已到达文档末尾 (在向下加载模式时)。
   *     @property {boolean} scroll - 是否需要滚动定位。
   *     @property {string} box - 文档所属的笔记本ID。
   *     @property {string} path - 文档的存储路径。
   *     @property {boolean} isSyncing - 文档当前是否正在同步中。
   *     @property {boolean} isBacklinkExpand - 是否为反链展开上下文。
   *     @property {Array<string> | undefined} keywords - 搜索时匹配到的关键词列表。
   *     @property {string | undefined} reqId - 请求时传递的 reqId。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDoc(data) {
    return this._fetchWrapper('/api/filetree/getDoc', 'POST', data, true);
  }

  /**
   * 获取新文档的默认保存位置
   * Endpoint: `POST /api/filetree/getDocCreateSavePath`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 当前操作的笔记本ID。计算默认保存位置时会参考此笔记本的配置及全局配置。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | undefined} Data - 成功时返回 box 和 path；失败时此字段可能不存在。
   *     @property {string} box - 计算得出的用于保存新文档的笔记本ID。
   *     @property {string} path - 计算得出的用于保存新文档的人类可读路径 (HPath)。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDocCreateSavePath(data) {
    return this._fetchWrapper('/api/filetree/getDocCreateSavePath', 'POST', data, true);
  }

  /**
   * 通过ID获取完整层级路径
   * Endpoint: `POST /api/filetree/getFullHPathByID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要查询的文档或块的ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {string | undefined} Data - 成功时返回完整的层级路径字符串；如果ID无效或未找到，则此字段可能不存在或为空。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getFullHPathByID(data) {
    return this._fetchWrapper('/api/filetree/getFullHPathByID', 'POST', data, true);
  }

  /**
   * 通过ID获取文档的人类可读路径
   * Endpoint: `POST /api/filetree/getHPathByID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要查询的文档或块的ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {string | undefined} Data - 成功时返回人类可读路径 (HPath)；如果ID无效或未找到，则此字段可能不存在或为空。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getHPathByID(data) {
    return this._fetchWrapper('/api/filetree/getHPathByID', 'POST', data, true);
  }

  /**
   * 通过文档实际路径获取人类可读路径
   * Endpoint: `POST /api/filetree/getHPathByPath`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 文档所在的笔记本ID。
   *   @property {string} path - 文档的实际存储路径 (相对于笔记本根目录，例如 '/folderName/documentName.sy')。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {string | undefined} Data - 成功时返回人类可读路径 (HPath)；如果路径无效或未找到文档，则此字段可能不存在或为空。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getHPathByPath(data) {
    return this._fetchWrapper('/api/filetree/getHPathByPath', 'POST', data, true);
  }

  /**
   * 批量通过文档实际路径获取人类可读路径
   * Endpoint: `POST /api/filetree/getHPathsByPaths`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<object>} paths - 包含笔记本ID和文档路径的对象数组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {Array<string> | undefined} Data - 成功时返回与输入顺序对应的人类可读路径 (HPath) 数组；如果某个输入无效，对应位置可能为空字符串或数组长度可能不匹配。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getHPathsByPaths(data) {
    return this._fetchWrapper('/api/filetree/getHPathsByPaths', 'POST', data, true);
  }

  /**
   * 通过人类可读路径获取文档ID列表
   * Endpoint: `POST /api/filetree/getIDsByHPath`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 文档所在的笔记本ID。
   *   @property {string} path - 要查询的文档的人类可读路径 (HPath)，例如 '/My Notes/Topic'。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {Array<string> | undefined} Data - 成功时返回匹配的文档ID数组；如果未找到或路径无效，则数组可能为空或此字段不存在。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getIDsByHPath(data) {
    return this._fetchWrapper('/api/filetree/getIDsByHPath', 'POST', data, true);
  }

  /**
   * 通过ID获取文档的实际存储路径和笔记本ID
   * Endpoint: `POST /api/filetree/getPathByID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要查询的文档或块的ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | undefined} Data - 成功时返回 path 和 notebook；如果ID无效或未找到，则此字段可能不存在。
   *     @property {string} path - 文档的实际存储路径 (相对于笔记本根目录，例如 '/folderName/documentName.sy')。
   *     @property {string} notebook - 文档所在的笔记本ID。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getPathByID(data) {
    return this._fetchWrapper('/api/filetree/getPathByID', 'POST', data, true);
  }

  /**
   * 获取新块引的默认保存位置
   * Endpoint: `POST /api/filetree/getRefCreateSavePath`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 当前操作的笔记本ID。计算默认保存位置时会参考此笔记本的配置及全局配置。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | undefined} Data - 成功时返回 box 和 path；失败时此字段可能不存在。
   *     @property {string} box - 计算得出的用于保存新块引文档的笔记本ID。
   *     @property {string} path - 计算得出的用于保存新块引文档的人类可读路径 (HPath)。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRefCreateSavePath(data) {
    return this._fetchWrapper('/api/filetree/getRefCreateSavePath', 'POST', data, true);
  }

  /**
   * 标题块转换为文档
   * Endpoint: `POST /api/filetree/heading2Doc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} srcHeadingID - 源文档中要转换为新文档的标题块的ID。
   *   @property {string} targetNoteBook - 新文档将要创建在哪个笔记本的ID。
   *   @property {string | undefined} targetPath - 新文档在目标笔记本中的可选保存路径 (HPath)。如果未提供，则根据配置或默认规则生成。
   *   @property {string | undefined} previousPath - 可选参数，用于指定新文档在文档树中的排序位置，它应该是目标位置前一个文档的路径。
   *   @property {string | undefined} callback - 回调标识，可选参数，用于事件推送。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回新文档的ID和路径；失败时可能包含 closeTimeout。
   *     @property {string} srcRootBlockID - 转换后新文档的根块ID。
   *     @property {string} path - 新文档在目标笔记本中的实际存储路径。
   *     @property {number | undefined} closeTimeout - 操作失败时，可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async heading2Doc(data) {
    return this._fetchWrapper('/api/filetree/heading2Doc', 'POST', data, true);
  }

  /**
   * 列表项转换为文档
   * Endpoint: `POST /api/filetree/li2Doc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} srcListItemID - 源文档中要转换为新文档的列表项的ID。
   *   @property {string} targetNoteBook - 新文档将要创建在哪个笔记本的ID。
   *   @property {string | undefined} targetPath - 新文档在目标笔记本中的可选保存路径 (HPath)。如果未提供，则根据配置或默认规则生成。
   *   @property {string | undefined} previousPath - 可选参数，用于指定新文档在文档树中的排序位置，它应该是目标位置前一个文档的路径。
   *   @property {string | undefined} callback - 回调标识，可选参数，用于事件推送。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object} Data - 成功时返回新文档的ID和路径；失败时可能包含 closeTimeout。
   *     @property {string} srcRootBlockID - 转换后新文档的根块ID。
   *     @property {string} path - 新文档在目标笔记本中的实际存储路径。
   *     @property {number | undefined} closeTimeout - 操作失败时，可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async li2Doc(data) {
    return this._fetchWrapper('/api/filetree/li2Doc', 'POST', data, true);
  }

  /**
   * 列出文档树
   * Endpoint: `POST /api/filetree/listDocTree`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要列出文档树的笔记本ID。
   *   @property {string} path - 要列出文档树的起始路径 (相对于笔记本根目录，例如 '/folderName')。通常用于列出某个文件夹下的文档结构。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | undefined} Data - 成功时返回文档树结构；失败时此字段可能不存在。
   *     @property {Array<object>} tree - 文档树结构数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async listDocTree(data) {
    return this._fetchWrapper('/api/filetree/listDocTree', 'POST', data, true);
  }

  /**
   * 获取指定路径下的文档列表
   * Endpoint: `POST /api/filetree/listDocsByPath`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 笔记本ID。
   *   @property {string} path - 要列出文档的路径 (相对于笔记本根目录，例如 '/folderName')。空字符串表示笔记本根目录。
   *   @property {number | undefined} sort - 排序模式，具体值参考思源笔记内核定义 (util.SortModeXXX)。如果未提供，则使用笔记本或全局配置的默认排序。例如: 0-默认, 1-按创建日期升序, 2-按创建日期降序, 3-按修改日期升序, 4-按修改日期降序, 5-按字母升序, 6-按字母降序, 7-按引用数升序, 8-按引用数降序, 等。
   *   @property {boolean | undefined} flashcard - 是否仅列出包含闪卡的文档，默认为 false (列出所有)。
   *   @property {number | undefined} maxListCount - 最大列出数量。如果未提供或为0，则使用系统配置 (fileTree.maxListCount 或 math.MaxInt)。
   *   @property {boolean | undefined} showHidden - 是否显示隐藏文件/文件夹，默认为 false。
   *   @property {boolean | undefined} ignoreMaxListHint - 当实际数量超过 maxListCount 时，是否忽略弹出的提示消息。默认为 false (即会提示)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | undefined} Data - 成功时返回文档列表信息；失败时此字段可能不存在。
   *     @property {string} box - 请求的笔记本ID。
   *     @property {string} path - 请求的路径。
   *     @property {Array<object>} files - 文档和子目录列表。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async listDocsByPath(data) {
    return this._fetchWrapper('/api/filetree/listDocsByPath', 'POST', data, true);
  }

  /**
   * 批量移动文档 (基于路径)
   * Endpoint: `POST /api/filetree/moveDocs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} fromPaths - 要移动的源文档路径数组。每个路径字符串应为 '笔记本ID/文档相对路径.sy' 或 '笔记本ID/文档相对路径' 的形式。后端会处理。例如：['box123/notes/docA.sy', 'box456/folder/docB']
   *   @property {string} toNotebook - 目标笔记本的ID。
   *   @property {string} toPath - 目标路径 (HPath 或实际路径均可，后端会尝试解析)。文档将被移动到此路径下。例如 '/Target Folder' 或 '/Target Folder/NewName.sy' (如果只移动一个文件且想重命名)。
   *   @property {string | undefined} callback - 回调标识，可选参数，用于事件推送。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时 Data 为 null；失败时可能包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 操作失败时，可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async moveDocs(data) {
    return this._fetchWrapper('/api/filetree/moveDocs', 'POST', data, true);
  }

  /**
   * 批量移动文档 (基于ID)
   * Endpoint: `POST /api/filetree/moveDocsByID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} fromIDs - 要移动的源文档ID数组。
   *   @property {string} toID - 目标文档或目录的ID。如果 toID 是一个文档，则 fromIDs 中的文档会成为其子文档（如果内核逻辑支持）；如果 toID 是一个目录（通常是一个文档的HPath的父级），则 fromIDs 中的文档会被移动到该目录下。具体行为需参考内核实现细节。后台实现中，会先通过 toID 获取其 toNotebook 和 toPath，然后调用 model.MoveDocs。
   *   @property {string | undefined} callback - 回调标识，可选参数，用于事件推送。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时 Data 为 null；失败时可能包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 操作失败时，可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async moveDocsByID(data) {
    return this._fetchWrapper('/api/filetree/moveDocsByID', 'POST', data, true);
  }

  /**
   * 移动本地的闪念速记
   * Endpoint: `POST /api/filetree/moveLocalShorthands`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要处理闪念速记的笔记本ID。
   *   @property {string | undefined} path - 可选的目标路径 (HPath)。此参数在当前实现中可能未完全按预期工作，接口计划改造。请参考接口描述中的 GitHub issue 链接。若提供，会尝试将速记移动到此路径下。注意路径合法性，过长或非法字符会被处理。
   *   @property {string | undefined} parentID - 可选的目标父文档ID。此参数在当前实现中可能未完全按预期工作。若提供，会尝试将速记作为此文档的子文档。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据，即使实际移动了文件。失败时 Data 可能不存在。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async moveLocalShorthands(data) {
    return this._fetchWrapper('/api/filetree/moveLocalShorthands', 'POST', data, true);
  }

  /**
   * 刷新文档树并重建索引
   * Endpoint: `POST /api/filetree/refreshFiletree`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功（操作已异步启动）
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async refreshFiletree(data) {
    return this._fetchWrapper('/api/filetree/refreshFiletree', 'POST', data, true);
  }

  /**
   * 移除文档 (基于路径)
   * Endpoint: `POST /api/filetree/removeDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 文档所在的笔记本ID。
   *   @property {string} path - 要移除的文档的相对路径 (相对于笔记本根目录，例如 '/notes/docToRemove.sy')。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeDoc(data) {
    return this._fetchWrapper('/api/filetree/removeDoc', 'POST', data, true);
  }

  /**
   * 移除文档 (基于ID)
   * Endpoint: `POST /api/filetree/removeDocByID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要移除的文档的ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时 Data 为 null；ID未找到等错误时可能包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 操作失败时（例如ID未找到），可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeDocByID(data) {
    return this._fetchWrapper('/api/filetree/removeDocByID', 'POST', data, true);
  }

  /**
   * 批量移除文档 (基于复合路径)
   * Endpoint: `POST /api/filetree/removeDocs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} paths - 要移除的文档的复合路径数组。每个路径字符串应为 '笔记本ID/文档相对路径.sy' 或 '笔记本ID/文档相对路径' 的形式。例如：['box123/notes/docA.sy', 'box456/folder/docB']
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功（即使部分路径无效也可能返回0，具体需看Msg）
   *   @property {string} Msg - 响应消息。如果部分文档移除失败，Msg中可能会有提示。
   *   @property {null | undefined} Data - 此接口通常不返回具体数据，或在特定错误情况下可能为null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeDocs(data) {
    return this._fetchWrapper('/api/filetree/removeDocs', 'POST', data, true);
  }

  /**
   * 移除指定路径列表的索引
   * Endpoint: `POST /api/filetree/removeIndexes`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} paths - 需要移除索引的文档绝对路径列表。这些路径通常指向 data 目录下的 .sy 文件，例如 '/data/notebookId/path/to/doc.sy'。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功（操作已接受）
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeIndexes(data) {
    return this._fetchWrapper('/api/filetree/removeIndexes', 'POST', data, true);
  }

  /**
   * 重命名文档 (基于路径)
   * Endpoint: `POST /api/filetree/renameDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 文档所在的笔记本ID。
   *   @property {string} path - 要重命名的文档的当前相对路径 (相对于笔记本根目录，例如 '/notes/oldName.sy')。
   *   @property {string} title - 文档的新标题 (不需要带 .sy 后缀)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口成功时不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renameDoc(data) {
    return this._fetchWrapper('/api/filetree/renameDoc', 'POST', data, true);
  }

  /**
   * 重命名文档 (基于ID)
   * Endpoint: `POST /api/filetree/renameDocByID`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要重命名的文档的ID。
   *   @property {string} title - 文档的新标题 (不需要带 .sy 后缀)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时 Data 通常为 null (Go源码中 model.RenameDoc 成功时返回的 error 为 nil，API层面不设Data)；ID未找到等错误时可能包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 操作失败时（例如ID未找到），可能返回此字段，建议客户端在此毫秒数后关闭相关提示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renameDocByID(data) {
    return this._fetchWrapper('/api/filetree/renameDocByID', 'POST', data, true);
  }

  /**
   * 搜索文档标题和别名
   * Endpoint: `POST /api/filetree/searchDocs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} k - 搜索关键词。
   *   @property {boolean | undefined} flashcard - 是否仅在包含闪卡的文档中搜索，默认为 false (搜索所有文档)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {Array<object> | undefined} Data - 成功时返回匹配的文档信息数组；如果无匹配或出错，则数组可能为空或此字段不存在。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchDocs(data) {
    return this._fetchWrapper('/api/filetree/searchDocs', 'POST', data, true);
  }

  /**
   * 更新或插入指定路径列表的索引
   * Endpoint: `POST /api/filetree/upsertIndexes`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} paths - 需要更新/插入索引的文档绝对路径列表。这些路径通常指向 data 目录下的 .sy 文件，例如 '/data/notebookId/path/to/doc.sy'。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功（操作已接受）
   *   @property {string} Msg - 响应消息
   *   @property {null | undefined} Data - 此接口不返回具体数据
   * @throws {Error} If the request fails or the server returns an error.
   */
  async upsertIndexes(data) {
    return this._fetchWrapper('/api/filetree/upsertIndexes', 'POST', data, true);
  }

  /**
   * 自动空格
   * Endpoint: `POST /api/format/autoSpace`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要处理的块 ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {null} Data - 操作成功时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async autoSpace(data) {
    return this._fetchWrapper('/api/format/autoSpace', 'POST', data, true);
  }

  /**
   * 网络资源转本地资源
   * Endpoint: `POST /api/format/netAssets2LocalAssets`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要处理的块 ID，该块内的网络资源将被转存。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {null} Data - 操作成功时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async netAssets2LocalAssets(data) {
    return this._fetchWrapper('/api/format/netAssets2LocalAssets', 'POST', data, true);
  }

  /**
   * 网络图片转本地资源
   * Endpoint: `POST /api/format/netImg2LocalAssets`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要处理的块 ID。块内的网络图片将被转存。
   *   @property {string | undefined} url - 可选。如果提供，则只转存此 URL 对应的网络图片。如果未提供或为空，则转存块内所有网络图片。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 调用返回码，0 表示成功
   *   @property {string} Msg - API 调用返回消息
   *   @property {null} Data - 操作成功时为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async netImg2LocalAssets(data) {
    return this._fetchWrapper('/api/format/netImg2LocalAssets', 'POST', data, true);
  }

  /**
   * 获取全局关系图数据
   * Endpoint: `POST /api/graph/getGraph`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {any} reqId - 请求 ID，用于跟踪异步请求
   *   @property {string} k - 搜索关键词，用于筛选关系图中的节点
   *   @property {object} conf - 全局关系图配置项
   *     @property {number} minRefs - 节点最少被引用次数（低于此值将被隐藏）
   *     @property {boolean} dailyNote - 是否包含日记节点
   *     @property {object} type - 节点类型筛选配置
   *       @property {boolean} tag - 是否显示标签节点
   *       @property {boolean} paragraph - 是否显示段落块节点
   *       @property {boolean} heading - 是否显示标题块节点
   *       @property {boolean} math - 是否显示数学公式块节点
   *       @property {boolean} code - 是否显示代码块节点
   *       @property {boolean} table - 是否显示表格块节点
   *       @property {boolean} list - 是否显示列表块节点
   *       @property {boolean} listItem - 是否显示列表项块节点
   *       @property {boolean} blockquote - 是否显示引述块节点
   *       @property {boolean} super - 是否显示超级块节点
   *     @property {object} d3 - D3力导向图配置
   *       @property {number} nodeSize - 节点大小
   *       @property {number} linkWidth - 连线宽度
   *       @property {number} lineOpacity - 连线不透明度
   *       @property {number} centerStrength - 中心力强度
   *       @property {number} collideRadius - 碰撞半径
   *       @property {number} collideStrength - 碰撞力强度
   *       @property {number} linkDistance - 连线距离
   *       @property {boolean} arrow - 是否显示箭头
   * @returns {Promise<object>} The response from the server.
   *   @property {Array<object>} nodes - 关系图中的节点列表
   *   @property {Array<object>} links - 关系图中的边列表
   *   @property {object} conf - 更新后的全局关系图配置项
   *     @property {number} minRefs - 节点最少被引用次数（低于此值将被隐藏）
   *     @property {boolean} dailyNote - 是否包含日记节点
   *     @property {object} type - 节点类型筛选配置
   *       @property {boolean} tag - 是否显示标签节点
   *       @property {boolean} paragraph - 是否显示段落块节点
   *       @property {boolean} heading - 是否显示标题块节点
   *       @property {boolean} math - 是否显示数学公式块节点
   *       @property {boolean} code - 是否显示代码块节点
   *       @property {boolean} table - 是否显示表格块节点
   *       @property {boolean} list - 是否显示列表块节点
   *       @property {boolean} listItem - 是否显示列表项块节点
   *       @property {boolean} blockquote - 是否显示引述块节点
   *       @property {boolean} super - 是否显示超级块节点
   *     @property {object} d3 - D3力导向图配置
   *       @property {number} nodeSize - 节点大小
   *       @property {number} linkWidth - 连线宽度
   *       @property {number} lineOpacity - 连线不透明度
   *       @property {number} centerStrength - 中心力强度
   *       @property {number} collideRadius - 碰撞半径
   *       @property {number} collideStrength - 碰撞力强度
   *       @property {number} linkDistance - 连线距离
   *       @property {boolean} arrow - 是否显示箭头
   *   @property {string} box - 当前知识空间（笔记本组）ID
   *   @property {any} reqId - 请求 ID，与请求参数中的 reqId 一致
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getGraph(data) {
    return this._fetchWrapper('/api/graph/getGraph', 'POST', data, true);
  }

  /**
   * 获取局部关系图数据
   * Endpoint: `POST /api/graph/getLocalGraph`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {any} reqId - 请求 ID，用于跟踪异步请求
   *   @property {string} id - 文档 ID，用于构建局部关系图的中心节点
   *   @property {string} k - 搜索关键词，用于筛选关系图中的节点
   *   @property {object} conf - 局部关系图配置项
   *     @property {boolean} dailyNote - 是否包含日记节点
   *     @property {object} type - 节点类型筛选配置
   *       @property {boolean} tag - 是否显示标签节点
   *       @property {boolean} paragraph - 是否显示段落块节点
   *       @property {boolean} heading - 是否显示标题块节点
   *       @property {boolean} math - 是否显示数学公式块节点
   *       @property {boolean} code - 是否显示代码块节点
   *       @property {boolean} table - 是否显示表格块节点
   *       @property {boolean} list - 是否显示列表块节点
   *       @property {boolean} listItem - 是否显示列表项块节点
   *       @property {boolean} blockquote - 是否显示引述块节点
   *       @property {boolean} super - 是否显示超级块节点
   *     @property {object} d3 - D3力导向图配置
   *       @property {number} nodeSize - 节点大小
   *       @property {number} linkWidth - 连线宽度
   *       @property {number} lineOpacity - 连线不透明度
   *       @property {number} centerStrength - 中心力强度
   *       @property {number} collideRadius - 碰撞半径
   *       @property {number} collideStrength - 碰撞力强度
   *       @property {number} linkDistance - 连线距离
   *       @property {boolean} arrow - 是否显示箭头
   * @returns {Promise<object>} The response from the server.
   *   @property {string} id - 请求的文档 ID
   *   @property {string} box - 当前知识空间（笔记本组）ID
   *   @property {Array<object>} nodes - 关系图中的节点列表
   *   @property {Array<object>} links - 关系图中的边列表
   *   @property {object} conf - 更新后的局部关系图配置项
   *     @property {boolean} dailyNote - 是否包含日记节点
   *     @property {object} type - 节点类型筛选配置
   *       @property {boolean} tag - 是否显示标签节点
   *       @property {boolean} paragraph - 是否显示段落块节点
   *       @property {boolean} heading - 是否显示标题块节点
   *       @property {boolean} math - 是否显示数学公式块节点
   *       @property {boolean} code - 是否显示代码块节点
   *       @property {boolean} table - 是否显示表格块节点
   *       @property {boolean} list - 是否显示列表块节点
   *       @property {boolean} listItem - 是否显示列表项块节点
   *       @property {boolean} blockquote - 是否显示引述块节点
   *       @property {boolean} super - 是否显示超级块节点
   *     @property {object} d3 - D3力导向图配置
   *       @property {number} nodeSize - 节点大小
   *       @property {number} linkWidth - 连线宽度
   *       @property {number} lineOpacity - 连线不透明度
   *       @property {number} centerStrength - 中心力强度
   *       @property {number} collideRadius - 碰撞半径
   *       @property {number} collideStrength - 碰撞力强度
   *       @property {number} linkDistance - 连线距离
   *       @property {boolean} arrow - 是否显示箭头
   *   @property {any} reqId - 请求 ID，与请求参数中的 reqId 一致
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getLocalGraph(data) {
    return this._fetchWrapper('/api/graph/getLocalGraph', 'POST', data, true);
  }

  /**
   * 重置全局关系图配置
   * Endpoint: `POST /api/graph/resetGraph`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {object} conf - 重置后的全局关系图配置项
   *     @property {number} minRefs - 节点最少被引用次数（低于此值将被隐藏）
   *     @property {boolean} dailyNote - 是否包含日记节点
   *     @property {object} type - 节点类型筛选配置
   *       @property {boolean} tag - 是否显示标签节点
   *       @property {boolean} paragraph - 是否显示段落块节点
   *       @property {boolean} heading - 是否显示标题块节点
   *       @property {boolean} math - 是否显示数学公式块节点
   *       @property {boolean} code - 是否显示代码块节点
   *       @property {boolean} table - 是否显示表格块节点
   *       @property {boolean} list - 是否显示列表块节点
   *       @property {boolean} listItem - 是否显示列表项块节点
   *       @property {boolean} blockquote - 是否显示引述块节点
   *       @property {boolean} super - 是否显示超级块节点
   *     @property {object} d3 - D3力导向图配置
   *       @property {number} nodeSize - 节点大小
   *       @property {number} linkWidth - 连线宽度
   *       @property {number} lineOpacity - 连线不透明度
   *       @property {number} centerStrength - 中心力强度
   *       @property {number} collideRadius - 碰撞半径
   *       @property {number} collideStrength - 碰撞力强度
   *       @property {number} linkDistance - 连线距离
   *       @property {boolean} arrow - 是否显示箭头
   * @throws {Error} If the request fails or the server returns an error.
   */
  async resetGraph(data) {
    return this._fetchWrapper('/api/graph/resetGraph', 'POST', data, true);
  }

  /**
   * 重置局部关系图配置
   * Endpoint: `POST /api/graph/resetLocalGraph`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {object} conf - 重置后的局部关系图配置项
   *     @property {boolean} dailyNote - 是否包含日记节点
   *     @property {object} type - 节点类型筛选配置
   *       @property {boolean} tag - 是否显示标签节点
   *       @property {boolean} paragraph - 是否显示段落块节点
   *       @property {boolean} heading - 是否显示标题块节点
   *       @property {boolean} math - 是否显示数学公式块节点
   *       @property {boolean} code - 是否显示代码块节点
   *       @property {boolean} table - 是否显示表格块节点
   *       @property {boolean} list - 是否显示列表块节点
   *       @property {boolean} listItem - 是否显示列表项块节点
   *       @property {boolean} blockquote - 是否显示引述块节点
   *       @property {boolean} super - 是否显示超级块节点
   *     @property {object} d3 - D3力导向图配置
   *       @property {number} nodeSize - 节点大小
   *       @property {number} linkWidth - 连线宽度
   *       @property {number} lineOpacity - 连线不透明度
   *       @property {number} centerStrength - 中心力强度
   *       @property {number} collideRadius - 碰撞半径
   *       @property {number} collideStrength - 碰撞力强度
   *       @property {number} linkDistance - 连线距离
   *       @property {boolean} arrow - 是否显示箭头
   * @throws {Error} If the request fails or the server returns an error.
   */
  async resetLocalGraph(data) {
    return this._fetchWrapper('/api/graph/resetLocalGraph', 'POST', data, true);
  }

  /**
   * 清空工作区历史记录
   * Endpoint: `POST /api/history/clearWorkspaceHistory`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null} Data - 成功时固定为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async clearWorkspaceHistory(data) {
    return this._fetchWrapper('/api/history/clearWorkspaceHistory', 'POST', data, true);
  }

  /**
   * 获取文档历史版本内容
   * Endpoint: `POST /api/history/getDocHistoryContent`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} historyPath - 文档历史版本的路径，通常从其他历史记录接口获取
   *   @property {string | undefined} k - 搜索关键词，用于在历史内容中高亮显示
   *   @property {any} highlight - 是否对关键词进行高亮显示，默认为 true
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时返回文档历史内容，失败时为 null
   *     @property {string} id - 文档的 ID
   *     @property {string} rootID - 文档的根块 ID
   *     @property {string} content - 文档历史版本的内容 (HTML 格式)
   *     @property {boolean} isLargeDoc - 是否为大文档
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDocHistoryContent(data) {
    return this._fetchWrapper('/api/history/getDocHistoryContent', 'POST', data, true);
  }

  /**
   * 获取历史条目列表
   * Endpoint: `POST /api/history/getHistoryItems`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} created - 创建日期，格式如 'YYYYMMDD'
   *   @property {string | undefined} notebook - 笔记本 ID，如果提供，则限定在该笔记本内搜索
   *   @property {any} type - 历史记录类型：0 表示文档，1 表示资源文件，2 表示笔记本。默认为 0 (文档)。
   *   @property {string} query - 搜索关键词
   *   @property {any} op - 搜索操作类型，具体含义需参考 model.FullTextSearchHistoryItems 实现，默认为 'all'
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时返回历史条目列表，失败时为 null
   *     @property {Array<object>} items - 符合条件的历史条目数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getHistoryItems(data) {
    return this._fetchWrapper('/api/history/getHistoryItems', 'POST', data, true);
  }

  /**
   * 获取笔记本历史记录
   * Endpoint: `POST /api/history/getNotebookHistory`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时返回笔记本历史列表，失败时为 null
   *     @property {Array<object>} histories - 笔记本历史记录数组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getNotebookHistory(data) {
    return this._fetchWrapper('/api/history/getNotebookHistory', 'POST', data, true);
  }

  /**
   * 重建历史记录索引
   * Endpoint: `POST /api/history/reindexHistory`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null} Data - 成功时固定为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async reindexHistory(data) {
    return this._fetchWrapper('/api/history/reindexHistory', 'POST', data, true);
  }

  /**
   * 回滚资源文件历史
   * Endpoint: `POST /api/history/rollbackAssetsHistory`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} historyPath - 资源文件历史版本的路径，通常从其他历史记录接口获取
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null} Data - 成功时固定为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async rollbackAssetsHistory(data) {
    return this._fetchWrapper('/api/history/rollbackAssetsHistory', 'POST', data, true);
  }

  /**
   * 回滚文档历史版本
   * Endpoint: `POST /api/history/rollbackDocHistory`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 文档所属的笔记本 ID
   *   @property {string} historyPath - 文档历史版本的路径，通常从其他历史记录接口获取
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时返回包含笔记本ID的对象，失败时为 null
   *     @property {string} box - 文档所属的笔记本 ID
   * @throws {Error} If the request fails or the server returns an error.
   */
  async rollbackDocHistory(data) {
    return this._fetchWrapper('/api/history/rollbackDocHistory', 'POST', data, true);
  }

  /**
   * 回滚笔记本历史版本
   * Endpoint: `POST /api/history/rollbackNotebookHistory`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} historyPath - 笔记本历史版本的路径，通常从 getNotebookHistory 接口获取
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {null} Data - 成功时固定为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async rollbackNotebookHistory(data) {
    return this._fetchWrapper('/api/history/rollbackNotebookHistory', 'POST', data, true);
  }

  /**
   * 搜索历史记录
   * Endpoint: `POST /api/history/searchHistory`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} notebook - 笔记本 ID，如果提供，则限定在该笔记本内搜索
   *   @property {any} type - 历史记录类型：0 表示文档，1 表示资源文件，2 表示笔记本。默认为 0 (文档)。
   *   @property {string} query - 搜索关键词
   *   @property {any} page - 页码，从 1 开始，默认为 1
   *   @property {any} op - 搜索操作类型，具体含义需参考 model.FullTextSearchHistory 实现，默认为 'all'
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 响应状态码，0 表示成功
   *   @property {string} Msg - 响应消息
   *   @property {object | null} Data - 成功时返回搜索结果，失败时为 null
   *     @property {Array<object>} histories - 按日期分组的历史记录数组
   *     @property {number} pageCount - 总页数
   *     @property {number} totalCount - 符合条件的总历史记录条目数 (注意，这里可能指分组数量，不是单个item数量)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchHistory(data) {
    return this._fetchWrapper('/api/history/searchHistory', 'POST', data, true);
  }

  /**
   * 获取动态图标
   * Endpoint: `GET /api/icon/getDynamicIcon`
   * @param {object} data - Request payload
   *   @property {string | undefined} type - 图标类型，可选值 '1'-'8'，默认为 '1'。例如：'1' 年月日星期, '6' 星期, '7' 倒计时, '8' 文字图标
   *   @property {string | undefined} color - 图标颜色，可以是预定义颜色名 (如 'red', 'blue') 或十六进制颜色值 (如 '#ff0000', 'ff0000')
   *   @property {string | undefined} date - 目标日期，格式 YYYY-MM-DD，用于日期相关类型的图标
   *   @property {string | undefined} lang - 语言代码，例如 'zh_CN', 'en_US'。默认为内核当前语言
   *   @property {string | undefined} weekdayType - 星期显示格式，不同语言下有不同选项，默认为 '1'
   *   @property {string | undefined} content - 文字内容，当 type='8' (文字图标) 时使用
   *   @property {string | undefined} id - 图标ID，当 type='8' (文字图标) 时使用，用于生成固定的背景色
   * @returns {Promise<any>} 此接口不返回 JSON。成功时直接返回 image/svg+xml 类型的 SVG 图像数据 (HTTP 200)。失败时可能返回其他 HTTP 错误状态码。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDynamicIcon(data) {
    return this._fetchWrapper('/api/icon/getDynamicIcon', 'GET', data, false);
  }

  /**
   * 导入数据包
   * Endpoint: `POST /api/import/importData`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async importData(data) {
    return this._fetchWrapper('/api/import/importData', 'POST', data, true);
  }

  /**
   * 导入 .sy 文件
   * Endpoint: `POST /api/import/importSY`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async importSY(data) {
    return this._fetchWrapper('/api/import/importSY', 'POST', data, true);
  }

  /**
   * 导入标准 Markdown
   * Endpoint: `POST /api/import/importStdMd`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 目标笔记本的 ID
   *   @property {string} localPath - 本地 Markdown 文件或文件夹的绝对路径
   *   @property {string} toPath - 导入到笔记本内的目标父路径，例如 '/' 表示笔记本根目录
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async importStdMd(data) {
    return this._fetchWrapper('/api/import/importStdMd', 'POST', data, true);
  }

  /**
   * 获取单个速记
   * Endpoint: `POST /api/inbox/getShorthand`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要获取的速记的唯一标识符 (通常为时间戳字符串)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含速记详细信息的对象
   *     @property {string | undefined} id - 速记的唯一标识符 (通常为时间戳字符串)
   *     @property {string} shorthandContent - 速记内容 (经过 Lute 引擎处理后的 HTML 格式)
   *     @property {string} shorthandMd - 速记内容的原始 Markdown 格式
   *     @property {string} hCreated - 格式化后的创建时间 (YYYY-MM-DD HH:mm)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getShorthand(data) {
    return this._fetchWrapper('/api/inbox/getShorthand', 'POST', data, true);
  }

  /**
   * 获取速记列表
   * Endpoint: `POST /api/inbox/getShorthands`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} page - 要获取的速记列表的页码，从 1 开始
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含速记列表及可能的分页信息的对象
   *     @property {Array<object>} shorthands - 速记对象列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getShorthands(data) {
    return this._fetchWrapper('/api/inbox/getShorthands', 'POST', data, true);
  }

  /**
   * 移除速记
   * Endpoint: `POST /api/inbox/removeShorthands`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} ids - 要移除的速记的唯一标识符数组
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeShorthands(data) {
    return this._fetchWrapper('/api/inbox/removeShorthands', 'POST', data, true);
  }

  /**
   * 导出标准Markdown
   * Endpoint: `POST /api/lute/copyStdMarkdown`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要导出内容的块的ID
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {string} Data - 导出的标准 Markdown 内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async copyStdMarkdown(data) {
    return this._fetchWrapper('/api/lute/copyStdMarkdown', 'POST', data, true);
  }

  /**
   * HTML转块DOM
   * Endpoint: `POST /api/lute/html2BlockDOM`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} dom - 要转换的 HTML 字符串
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {string} Data - 转换后的块级 DOM (HTML 格式的字符串)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async html2BlockDOM(data) {
    return this._fetchWrapper('/api/lute/html2BlockDOM', 'POST', data, true);
  }

  /**
   * 处理块DOM(原生渲染优化)
   * Endpoint: `POST /api/lute/spinBlockDOM`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} dom - 要处理的块级 DOM 字符串 (HTML 格式)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - Data
   *     @property {string} dom - 经过 SpinBlockDOM 处理后的块级 DOM 字符串 (HTML 格式)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async spinBlockDOM(data) {
    return this._fetchWrapper('/api/lute/spinBlockDOM', 'POST', data, true);
  }

  /**
   * 订阅广播(SSE)
   * Endpoint: `GET /es/broadcast/subscribe`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} channel - 要订阅的一个或多个广播频道名称，多个频道用逗号分隔。此参数通过 URL Query String 传递。
   *   @property {number | undefined} retry - SSE 连接断开后的重试间隔时间 (毫秒)。此参数通过 URL Query String 传递。
   * @returns {Promise<object>} The response from the server.
   * @throws {Error} If the request fails or the server returns an error.
   */
  async broadcastSubscribe(data) {
    return this._fetchWrapper('/es/broadcast/subscribe', 'GET', data, true);
  }

  /**
   * 连接广播(WebSocket)
   * Endpoint: `GET /ws/broadcast`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} channel - 要连接的广播频道名称。此参数通过 URL Query String 传递。
   * @returns {Promise<object>} The response from the server.
   * @throws {Error} If the request fails or the server returns an error.
   */
  async broadcast(data) {
    return this._fetchWrapper('/ws/broadcast', 'GET', data, true);
  }

  /**
   * 转发HTTP代理请求
   * Endpoint: `POST /api/network/forwardProxy`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} url - 必需。要请求的目标 URL，必须是合法的 HTTP 或 HTTPS 地址。
   *   @property {any} method - 可选。HTTP 请求方法，如 GET, POST, PUT, DELETE 等。默认为 POST。
   *   @property {any} timeout - 可选。请求超时时间，单位毫秒。默认为 7000ms。
   *   @property {Array<Record<string, any>> | undefined} headers - 可选。HTTP 请求头数组，每个元素是一个包含单个键值对的对象，例如 [{'User-Agent': 'Siyuan-Proxy'}, {'Authorization': 'Bearer token'}]。
   *   @property {any} contentType - 可选。请求体的 Content-Type。默认为 'application/json'。
   *   @property {any | undefined} payload - 可选。HTTP 请求体内容。其格式和编码由 payloadEncoding 决定。
   *   @property {any} payloadEncoding - 可选。payload 字段的编码方式。'json' 和 'text' 表示直接使用 payload 值 (json 会被序列化)；其他选项表示 payload 是对应编码的字符串，代理服务器会先解码再发送。默认为 'json' (如果 contentType 是 application/json 则 payload 会被序列化，否则视为 text)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码。0 表示代理请求成功（无论目标服务器返回何种状态码），非 0 表示代理请求本身失败。
   *   @property {string} Msg - 错误信息。代理请求成功时为空字符串。
   *   @property {object | null} Data - 当代理请求成功时，包含目标服务器的详细响应信息。代理失败时为 null。
   *     @property {string} status - 目标服务器返回的 HTTP 状态文本，例如 '200 OK'。
   *     @property {number} statusCode - 目标服务器返回的 HTTP 状态码，例如 200。
   *     @property {string} proto - 目标服务器响应的 HTTP 协议版本，例如 'HTTP/1.1'。
   *     @property {Record<string, Array<string>>} headers - 目标服务器返回的 HTTP 响应头，键为头域名，值为字符串数组织。例如 {'Content-Type': ['application/json']}
   *     @property {Array<object> | undefined} cookies - 目标服务器返回的 Cookies 数组。
   *     @property {string} body - 目标服务器返回的响应体内容，经过 Base64 编码。
   *     @property {string} url - 实际请求的最终 URL (可能经过重定向)。
   *     @property {number} length - 目标服务器返回的响应体原始长度 (解码前)。
   *     @property {boolean} isText - 指示目标服务器返回的响应体是否为文本类型。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async forwardProxy(data) {
    return this._fetchWrapper('/api/network/forwardProxy', 'POST', data, true);
  }

  /**
   * 改变笔记本排序
   * Endpoint: `POST /api/notebook/changeSortNotebook`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} notebooks - 按新的期望顺序排列的笔记本 ID 数组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async changeSortNotebook(data) {
    return this._fetchWrapper('/api/notebook/changeSortNotebook', 'POST', data, true);
  }

  /**
   * 关闭笔记本
   * Endpoint: `POST /api/notebook/closeNotebook`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要关闭的笔记本的唯一标识符 (ID)。
   *   @property {string | undefined} callback - 可选的回调命令ID，用于操作完成后的事件通知。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async closeNotebook(data) {
    return this._fetchWrapper('/api/notebook/closeNotebook', 'POST', data, true);
  }

  /**
   * 创建笔记本
   * Endpoint: `POST /api/notebook/createNotebook`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} name - 新笔记本的名称，不能为空。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含新创建笔记本信息的对象。
   *     @property {object} notebook - 新创建的笔记本对象信息。
   *       @property {string} id - 新创建的笔记本ID
   *       @property {string} name - 新创建的笔记本名称
   *       @property {string} icon - 笔记本图标
   *       @property {number} sort - 笔记本排序值
   *       @property {boolean} closed - 笔记本是否关闭 (刚创建时应为 false)
   *       @property {number} sortMode - 文档排序模式
   * @throws {Error} If the request fails or the server returns an error.
   */
  async createNotebook(data) {
    return this._fetchWrapper('/api/notebook/createNotebook', 'POST', data, true);
  }

  /**
   * 获取笔记本配置
   * Endpoint: `POST /api/notebook/getNotebookConf`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要获取配置的笔记本的唯一标识符 (ID)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含笔记本配置的对象。
   *     @property {object} conf - 笔记本的配置对象。
   *       @property {string} name - 笔记本名称
   *       @property {number} sort - 笔记本的排序值
   *       @property {string} icon - 笔记本图标 (Emoji 或 Base64)
   *       @property {boolean} closed - 笔记本是否关闭
   *       @property {number} sortMode - 文档排序模式: 0(自定义拖拽), 1(修改时间升序), 2(修改时间降序), 3(创建时间升序), 4(创建时间降序), 5(字母升序), 6(字母降序), 7(HPath升序), 8(HPath降序), 11(文档包含块升序), 12(文档包含块降序), 13(子文档数升序), 14(子文档数降序)
   *       @property {string} refCreateSavePath - 块引目标文档默认保存路径 (HPath)
   *       @property {string} docCreateSavePath - 新文档默认保存路径 (HPath)
   *       @property {string} dailyNoteSavePath - 日记默认保存路径 (HPath)
   *       @property {string} dailyNoteTemplatePath - 日记模板路径 (HPath)
   *       @property {object | undefined} boxStat - 笔记本统计信息 (可能不存在，例如笔记本关闭时)
   *         @property {number} docCount - 文档数量
   *         @property {number} assetCount - 资源文件数量
   *         @property {number} assetSize - 资源文件总大小 (字节)
   *         @property {number} refCount - 引用数量
   *         @property {number} headingCount - 标题数量
   *         @property {number} listCount - 列表数量
   *         @property {number} listItemCount - 列表项数量
   *         @property {number} codeBlockCount - 代码块数量
   *         @property {number} htmlBlockCount - HTML块数量
   *         @property {number} mathBlockCount - 数学公式块数量
   *         @property {number} tableCount - 表格数量
   *         @property {number} quoteCount - 引述块数量
   *         @property {number} superBlockCount - 超级块数量
   *         @property {number} paragraphCount - 段落数量
   *         @property {number} fileAnnotationCount - 文件标注数量
   *         @property {number} updated - 最后更新时间 (Unix时间戳，秒)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getNotebookConf(data) {
    return this._fetchWrapper('/api/notebook/getNotebookConf', 'POST', data, true);
  }

  /**
   * 获取笔记本信息
   * Endpoint: `POST /api/notebook/getNotebookInfo`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要获取信息的笔记本的唯一标识符 (ID)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含笔记本详细信息的对象。
   *     @property {object} boxInfo - 笔记本的详细信息对象。
   *       @property {string} id - 笔记本ID
   *       @property {string} name - 笔记本名称
   *       @property {string} icon - 笔记本图标
   *       @property {number} sort - 笔记本排序值
   *       @property {boolean} closed - 笔记本是否关闭
   *       @property {number} sortMode - 文档排序模式
   *       @property {string} refCreateSavePath - 块引默认保存路径
   *       @property {string} docCreateSavePath - 新文档默认保存路径
   *       @property {string} dailyNoteSavePath - 日记默认保存路径
   *       @property {string} dailyNoteTemplatePath - 日记模板路径
   *       @property {object} boxStat - 笔记本统计信息。
   *         @property {number} docCount - 文档数量
   *         @property {number} assetCount - 资源文件数量
   *         @property {number} assetSize - 资源文件总大小 (字节)
   *         @property {number} refCount - 引用数量
   *         @property {number} headingCount - 标题数量
   *         @property {number} listCount - 列表数量
   *         @property {number} listItemCount - 列表项数量
   *         @property {number} codeBlockCount - 代码块数量
   *         @property {number} htmlBlockCount - HTML块数量
   *         @property {number} mathBlockCount - 数学公式块数量
   *         @property {number} tableCount - 表格数量
   *         @property {number} quoteCount - 引述块数量
   *         @property {number} superBlockCount - 超级块数量
   *         @property {number} paragraphCount - 段落数量
   *         @property {number} fileAnnotationCount - 文件标注数量
   *         @property {number} updated - 最后更新时间 (Unix时间戳，秒)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getNotebookInfo(data) {
    return this._fetchWrapper('/api/notebook/getNotebookInfo', 'POST', data, true);
  }

  /**
   * 列出所有笔记本
   * Endpoint: `POST /api/notebook/lsNotebooks`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含笔记本列表的对象。
   *     @property {Array<object>} notebooks - 笔记本对象数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async lsNotebooks(data) {
    return this._fetchWrapper('/api/notebook/lsNotebooks', 'POST', data, true);
  }

  /**
   * 打开笔记本
   * Endpoint: `POST /api/notebook/openNotebook`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要打开的笔记本的唯一标识符 (ID)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时可能返回空对象或 null，主要通过推送事件传递笔记本信息。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async openNotebook(data) {
    return this._fetchWrapper('/api/notebook/openNotebook', 'POST', data, true);
  }

  /**
   * 删除笔记本
   * Endpoint: `POST /api/notebook/removeNotebook`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要删除的笔记本的唯一标识符 (ID)。
   *   @property {string | undefined} callback - 可选的回调命令ID，用于操作完成后的事件通知。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeNotebook(data) {
    return this._fetchWrapper('/api/notebook/removeNotebook', 'POST', data, true);
  }

  /**
   * 重命名笔记本
   * Endpoint: `POST /api/notebook/renameNotebook`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要重命名的笔记本的唯一标识符 (ID)。
   *   @property {string} name - 笔记本的新名称，不能为空。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功, -1 表示失败 (例如名称冲突)。
   *   @property {string} Msg - 错误信息，成功时为空字符串。
   *   @property {object | null} Data - 成功时为 null 或空对象，失败时可能包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 如果重命名失败，可能有关闭提示框的超时时间。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renameNotebook(data) {
    return this._fetchWrapper('/api/notebook/renameNotebook', 'POST', data, true);
  }

  /**
   * 设置笔记本配置
   * Endpoint: `POST /api/notebook/setNotebookConf`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要设置配置的笔记本的唯一标识符 (ID)。
   *   @property {object} conf - 要更新的配置项对象。只提供需要修改的字段。
   *     @property {string | undefined} name - 可选。新的笔记本名称。
   *     @property {string | undefined} icon - 可选。新的笔记本图标 (Emoji 或 Base64)。
   *     @property {number | undefined} sortMode - 可选。新的文档排序模式。
   *     @property {string | undefined} refCreateSavePath - 可选。新的块引目标文档默认保存路径 (HPath)。
   *     @property {string | undefined} docCreateSavePath - 可选。新的新文档默认保存路径 (HPath)。
   *     @property {string | undefined} dailyNoteSavePath - 可选。新的日记默认保存路径 (HPath)。
   *     @property {string | undefined} dailyNoteTemplatePath - 可选。新的日记模板路径 (HPath)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setNotebookConf(data) {
    return this._fetchWrapper('/api/notebook/setNotebookConf', 'POST', data, true);
  }

  /**
   * 设置笔记本图标
   * Endpoint: `POST /api/notebook/setNotebookIcon`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 要设置图标的笔记本的唯一标识符 (ID)。
   *   @property {string} icon - 笔记本的新图标，可以是 Emoji 字符或图片的 Base64 编码字符串。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null | undefined} Data - 成功时通常为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setNotebookIcon(data) {
    return this._fetchWrapper('/api/notebook/setNotebookIcon', 'POST', data, true);
  }

  /**
   * 推送错误消息
   * Endpoint: `POST /api/notification/pushErrMsg`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} msg - 必需。要推送的错误消息内容。
   *   @property {any} timeout - 可选。消息通知在前端显示的持续时间，单位毫秒。默认为 7000ms。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含消息ID的对象。
   *     @property {string} id - 推送的消息的唯一标识符。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async pushErrMsg(data) {
    return this._fetchWrapper('/api/notification/pushErrMsg', 'POST', data, true);
  }

  /**
   * 推送普通消息
   * Endpoint: `POST /api/notification/pushMsg`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} msg - 必需。要推送的普通消息内容。
   *   @property {any} timeout - 可选。消息通知在前端显示的持续时间，单位毫秒。默认为 7000ms。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串。如果 msg 为空，则 Code 为 -1，Msg 为 'msg can't be empty'。
   *   @property {object | null} Data - 成功时包含消息ID的对象，如果请求的 msg 为空则为 null。
   *     @property {string} id - 推送的消息的唯一标识符。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async pushMsg(data) {
    return this._fetchWrapper('/api/notification/pushMsg', 'POST', data, true);
  }

  /**
   * 获取文档大纲
   * Endpoint: `POST /api/outline/getDocOutline`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要获取大纲的文档块的 ID。通常是文档的根块 ID。
   *   @property {any} preview - 可选。是否为预览模式获取大纲，默认为 false。预览模式可能包含未保存的更改。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {Array<object> | null} Data - 文档的大纲结构数组。如果文档不存在或无标题，可能为 null 或空数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getDocOutline(data) {
    return this._fetchWrapper('/api/outline/getDocOutline', 'POST', data, true);
  }

  /**
   * 加载插件列表
   * Endpoint: `POST /api/petal/loadPetals`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} frontend - 必需。指定要加载插件的前端界面，例如 'desktop', 'mobile', 'browser-extension'。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {Array<object> | null} Data - 一个插件对象数组。如果没有任何可加载的插件，可能为 null 或空数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async loadPetals(data) {
    return this._fetchWrapper('/api/petal/loadPetals', 'POST', data, true);
  }

  /**
   * 设置插件启用状态
   * Endpoint: `POST /api/petal/setPetalEnabled`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} packageName - 必需。要设置启用状态的插件的包名 (唯一标识符)。
   *   @property {boolean} enabled - 必需。设置插件的启用状态，true 表示启用，false 表示禁用。
   *   @property {string} frontend - 必需。指定要设置插件状态的前端界面，例如 'desktop', 'mobile'。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，-1 表示插件不兼容或其他错误
   *   @property {string} Msg - 错误信息，成功时为空字符串，失败时包含具体错误，如不兼容提示。
   *   @property {object | null} Data - 操作成功时返回更新后的插件状态对象 (不含代码)；失败时可能为 null。
   *     @property {string} name - 插件的包名
   *     @property {string} displayName - 插件的显示名称
   *     @property {boolean} enabled - 插件更新后的启用状态
   *     @property {boolean} incompatible - 插件是否不兼容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setPetalEnabled(data) {
    return this._fetchWrapper('/api/petal/setPetalEnabled', 'POST', data, true);
  }

  /**
   * 执行SQL查询
   * Endpoint: `POST /api/query/sql`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} stmt - 必需。要执行的 SQL 查询语句。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，其他值表示失败。
   *   @property {string} Msg - 错误信息，成功时通常为空字符串。
   *   @property {Array<Record<string, any>> | null} Data - 查询结果数组。每个元素是一个对象，键为列名，值为该列的值。查询失败或无结果时可能为 null 或空数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async SQL(data) {
    return this._fetchWrapper('/api/query/sql', 'POST', data, true);
  }

  /**
   * 获取反向链接和提及(旧)
   * Endpoint: `POST /api/ref/getBacklink`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要查询反向链接和提及的目标块的 ID。
   *   @property {string} k - 用于筛选反向链接结果的关键词。
   *   @property {string} mk - 用于筛选反向提及结果的关键词。
   *   @property {any} beforeLen - 可选。上下文截取长度或其他用途，默认为 12。具体作用需进一步确认。
   *   @property {boolean | undefined} containChildren - 可选。是否包含子块内容进行搜索。默认为内核配置 `conf.editor.backlinkContainChildren`。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 包含反向链接、反向提及列表及相关信息的对象。
   *     @property {Array<any>} backlinks - 反向链接块的详细信息数组，具体结构复杂，参考 model.Backlink。
   *     @property {number} linkRefsCount - 反向链接的总数量。
   *     @property {Array<any>} backmentions - 反向提及块的详细信息数组，具体结构复杂，参考 model.Backmention。
   *     @property {number} mentionsCount - 反向提及的总数量。
   *     @property {string} k - 实际用于筛选反向链接的关键词。
   *     @property {string} mk - 实际用于筛选反向提及的关键词。
   *     @property {string} box - 目标块所在的笔记本 ID。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBacklink(data) {
    return this._fetchWrapper('/api/ref/getBacklink', 'POST', data, true);
  }

  /**
   * 获取反向链接和提及(新)
   * Endpoint: `POST /api/ref/getBacklink2`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要查询反向链接和提及的目标块的 ID。
   *   @property {string} k - 用于筛选反向链接结果的关键词。
   *   @property {string} mk - 用于筛选反向提及结果的关键词。
   *   @property {string | undefined} sort - 可选。反向链接的排序模式。具体值参考内核 `util.SortMode*` 常量 (例如 '0'-按更新时间倒序, '1'-按更新时间顺序, '6'-按相关度等)。默认为按更新时间倒序。
   *   @property {string | undefined} mSort - 可选。反向提及的排序模式。规则同 `sort`。
   *   @property {boolean | undefined} containChildren - 可选。是否包含子块内容进行搜索。默认为内核配置 `conf.editor.backlinkContainChildren`。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 包含反向链接、反向提及列表及相关信息的对象。
   *     @property {Array<any>} backlinks - 反向链接块的详细信息数组，具体结构复杂，参考 model.Backlink。
   *     @property {number} linkRefsCount - 反向链接的总数量。
   *     @property {Array<any>} backmentions - 反向提及块的详细信息数组，具体结构复杂，参考 model.Backmention。
   *     @property {number} mentionsCount - 反向提及的总数量。
   *     @property {string} k - 实际用于筛选反向链接的关键词。
   *     @property {string} mk - 实际用于筛选反向提及的关键词。
   *     @property {string} box - 目标块所在的笔记本 ID。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBacklink2(data) {
    return this._fetchWrapper('/api/ref/getBacklink2', 'POST', data, true);
  }

  /**
   * 获取文档内反向链接
   * Endpoint: `POST /api/ref/getBacklinkDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} defID - 必需。定义块的 ID (即被其他块引用的块)。
   *   @property {string} refTreeID - 必需。引用块所在文档树的根块 ID (通常是当前打开的文档的根块 ID)。
   *   @property {string} keyword - 用于筛选结果的关键词。
   *   @property {boolean | undefined} containChildren - 可选。是否包含子块内容进行搜索。默认为内核配置 `conf.editor.backlinkContainChildren`。
   *   @property {any} highlight - 可选。是否高亮关键词，默认为 true。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 包含反向链接列表和高亮关键词的对象。
   *     @property {Array<any>} backlinks - 反向链接块的详细信息数组，具体结构复杂，参考 model.Backlink。
   *     @property {Array<string>} keywords - 实际用于高亮的关键词列表。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBacklinkDoc(data) {
    return this._fetchWrapper('/api/ref/getBacklinkDoc', 'POST', data, true);
  }

  /**
   * 获取文档内反向提及
   * Endpoint: `POST /api/ref/getBackmentionDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} defID - 必需。定义块的 ID (即被其他块提及的块)。
   *   @property {string} refTreeID - 必需。提及块所在文档树的根块 ID (通常是当前打开的文档的根块 ID)。
   *   @property {string} keyword - 用于筛选结果的关键词。
   *   @property {boolean | undefined} containChildren - 可选。是否包含子块内容进行搜索。默认为内核配置 `conf.editor.backlinkContainChildren`。
   *   @property {any} highlight - 可选。是否高亮关键词，默认为 true。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 包含反向提及列表和高亮关键词的对象。
   *     @property {Array<any>} backmentions - 反向提及块的详细信息数组，具体结构复杂，参考 model.Backmention。
   *     @property {Array<string>} keywords - 实际用于高亮的关键词列表。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBackmentionDoc(data) {
    return this._fetchWrapper('/api/ref/getBackmentionDoc', 'POST', data, true);
  }

  /**
   * 刷新反向链接
   * Endpoint: `POST /api/ref/refreshBacklink`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要刷新反向链接和提及信息的目标块的 ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async refreshBacklink(data) {
    return this._fetchWrapper('/api/ref/refreshBacklink', 'POST', data, true);
  }

  /**
   * 检出仓库快照
   * Endpoint: `POST /api/repo/checkoutRepo`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要检出的快照的唯一标识符 (ID)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async checkoutRepo(data) {
    return this._fetchWrapper('/api/repo/checkoutRepo', 'POST', data, true);
  }

  /**
   * 创建快照
   * Endpoint: `POST /api/repo/createSnapshot`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} memo - 可选。快照的备注信息。
   *   @property {string | undefined} tag - 可选。为快照打上的标签名。如果提供，则此快照同时会成为一个标签快照。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含新快照ID的对象。
   *     @property {string} id - 新创建的快照的唯一标识符 (ID)。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async createSnapshot(data) {
    return this._fetchWrapper('/api/repo/createSnapshot', 'POST', data, true);
  }

  /**
   * 比较快照差异
   * Endpoint: `POST /api/repo/diffRepoSnapshots`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} left - 必需。左侧快照的 ID，作为比较基准的旧版本。
   *   @property {string} right - 必需。右侧快照的 ID，作为比较目标的新版本。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含两个快照差异详情的对象。
   *     @property {Array<object>} addsLeft - 右侧快照相对于左侧快照新增的文档列表。
   *     @property {Array<object>} updatesLeft - 在左侧快照中存在，并在右侧快照中被修改的文档列表。
   *     @property {Array<object>} updatesRight - 在右侧快照中存在，并在左侧快照中被修改的文档列表 (通常为空或与updatesLeft对称，具体含义需结合上下文)。
   *     @property {Array<object>} removesRight - 左侧快照中存在，但在右侧快照中被删除的文档列表。
   *     @property {object} left - 左侧快照的元信息。
   *       @property {string} id - 快照ID
   *       @property {string} created - 创建时间戳 (Unix 毫秒)
   *       @property {string} memo - 备注
   *     @property {object} right - 右侧快照的元信息。
   *       @property {string} id - 快照ID
   *       @property {string} created - 创建时间戳 (Unix 毫秒)
   *       @property {string} memo - 备注
   * @throws {Error} If the request fails or the server returns an error.
   */
  async diffRepoSnapshots(data) {
    return this._fetchWrapper('/api/repo/diffRepoSnapshots', 'POST', data, true);
  }

  /**
   * 下载云端快照
   * Endpoint: `POST /api/repo/downloadCloudSnapshot`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要下载的云端快照的 ID。
   *   @property {string | undefined} tag - 可选。如果下载的是标签快照，则此为标签名。如果下载的是普通快照，此字段应为空字符串或省略。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async downloadCloudSnapshot(data) {
    return this._fetchWrapper('/api/repo/downloadCloudSnapshot', 'POST', data, true);
  }

  /**
   * 获取云端快照列表
   * Endpoint: `POST /api/repo/getCloudRepoSnapshots`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} page - 必需。页码，从 1 开始。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含云端快照列表、总页数和总数量的对象。
   *     @property {Array<object>} snapshots - 云端快照对象数组。
   *     @property {number} pageCount - 总页数。
   *     @property {number} totalCount - 快照总数量。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getCloudRepoSnapshots(data) {
    return this._fetchWrapper('/api/repo/getCloudRepoSnapshots', 'POST', data, true);
  }

  /**
   * 获取云端标签快照列表
   * Endpoint: `POST /api/repo/getCloudRepoTagSnapshots`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} page - 必需。页码，从 1 开始。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含云端标签快照列表、总页数和总数量的对象。
   *     @property {Array<object>} snapshots - 云端标签快照对象数组。
   *     @property {number} pageCount - 总页数。
   *     @property {number} totalCount - 标签快照总数量。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getCloudRepoTagSnapshots(data) {
    return this._fetchWrapper('/api/repo/getCloudRepoTagSnapshots', 'POST', data, true);
  }

  /**
   * 获取快照中的文件内容
   * Endpoint: `POST /api/repo/getRepoFile`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。快照的 ID。
   *   @property {string | undefined} path - 可选。快照内文件的相对路径。如果 id 已经是快照内文件的完整标识（如 `快照ID/文件路径.sy`），则此项可省略。
   * @returns {Promise<any>} 此接口不返回标准 JSON。成功时直接返回文件数据流 (HTTP 200)，Content-Type 根据文件类型确定。失败时返回标准 JSON 错误结构。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRepoFile(data) {
    return this._fetchWrapper('/api/repo/getRepoFile', 'POST', data, true);
  }

  /**
   * 获取本地快照列表
   * Endpoint: `POST /api/repo/getRepoSnapshots`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} page - 必需。页码，从 1 开始。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含本地快照列表、总页数和总数量的对象。
   *     @property {Array<object>} snapshots - 本地快照对象数组。
   *     @property {number} pageCount - 总页数。
   *     @property {number} totalCount - 快照总数量。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRepoSnapshots(data) {
    return this._fetchWrapper('/api/repo/getRepoSnapshots', 'POST', data, true);
  }

  /**
   * 获取本地标签快照列表
   * Endpoint: `POST /api/repo/getRepoTagSnapshots`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} page - 必需。页码，从 1 开始。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 包含本地标签快照列表、总页数和总数量的对象。
   *     @property {Array<object>} snapshots - 本地标签快照对象数组。
   *     @property {number} pageCount - 总页数。
   *     @property {number} totalCount - 标签快照总数量。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRepoTagSnapshots(data) {
    return this._fetchWrapper('/api/repo/getRepoTagSnapshots', 'POST', data, true);
  }

  /**
   * 导入仓库密钥
   * Endpoint: `POST /api/repo/importRepoKey`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async importRepoKey(data) {
    return this._fetchWrapper('/api/repo/importRepoKey', 'POST', data, true);
  }

  /**
   * 初始化仓库密钥
   * Endpoint: `POST /api/repo/initRepoKey`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async initRepoKey(data) {
    return this._fetchWrapper('/api/repo/initRepoKey', 'POST', data, true);
  }

  /**
   * 通过口令初始化仓库密钥
   * Endpoint: `POST /api/repo/initRepoKeyFromPassphrase`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} passphrase - 必需。用于生成密钥的用户口令。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async initRepoKeyFromPassphrase(data) {
    return this._fetchWrapper('/api/repo/initRepoKeyFromPassphrase', 'POST', data, true);
  }

  /**
   * 打开快照中的文档
   * Endpoint: `POST /api/repo/openRepoSnapshotDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。快照中文档的唯一标识符 (通常是 `快照ID/文档ID.sy`)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 包含文档标题、内容和元信息的对象。失败时为 null。
   *     @property {string} title - 文档的标题。
   *     @property {string} content - 文档的内容 (HTML格式)。
   *     @property {boolean} displayInText - 是否应在纯文本模式下显示 (通常为 false)。
   *     @property {string} updated - 文档的最后更新时间 (Unix 时间戳字符串，秒级)。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async openRepoSnapshotDoc(data) {
    return this._fetchWrapper('/api/repo/openRepoSnapshotDoc', 'POST', data, true);
  }

  /**
   * 清理云端仓库
   * Endpoint: `POST /api/repo/purgeCloudRepo`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async purgeCloudRepo(data) {
    return this._fetchWrapper('/api/repo/purgeCloudRepo', 'POST', data, true);
  }

  /**
   * 清理本地仓库
   * Endpoint: `POST /api/repo/purgeRepo`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async purgeRepo(data) {
    return this._fetchWrapper('/api/repo/purgeRepo', 'POST', data, true);
  }

  /**
   * 移除云端标签快照
   * Endpoint: `POST /api/repo/removeCloudRepoTagSnapshot`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要移除的云端标签快照的 ID。
   *   @property {string} tag - 必需。要移除的云端标签快照的标签名。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeCloudRepoTagSnapshot(data) {
    return this._fetchWrapper('/api/repo/removeCloudRepoTagSnapshot', 'POST', data, true);
  }

  /**
   * 移除本地标签快照
   * Endpoint: `POST /api/repo/removeRepoTagSnapshot`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要移除的本地标签快照的 ID。
   *   @property {string} tag - 必需。要移除的本地标签快照的标签名。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeRepoTagSnapshot(data) {
    return this._fetchWrapper('/api/repo/removeRepoTagSnapshot', 'POST', data, true);
  }

  /**
   * 重置本地仓库
   * Endpoint: `POST /api/repo/resetRepo`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async resetRepo(data) {
    return this._fetchWrapper('/api/repo/resetRepo', 'POST', data, true);
  }

  /**
   * 设置快照索引保留天数
   * Endpoint: `POST /api/repo/setRepoIndexRetentionDays`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} days - 必需。快照索引保留的天数，必须为正整数。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setRepoIndexRetentionDays(data) {
    return this._fetchWrapper('/api/repo/setRepoIndexRetentionDays', 'POST', data, true);
  }

  /**
   * 设置每日快照保留数量
   * Endpoint: `POST /api/repo/setRetentionIndexesDaily`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} indexes - 必需。每日快照的保留数量，必须为正整数。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setRetentionIndexesDaily(data) {
    return this._fetchWrapper('/api/repo/setRetentionIndexesDaily', 'POST', data, true);
  }

  /**
   * 标记快照
   * Endpoint: `POST /api/repo/tagSnapshot`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要标记的快照的 ID。
   *   @property {string} tag - 必需。要打上的标签名。
   *   @property {string | undefined} memo - 可选。快照的备注信息，如果提供，会覆盖快照原有的备注。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async tagSnapshot(data) {
    return this._fetchWrapper('/api/repo/tagSnapshot', 'POST', data, true);
  }

  /**
   * 上传快照到云端
   * Endpoint: `POST /api/repo/uploadCloudSnapshot`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要上传的本地快照的 ID。
   *   @property {string | undefined} tag - 可选。如果上传的是标签快照，则此为标签名。如果上传的是普通快照，此字段应为空字符串或省略。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async uploadCloudSnapshot(data) {
    return this._fetchWrapper('/api/repo/uploadCloudSnapshot', 'POST', data, true);
  }

  /**
   * 添加闪卡
   * Endpoint: `POST /api/riff/addRiffCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} deckID - 必需。目标闪卡包的 ID。
   *   @property {Array<string>} blockIDs - 必需。要添加为闪卡的块 ID 数组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回更新后的闪卡包信息，如果 deckID 为空字符串（表示操作 All 卡包），则为 null。
   *     @property {string} id - 闪卡包 ID
   *     @property {string} name - 闪卡包名称
   *     @property {number} size - 闪卡包中的卡片数量
   *     @property {string} created - 闪卡包创建时间，格式 YYYY-MM-DD HH:mm:ss
   *     @property {string} updated - 闪卡包更新时间，格式 YYYY-MM-DD HH:mm:ss
   * @throws {Error} If the request fails or the server returns an error.
   */
  async addRiffCards(data) {
    return this._fetchWrapper('/api/riff/addRiffCards', 'POST', data, true);
  }

  /**
   * 批量设置闪卡到期时间
   * Endpoint: `POST /api/riff/batchSetRiffCardsDueTime`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<object>} cardDues - 必需。包含闪卡 ID 和对应新到期时间的数组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async batchSetRiffCardsDueTime(data) {
    return this._fetchWrapper('/api/riff/batchSetRiffCardsDueTime', 'POST', data, true);
  }

  /**
   * 创建闪卡包
   * Endpoint: `POST /api/riff/createRiffDeck`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} name - 必需。新闪卡包的名称。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 成功时返回新创建的闪卡包信息。
   *     @property {string} id - 新创建的闪卡包 ID
   *     @property {string} name - 新创建的闪卡包名称
   *     @property {number} size - 新创建的闪卡包中的卡片数量 (初始为0)
   *     @property {string} created - 闪卡包创建时间，格式 YYYY-MM-DD HH:mm:ss
   *     @property {string} updated - 闪卡包更新时间，格式 YYYY-MM-DD HH:mm:ss
   * @throws {Error} If the request fails or the server returns an error.
   */
  async createRiffDeck(data) {
    return this._fetchWrapper('/api/riff/createRiffDeck', 'POST', data, true);
  }

  /**
   * 获取笔记本下的所有闪卡
   * Endpoint: `POST /api/riff/getNotebookRiffCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。笔记本 ID。
   *   @property {number} page - 必需。页码，从 1 开始。
   *   @property {number | undefined} pageSize - 可选。每页数量，默认为 20。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 成功时返回分页的闪卡块 ID 及分页信息。
   *     @property {Array<string>} blocks - 当前页的闪卡块 ID 数组。
   *     @property {number} total - 该笔记本下闪卡总数。
   *     @property {number} pageCount - 总页数。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getNotebookRiffCards(data) {
    return this._fetchWrapper('/api/riff/getNotebookRiffCards', 'POST', data, true);
  }

  /**
   * 获取笔记本下的到期闪卡
   * Endpoint: `POST /api/riff/getNotebookRiffDueCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} notebook - 必需。笔记本 ID。
   *   @property {Array<object> | undefined} reviewedCards - 可选。当前学习会话中已经复习过的卡片列表，用于在获取下一张卡片时排除它们。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 成功时返回到期闪卡列表及统计信息。
   *     @property {Array<object>} cards - 到期闪卡列表。
   *     @property {number} unreviewedCount - 未复习卡片总数。
   *     @property {number} unreviewedNewCardCount - 未复习新卡片数量。
   *     @property {number} unreviewedOldCardCount - 未复习旧卡片数量。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getNotebookRiffDueCards(data) {
    return this._fetchWrapper('/api/riff/getNotebookRiffDueCards', 'POST', data, true);
  }

  /**
   * 获取闪卡包中的所有闪卡
   * Endpoint: `POST /api/riff/getRiffCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。闪卡包 ID。
   *   @property {number} page - 必需。页码，从 1 开始。
   *   @property {number | undefined} pageSize - 可选。每页数量，默认为 20。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 成功时返回分页的闪卡对象及分页信息。
   *     @property {Array<object>} blocks - 当前页的闪卡对象数组。
   *     @property {number} total - 该闪卡包下闪卡总数。
   *     @property {number} pageCount - 总页数。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRiffCards(data) {
    return this._fetchWrapper('/api/riff/getRiffCards', 'POST', data, true);
  }

  /**
   * 根据块ID批量获取闪卡信息
   * Endpoint: `POST /api/riff/getRiffCardsByBlockIDs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} blockIDs - 必需。块 ID 数组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 成功时返回闪卡信息。
   *     @property {Array<object>} blocks - 对应的闪卡信息数组。如果某个 blockID 不是闪卡，则对应项可能缺失或为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRiffCardsByBlockIDs(data) {
    return this._fetchWrapper('/api/riff/getRiffCardsByBlockIDs', 'POST', data, true);
  }

  /**
   * 获取所有闪卡包
   * Endpoint: `POST /api/riff/getRiffDecks`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {Array<object>} Data - 成功时返回所有闪卡包的信息数组。如果没有闪卡包，则返回空数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRiffDecks(data) {
    return this._fetchWrapper('/api/riff/getRiffDecks', 'POST', data, true);
  }

  /**
   * 获取闪卡包中的到期闪卡
   * Endpoint: `POST /api/riff/getRiffDueCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} deckID - 必需。闪卡包 ID。
   *   @property {Array<object> | undefined} reviewedCards - 可选。当前学习会话中已经复习过的卡片列表，用于在获取下一张卡片时排除它们。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 成功时返回到期闪卡列表及统计信息。
   *     @property {Array<object>} cards - 到期闪卡列表。
   *     @property {number} unreviewedCount - 未复习卡片总数。
   *     @property {number} unreviewedNewCardCount - 未复习新卡片数量。
   *     @property {number} unreviewedOldCardCount - 未复习旧卡片数量。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRiffDueCards(data) {
    return this._fetchWrapper('/api/riff/getRiffDueCards', 'POST', data, true);
  }

  /**
   * 获取文档树下的所有闪卡
   * Endpoint: `POST /api/riff/getTreeRiffCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。文档树的根块 ID。
   *   @property {number} page - 必需。页码，从 1 开始。
   *   @property {number | undefined} pageSize - 可选。每页数量，默认为 20。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 成功时返回分页的闪卡块 ID 及分页信息。
   *     @property {Array<string>} blocks - 当前页的闪卡块 ID 数组。
   *     @property {number} total - 该文档树下闪卡总数。
   *     @property {number} pageCount - 总页数。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getTreeRiffCards(data) {
    return this._fetchWrapper('/api/riff/getTreeRiffCards', 'POST', data, true);
  }

  /**
   * 获取文档树下的到期闪卡
   * Endpoint: `POST /api/riff/getTreeRiffDueCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} rootID - 必需。文档树的根块 ID。
   *   @property {Array<object> | undefined} reviewedCards - 可选。当前学习会话中已经复习过的卡片列表，用于在获取下一张卡片时排除它们。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object} Data - 成功时返回到期闪卡列表及统计信息。
   *     @property {Array<object>} cards - 到期闪卡列表。
   *     @property {number} unreviewedCount - 未复习卡片总数。
   *     @property {number} unreviewedNewCardCount - 未复习新卡片数量。
   *     @property {number} unreviewedOldCardCount - 未复习旧卡片数量。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getTreeRiffDueCards(data) {
    return this._fetchWrapper('/api/riff/getTreeRiffDueCards', 'POST', data, true);
  }

  /**
   * 移除闪卡
   * Endpoint: `POST /api/riff/removeRiffCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} deckID - 必需。目标闪卡包的 ID。如果为空字符串，则表示从所有卡包中移除这些卡片（通常用于"All"卡包的操作场景，但后端实际是根据 blockID 移除）。
   *   @property {Array<string>} blockIDs - 必需。要移除的闪卡块 ID 数组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回更新后的闪卡包信息。如果操作的是"All"卡包（即传入的 deckID 为空字符串），则 Data 为 null。
   *     @property {string} id - 闪卡包 ID
   *     @property {string} name - 闪卡包名称
   *     @property {number} size - 闪卡包中的卡片数量
   *     @property {string} created - 闪卡包创建时间，格式 YYYY-MM-DD HH:mm:ss
   *     @property {string} updated - 闪卡包更新时间，格式 YYYY-MM-DD HH:mm:ss
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeRiffCards(data) {
    return this._fetchWrapper('/api/riff/removeRiffCards', 'POST', data, true);
  }

  /**
   * 移除闪卡包
   * Endpoint: `POST /api/riff/removeRiffDeck`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} deckID - 必需。要移除的闪卡包 ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeRiffDeck(data) {
    return this._fetchWrapper('/api/riff/removeRiffDeck', 'POST', data, true);
  }

  /**
   * 重命名闪卡包
   * Endpoint: `POST /api/riff/renameRiffDeck`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} deckID - 必需。要重命名的闪卡包 ID。
   *   @property {string} name - 必需。新的闪卡包名称。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renameRiffDeck(data) {
    return this._fetchWrapper('/api/riff/renameRiffDeck', 'POST', data, true);
  }

  /**
   * 重置闪卡
   * Endpoint: `POST /api/riff/resetRiffCards`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {"notebook" | "tree" | "deck"} type - 必需。重置类型：'notebook' (笔记本), 'tree' (文档树), 'deck' (闪卡包)。
   *   @property {string} id - 必需。对应类型的 ID：笔记本 ID、文档树根块 ID 或闪卡包 ID。
   *   @property {string} deckID - 必需。闪卡包 ID。即使 type 是 'notebook' 或 'tree'，也需要指定一个 deckID 来确定操作范围，通常可以是这些卡片实际所属的卡包 ID，或者是全局的卡片操作。具体逻辑需参照后端 model.ResetFlashcards 实现。从 riff.go L89 看，此参数未被直接使用，但model层可能需要。暂时保留。
   *   @property {Array<string> | undefined} blockIDs - 可选。要重置的具体闪卡块 ID 数组。如果未提供或为空数组，则重置 type 和 id 指定范围内的所有卡片。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async resetRiffCards(data) {
    return this._fetchWrapper('/api/riff/resetRiffCards', 'POST', data, true);
  }

  /**
   * 复习闪卡
   * Endpoint: `POST /api/riff/reviewRiffCard`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} deckID - 必需。闪卡所属的卡包 ID。
   *   @property {string} cardID - 必需。要复习的闪卡块 ID。
   *   @property {number} rating - 必需。评分，通常为 0 (Again), 1 (Hard), 2 (Good), 3 (Easy), 4 (Soon)。具体数值对应关系可能依赖于底层的 SM-2 算法实现。参照 riff.Rating 定义，0:Again, 1:Hard, 2:Good, 3:Easy, 4:Soon, (SM2 的0-5 对应这里的0-4?)
   *   @property {Array<object> | undefined} reviewedCards - 可选。当前学习会话中已经复习过的卡片列表，用于在获取下一张卡片时排除它们（后端逻辑 model.ReviewFlashcard 中使用了 reviewedCardIDs）。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async reviewRiffCard(data) {
    return this._fetchWrapper('/api/riff/reviewRiffCard', 'POST', data, true);
  }

  /**
   * 跳过复习闪卡
   * Endpoint: `POST /api/riff/skipReviewRiffCard`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} deckID - 必需。闪卡所属的卡包 ID。
   *   @property {string} cardID - 必需。要跳过复习的闪卡块 ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功时 Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async skipReviewRiffCard(data) {
    return this._fetchWrapper('/api/riff/skipReviewRiffCard', 'POST', data, true);
  }

  /**
   * 查找并替换
   * Endpoint: `POST /api/search/findReplace`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} k - 必需。要查找的关键词。
   *   @property {string} r - 必需。要替换的字符串。
   *   @property {Array<string>} ids - 必需。要进行查找替换操作的块 ID 数组。
   *   @property {Array<string> | undefined} paths - 可选。限制查找范围的路径数组，每个路径格式为 '笔记本ID/文档路径' 或仅 '笔记本ID'。
   *   @property {Array<string> | undefined} boxes - 可选。限制查找范围的笔记本 ID 数组。如果提供了 paths，此参数通常会自动从中提取。
   *   @property {Record<string, boolean> | undefined} types - 可选。指定要搜索的块类型，例如 {'paragraph': true, 'heading': false}。具体可用类型参考 model.ReplaceTypes。
   *   @property {number | undefined} method - 可选。搜索方法：0：关键字（默认），1：查询语法，2：SQL，3：正则表达式。
   *   @property {number | undefined} orderBy - 可选。排序方式：0：按块类型（默认），1：按创建时间升序，2：按创建时间降序，3：按更新时间升序，4：按更新时间降序，5：按内容顺序（仅在按文档分组时），6：按相关度升序，7：按相关度降序。
   *   @property {number | undefined} groupBy - 可选。分组方式：0：不分组（默认），1：按文档分组。
   *   @property {Record<string, boolean> | undefined} replaceTypes - 可选。指定替换时要处理的文本类型，例如 {'text': true, 'imgText': true}。可用键包括：'text', 'imgText', 'imgTitle', 'imgSrc', 'aText', 'aTitle', 'aHref', 'code', 'em', 'strong', 'inlineMath', 'inlineMemo', 'blockRef', 'fileAnnotationRef', 'kbd', 'mark', 's', 'sub', 'sup', 'tag', 'u', 'docTitle', 'codeBlock', 'mathBlock', 'htmlBlock'。具体参考 Go 源码 model.FindReplace。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时 Data 可能为 null 或包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 可选。如果替换过程中出现需要用户确认的对话框（例如替换了文档标题），此字段表示对话框的关闭延迟时间（毫秒）。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async findReplace(data) {
    return this._fetchWrapper('/api/search/findReplace', 'POST', data, true);
  }

  /**
   * 全文搜索资源文件内容
   * Endpoint: `POST /api/search/fullTextSearchAssetContent`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} query - 必需。搜索查询语句。
   *   @property {number | undefined} page - 可选。页码，从 1 开始，默认为 1。
   *   @property {number | undefined} pageSize - 可选。每页数量，默认为 32。
   *   @property {Record<string, boolean> | undefined} types - 可选。指定要搜索的资源文件类型（基于文件扩展名），例如 {'pdf': true, 'txt': false}。具体可用类型参考 model.QueryAssetContentTypes。
   *   @property {number | undefined} method - 可选。搜索方法：0：关键字（默认），1：查询语法，2：SQL，3：正则表达式。
   *   @property {number | undefined} orderBy - 可选。排序方式：0：按相关度降序（默认），1：按相关度升序，2：按更新时间升序，3：按更新时间降序。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功。如果未付费，Code 为 1。
   *   @property {string} Msg - 错误信息，成功时为空字符串。
   *   @property {object | null} Data - 成功时返回搜索结果列表及分页信息；如果未付费，Data 为 null。
   *     @property {Array<object>} assetContents - 当前页的搜索结果列表。
   *     @property {number} matchedAssetCount - 匹配到的资源文件总数。
   *     @property {number} pageCount - 总页数。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async fullTextSearchAssetContent(data) {
    return this._fetchWrapper('/api/search/fullTextSearchAssetContent', 'POST', data, true);
  }

  /**
   * 全文搜索块内容
   * Endpoint: `POST /api/search/fullTextSearchBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} query - 必需。搜索查询语句。
   *   @property {number | undefined} page - 可选。页码，从 1 开始，默认为 1。
   *   @property {number | undefined} pageSize - 可选。每页数量，默认为 32。
   *   @property {Array<string> | undefined} paths - 可选。限制查找范围的路径数组，每个路径格式为 '笔记本ID/文档路径' 或仅 '笔记本ID'。
   *   @property {Array<string> | undefined} boxes - 可选。限制查找范围的笔记本 ID 数组。如果提供了 paths，此参数通常会自动从中提取。
   *   @property {Record<string, boolean> | undefined} types - 可选。指定要搜索的块类型，例如 {'paragraph': true, 'heading': false}。具体可用类型参考 model.QueryBlockTypes。
   *   @property {number | undefined} method - 可选。搜索方法：0：关键字（默认），1：查询语法，2：SQL，3：正则表达式。
   *   @property {number | undefined} orderBy - 可选。排序方式：0：按块类型（默认），1：按创建时间升序，2：按创建时间降序，3：按更新时间升序，4：按更新时间降序，5：按内容顺序（仅在按文档分组时），6：按相关度升序，7：按相关度降序。
   *   @property {number | undefined} groupBy - 可选。分组方式：0：不分组（默认），1：按文档分组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回搜索结果列表及分页信息。
   *     @property {Array<any>} blocks - 当前页的搜索结果块列表。每个块的结构根据其类型而定，通常包含 id, type, content, path, box, docID 等字段。
   *     @property {number} matchedBlockCount - 匹配到的块总数。
   *     @property {number} matchedRootCount - 匹配到的根块（文档）总数。
   *     @property {number} pageCount - 总页数。
   *     @property {boolean} docMode - 是否为文档模式搜索结果（groupBy=1 时为 true）。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async fullTextSearchBlock(data) {
    return this._fetchWrapper('/api/search/fullTextSearchBlock', 'POST', data, true);
  }

  /**
   * 获取资源文件指定内容片段
   * Endpoint: `POST /api/search/getAssetContent`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。资源文件块的 ID。
   *   @property {string} query - 必需。查询关键词。
   *   @property {number} queryMethod - 必需。查询方法：0：关键字，1：查询语法，2：SQL，3：正则表达式。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回内容片段。
   *     @property {string} assetContent - 匹配到的资源文件内容片段。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getAssetContent(data) {
    return this._fetchWrapper('/api/search/getAssetContent', 'POST', data, true);
  }

  /**
   * 获取嵌入块内容
   * Endpoint: `POST /api/search/getEmbedBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} embedBlockID - 必需。嵌入块（通常是 `((块ID))` 引用的块）的 ID。
   *   @property {Array<string>} includeIDs - 必需。要实际嵌入显示的块 ID 数组（通常只包含 embedBlockID，但在特殊情况下可能包含其子块）。
   *   @property {number | undefined} headingMode - 可选。标题处理模式：0：带标题下方块（默认），其他值行为需参照 model.GetEmbedBlock 实现。
   *   @property {boolean | undefined} breadcrumb - 可选。是否显示面包屑路径，默认为 false。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回渲染后的块内容。
   *     @property {Array<any>} blocks - 渲染后的嵌入块内容数组。每个元素的具体结构取决于块类型。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getEmbedBlock(data) {
    return this._fetchWrapper('/api/search/getEmbedBlock', 'POST', data, true);
  }

  /**
   * 列出无效的块引用
   * Endpoint: `POST /api/search/listInvalidBlockRefs`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number | undefined} page - 可选。页码，从 1 开始，默认为 1。
   *   @property {number | undefined} pageSize - 可选。每页数量，默认为 32。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回无效引用块列表及分页信息。
   *     @property {Array<object>} blocks - 当前页的无效引用块列表。
   *     @property {number} matchedBlockCount - 匹配到的无效引用块总数。
   *     @property {number} matchedRootCount - 匹配到的包含无效引用的文档总数。
   *     @property {number} pageCount - 总页数。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async listInvalidBlockRefs(data) {
    return this._fetchWrapper('/api/search/listInvalidBlockRefs', 'POST', data, true);
  }

  /**
   * 移除模板
   * Endpoint: `POST /api/search/removeTemplate`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 必需。要移除的模板文件的相对路径（相对于模板文件夹）。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，-1 表示失败
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功或失败时 Data 均为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeTemplate(data) {
    return this._fetchWrapper('/api/search/removeTemplate', 'POST', data, true);
  }

  /**
   * 搜索资源文件
   * Endpoint: `POST /api/search/searchAsset`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} k - 必需。搜索关键词。
   *   @property {Array<string> | undefined} exts - 可选。文件扩展名数组，用于过滤结果，例如 ['.png', '.jpg']。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {Array<object>} Data - 匹配到的资源文件列表。如果没有结果，则为空数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchAsset(data) {
    return this._fetchWrapper('/api/search/searchAsset', 'POST', data, true);
  }

  /**
   * 搜索嵌入块内容 (SQL查询)
   * Endpoint: `POST /api/search/searchEmbedBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} embedBlockID - 必需。作为搜索范围根的嵌入块 ID。
   *   @property {string} stmt - 必需。用于搜索的 SQL 语句。查询的表名通常为 'blocks'，可查询的字段如 id, content, markdown, type 等。
   *   @property {Array<string> | undefined} excludeIDs - 可选。在搜索结果中排除的块 ID 数组。
   *   @property {number | undefined} headingMode - 可选。标题处理模式：0：带标题下方块（默认），其他值行为需参照 model.SearchEmbedBlock 实现。
   *   @property {boolean | undefined} breadcrumb - 可选。是否显示面包屑路径，默认为 false。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回搜索到的块内容。
   *     @property {Array<any>} blocks - 满足 SQL 查询条件的块内容数组。每个元素的具体结构取决于块类型和查询语句。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchEmbedBlock(data) {
    return this._fetchWrapper('/api/search/searchEmbedBlock', 'POST', data, true);
  }

  /**
   * 搜索引用块建议
   * Endpoint: `POST /api/search/searchRefBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。当前正在编辑的块的 ID。
   *   @property {string} rootID - 必需。当前文档的根块 ID。
   *   @property {string} k - 必需。用户输入的搜索关键词。
   *   @property {number | undefined} beforeLen - 可选。光标前字符长度，用于辅助判断引用类型，默认为0。
   *   @property {boolean | undefined} isSquareBrackets - 可选。是否为双方括号引用 `[[`，默认为 false。
   *   @property {boolean | undefined} isDatabase - 可选。是否在数据库视图中搜索，默认为 false。
   *   @property {any | undefined} reqId - 可选。请求 ID，会透传到响应中，用于前端跟踪异步请求。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回引用建议列表。如果 id 参数为空，Data 可能为仅包含 reqId 的对象。
   *     @property {Array<object>} blocks - 引用建议块列表。
   *     @property {boolean} newDoc - 是否建议创建一个新文档（当搜索关键词在 `isSquareBrackets` 为 true 时可能触发）。
   *     @property {string} k - 原始搜索关键词 (HTML转义后)。
   *     @property {any | undefined} reqId - 透传的请求 ID。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchRefBlock(data) {
    return this._fetchWrapper('/api/search/searchRefBlock', 'POST', data, true);
  }

  /**
   * 搜索标签
   * Endpoint: `POST /api/search/searchTag`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} k - 必需。搜索关键词。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回标签列表和关键词。
   *     @property {Array<string>} tags - 匹配到的标签列表。如果无结果则为空数组。
   *     @property {string} k - 原始搜索关键词。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchTag(data) {
    return this._fetchWrapper('/api/search/searchTag', 'POST', data, true);
  }

  /**
   * 搜索模板
   * Endpoint: `POST /api/search/searchTemplate`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} k - 必需。搜索关键词。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回模板列表和关键词。
   *     @property {Array<object>} blocks - 匹配到的模板列表。
   *     @property {string} k - 原始搜索关键词。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchTemplate(data) {
    return this._fetchWrapper('/api/search/searchTemplate', 'POST', data, true);
  }

  /**
   * 搜索挂件
   * Endpoint: `POST /api/search/searchWidget`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} k - 必需。搜索关键词。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {object | null} Data - 成功时返回挂件列表和关键词。
   *     @property {Array<object>} blocks - 匹配到的挂件块列表。
   *     @property {string} k - 原始搜索关键词。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async searchWidget(data) {
    return this._fetchWrapper('/api/search/searchWidget', 'POST', data, true);
  }

  /**
   * 更新查询嵌入块内容
   * Endpoint: `POST /api/search/updateEmbedBlock`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 必需。要更新的查询嵌入块的 ID。
   *   @property {string} content - 必需。查询嵌入块新的原始 Markdown 内容，通常是 SQL 查询语句或 JavaScript 脚本。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 返回码，0 表示成功，-1 表示失败
   *   @property {string} Msg - 错误信息，成功时为空字符串
   *   @property {null} Data - 成功或失败时 Data 均为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async updateEmbedBlock(data) {
    return this._fetchWrapper('/api/search/updateEmbedBlock', 'POST', data, true);
  }

  /**
   * 添加虚拟引用排除关键字
   * Endpoint: `POST /api/setting/addVirtualBlockRefExclude`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} keywords - 要添加到排除列表的关键字数组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {null} Data - 此接口成功时不返回具体数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async addVirtualBlockRefExclude(data) {
    return this._fetchWrapper('/api/setting/addVirtualBlockRefExclude', 'POST', data, true);
  }

  /**
   * 添加虚拟引用包含关键字
   * Endpoint: `POST /api/setting/addVirtualBlockRefInclude`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} keywords - 要添加到包含列表的关键字数组。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {null} Data - 此接口成功时不返回具体数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async addVirtualBlockRefInclude(data) {
    return this._fetchWrapper('/api/setting/addVirtualBlockRefInclude', 'POST', data, true);
  }

  /**
   * 获取云端用户信息
   * Endpoint: `POST /api/setting/getCloudUser`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string | undefined} token - 可选的访问令牌，用于刷新用户信息。如果未提供，则尝试使用现有会话。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 包含用户详细信息的对象，获取失败时为 null。
   *     @property {string} userId - 用户ID。
   *     @property {string} userName - 用户名。
   *     @property {string} userAvatarURL - 用户头像URL。
   *     @property {string} userHomeBImgURL - 用户主页背景图URL。
   *     @property {Array<object>} userTitles - 用户获得的称号列表。
   *     @property {string} userIntro - 用户简介。
   *     @property {string} userNickname - 用户昵称。
   *     @property {string} userCreateTime - 用户账户创建时间。
   *     @property {number} userSiYuanProExpireTime - 思源笔记专业版到期时间戳 (毫秒)。
   *     @property {string} userToken - 用户访问令牌。
   *     @property {string} userTokenExpireTime - 用户访问令牌到期时间。
   *     @property {number} userSiYuanRepoSize - 思源笔记云端仓库已用空间大小 (字节)。
   *     @property {number} userSiYuanPointExchangeRepoSize - 通过积分兑换的云端仓库空间大小 (字节)。
   *     @property {number} userSiYuanAssetSize - 思源笔记云端资源文件已用空间大小 (字节)。
   *     @property {number} userTrafficUpload - 当月已用上传流量 (字节)。
   *     @property {number} userTrafficDownload - 当月已用下载流量 (字节)。
   *     @property {number} userSiYuanProExpireDays - 思源笔记专业版剩余天数。
   *     @property {number} userSiYuanAIMaxFreeRequestCount - AI功能免费版最大请求次数。
   *     @property {number} userSiYuanAIMaxProRequestCount - AI功能专业版最大请求次数。
   *     @property {number} userSiYuanAIProRequestCount - AI功能专业版当前已用请求次数。
   *     @property {number} userSiYuanAISubscriptionPlan - AI功能订阅计划类型。
   *     @property {boolean} userSiYuanPro - 是否为思源笔记专业版用户。
   *     @property {boolean} userSiYuanLifetimePro - 是否为思源笔记终身专业版用户。
   *     @property {boolean} userSiYuanTeam - 是否为思源笔记团队版用户。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getCloudUser(data) {
    return this._fetchWrapper('/api/setting/getCloudUser', 'POST', data, true);
  }

  /**
   * 获取发布服务配置
   * Endpoint: `POST /api/setting/getPublish`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 包含发布服务端口和配置信息的对象，获取失败时为 null。
   *     @property {number} port - 发布服务当前监听的端口号。
   *     @property {object} publish - 详细的发布配置项。
   *       @property {boolean} enable - 是否启用发布服务。
   *       @property {number} port - 发布服务配置的端口号。
   *       @property {object} auth - Basic 认证配置。
   *         @property {boolean} enable - 是否启用 Basic 认证。
   *         @property {Array<object>} accounts - Basic 认证账户列表。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getPublish(data) {
    return this._fetchWrapper('/api/setting/getPublish', 'POST', data, true);
  }

  /**
   * 云端用户两步验证登录
   * Endpoint: `POST /api/setting/login2faCloudUser`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} token - 登录过程中的临时令牌。
   *   @property {string} code - 6位数字的两步验证码。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {Record<string, any> | null} Data - 登录成功后返回的数据，通常包含新的用户信息或会话信息。具体结构依赖于云端服务的响应。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async login2faCloudUser(data) {
    return this._fetchWrapper('/api/setting/login2faCloudUser', 'POST', data, true);
  }

  /**
   * 登出云端用户
   * Endpoint: `POST /api/setting/logoutCloudUser`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {null} Data - 此接口成功时不返回具体数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async logoutCloudUser(data) {
    return this._fetchWrapper('/api/setting/logoutCloudUser', 'POST', data, true);
  }

  /**
   * 刷新虚拟引用缓存
   * Endpoint: `POST /api/setting/refreshVirtualBlockRef`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {null} Data - 此接口成功时不返回具体数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async refreshVirtualBlockRef(data) {
    return this._fetchWrapper('/api/setting/refreshVirtualBlockRef', 'POST', data, true);
  }

  /**
   * 设置AI配置
   * Endpoint: `POST /api/setting/setAI`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {object} openAI - OpenAI 相关配置。
   *     @property {string | undefined} apiKey - OpenAI API 密钥。
   *     @property {number | undefined} apiTimeout - OpenAI API 请求超时时间 (秒)，范围 5-600。
   *     @property {string | undefined} apiProxy - OpenAI API 代理地址。
   *     @property {string | undefined} apiModel - OpenAI API 模型名称。
   *     @property {number | undefined} apiMaxTokens - OpenAI API 最大 token 数，0表示不限制。
   *     @property {number | undefined} apiTemperature - OpenAI API 温度系数，范围 0-2。
   *     @property {number | undefined} apiMaxContexts - OpenAI API 最大上下文数量，范围 1-64。
   *     @property {string | undefined} apiBaseURL - OpenAI API 基础 URL，用于兼容第三方 OpenAI 兼容接口。
   *     @property {string | undefined} apiUserAgent - OpenAI API 请求的 User-Agent。
   *     @property {string | undefined} apiProvider - API 提供商，例如 'OpenAI', 'Azure'。
   *     @property {string | undefined} apiVersion - Azure API 版本，当 provider 为 Azure 时使用。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 更新后的 AI 配置对象。
   *     @property {object} openAI - OpenAI 相关配置。
   *       @property {string | undefined} apiKey - OpenAI API 密钥。
   *       @property {number | undefined} apiTimeout - OpenAI API 请求超时时间 (秒)。
   *       @property {string | undefined} apiProxy - OpenAI API 代理地址。
   *       @property {string | undefined} apiModel - OpenAI API 模型名称。
   *       @property {number | undefined} apiMaxTokens - OpenAI API 最大 token 数。
   *       @property {number | undefined} apiTemperature - OpenAI API 温度系数。
   *       @property {number | undefined} apiMaxContexts - OpenAI API 最大上下文数量。
   *       @property {string | undefined} apiBaseURL - OpenAI API 基础 URL。
   *       @property {string | undefined} apiUserAgent - OpenAI API 请求的 User-Agent。
   *       @property {string | undefined} apiProvider - API 提供商。
   *       @property {string | undefined} apiVersion - Azure API 版本。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setAI(data) {
    return this._fetchWrapper('/api/setting/setAI', 'POST', data, true);
  }

  /**
   * 设置账户相关配置
   * Endpoint: `POST /api/setting/setAccount`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean | undefined} displayTitle - 是否在用户头像旁显示称号。
   *   @property {boolean | undefined} displayVIP - 是否在用户头像旁显示Pro标识。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 更新后的账户配置对象。
   *     @property {boolean} displayTitle - 是否在用户头像旁显示称号。
   *     @property {boolean} displayVIP - 是否在用户头像旁显示Pro标识。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setAccount(data) {
    return this._fetchWrapper('/api/setting/setAccount', 'POST', data, true);
  }

  /**
   * 设置外观配置
   * Endpoint: `POST /api/setting/setAppearance`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number | undefined} mode - 外观模式，0：跟随系统，1：亮色，2：暗色。
   *   @property {string | undefined} themeDark - 暗色模式使用的主题名称。
   *   @property {string | undefined} themeLight - 亮色模式使用的主题名称。
   *   @property {Array<string> | undefined} darkThemes - 可选的暗色主题列表。
   *   @property {Array<string> | undefined} lightThemes - 可选的亮色主题列表。
   *   @property {Array<string> | undefined} icons - 已安装的图标包名称列表。
   *   @property {string | undefined} lang - 界面语言代码，如 'zh_CN', 'en_US'。
   *   @property {string | undefined} codeFontFamily - 代码块等宽字体。
   *   @property {number | undefined} fontSize - 编辑器字体大小。
   *   @property {string | undefined} fontFamily - 编辑器字体。
   *   @property {boolean | undefined} hideStatusBar - 是否隐藏状态栏。
   *   @property {string | undefined} customCSS - 自定义全局 CSS。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 更新后的外观配置对象。
   *     @property {number | undefined} mode - 外观模式。
   *     @property {string | undefined} themeDark - 暗色模式主题。
   *     @property {string | undefined} themeLight - 亮色模式主题。
   *     @property {Array<string> | undefined} darkThemes - 可选暗色主题列表。
   *     @property {Array<string> | undefined} lightThemes - 可选亮色主题列表。
   *     @property {Array<string> | undefined} icons - 已安装图标包列表。
   *     @property {string | undefined} lang - 界面语言。
   *     @property {number | undefined} fontSize - 编辑器字体大小。
   *     @property {string | undefined} fontFamily - 编辑器字体。
   *     @property {string | undefined} codeFontFamily - 代码块字体。
   *     @property {boolean | undefined} hideStatusBar - 是否隐藏状态栏。
   *     @property {string | undefined} customCSS - 自定义全局 CSS。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setAppearance(data) {
    return this._fetchWrapper('/api/setting/setAppearance', 'POST', data, true);
  }

  /**
   * 设置集市配置
   * Endpoint: `POST /api/setting/setBazaar`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean | undefined} trust - 是否信任所有社区插件和主题（跳过安全警告）。
   *   @property {boolean | undefined} petalDisabled - 是否禁用所有插件（花瓣）。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 更新后的集市配置对象。
   *     @property {boolean | undefined} trust - 是否信任所有社区包。
   *     @property {boolean | undefined} petalDisabled - 是否禁用所有插件。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setBazaar(data) {
    return this._fetchWrapper('/api/setting/setBazaar', 'POST', data, true);
  }

  /**
   * 设置编辑器配置
   * Endpoint: `POST /api/setting/setEditor`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean | undefined} allowHTMLBLockScript - 是否允许执行 HTML 块内脚本。
   *   @property {number | undefined} fontSize - 编辑器字体大小。
   *   @property {boolean | undefined} fontSizeScrollZoom - 字体大小是否支持滚轮缩放。
   *   @property {string | undefined} fontFamily - 编辑器字体。
   *   @property {boolean | undefined} codeSyntaxHighlightLineNum - 代码块是否显示行号。
   *   @property {number | undefined} codeTabSpaces - 代码块中 Tab 转换空格数，0表示不转换。
   *   @property {boolean | undefined} codeLineWrap - 代码块是否自动折行。
   *   @property {boolean | undefined} codeLigatures - 代码块是否启用连字。
   *   @property {boolean | undefined} displayBookmarkIcon - 是否显示书签图标。
   *   @property {boolean | undefined} displayNetImgMark - 是否显示网络图片角标。
   *   @property {number | undefined} generateHistoryInterval - 文档历史生成时间间隔（分钟）。
   *   @property {number | undefined} historyRetentionDays - 文档历史保留天数。
   *   @property {Array<string> | undefined} emoji - 常用表情符号列表。
   *   @property {boolean | undefined} virtualBlockRef - 是否启用虚拟引用。
   *   @property {string | undefined} virtualBlockRefExclude - 虚拟引用关键字排除列表（逗号分隔）。
   *   @property {string | undefined} virtualBlockRefInclude - 虚拟引用关键字包含列表（逗号分隔）。
   *   @property {number | undefined} blockRefDynamicAnchorTextMaxLen - 块引动态锚文本最大长度。
   *   @property {string | undefined} plantUMLServePath - PlantUML 服务地址。
   *   @property {boolean | undefined} fullWidth - 编辑器是否默认使用最大宽度。
   *   @property {string | undefined} katexMacros - KaTeX 宏定义 (JSON格式字符串)。
   *   @property {boolean | undefined} readOnly - 是否全局启用编辑器只读模式。
   *   @property {boolean | undefined} embedBlockBreadcrumb - 嵌入块是否显示面包屑。
   *   @property {boolean | undefined} listLogicalOutdent - 列表项在退格时是否进行逻辑反向缩进。
   *   @property {boolean | undefined} listItemDotNumberClickFocus - 是否允许通过单击列表项标记（点或数字）来聚焦块。
   *   @property {number | undefined} floatWindowMode - 浮窗触发模式，0：光标悬停，1：按住Ctrl悬停，2：不触发。
   *   @property {number | undefined} dynamicLoadBlocks - 动态加载块的数量，区间 [48, 1024]。
   *   @property {boolean | undefined} justify - 内容是否两端对齐。
   *   @property {boolean | undefined} rtl - 是否启用从右到左的文本显示。
   *   @property {boolean | undefined} spellcheck - 是否启用拼写检查。
   *   @property {boolean | undefined} onlySearchForDoc - 是否启用 '[[' 仅搜索文档块。
   *   @property {number | undefined} backlinkExpandCount - 反向链接面板中默认展开的项目数量。
   *   @property {number | undefined} backmentionExpandCount - 反链提及面板中默认展开的项目数量。
   *   @property {boolean | undefined} backlinkContainChildren - 计算反向链接时是否包含子块。
   *   @property {any | undefined} markdown - Markdown 解析和渲染相关的详细配置对象。具体结构请参考 util.Markdown。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {any | null} Data - 更新后的编辑器配置对象。结构与请求体类似。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setEditor(data) {
    return this._fetchWrapper('/api/setting/setEditor', 'POST', data, true);
  }

  /**
   * 设置编辑器只读模式
   * Endpoint: `POST /api/setting/setEditorReadOnly`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} readonly - 是否将编辑器设置为只读模式。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {null} Data - 此接口成功时不返回具体数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setEditorReadOnly(data) {
    return this._fetchWrapper('/api/setting/setEditorReadOnly', 'POST', data, true);
  }

  /**
   * 设置常用表情
   * Endpoint: `POST /api/setting/setEmoji`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} emoji - 新的常用表情符号列表。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {null} Data - 此接口成功时不返回具体数据，直接修改配置。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setEmoji(data) {
    return this._fetchWrapper('/api/setting/setEmoji', 'POST', data, true);
  }

  /**
   * 设置导出配置
   * Endpoint: `POST /api/setting/setExport`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean | undefined} paragraphBeginningSpace - 导出Markdown时段落开头是否空两格（中文排版）。
   *   @property {boolean | undefined} addTitle - 导出时是否自动添加文档标题。
   *   @property {number | undefined} blockRefMode - 内容块引用导出模式（Markdown）：2-锚文本块链, 3-仅锚文本, 4-块引转脚注+锚点哈希。
   *   @property {number | undefined} blockEmbedMode - 内容块嵌入导出模式（Markdown）：0-原始文本, 1-Blockquote。
   *   @property {string | undefined} blockRefTextLeft - 内容块引用导出锚文本左侧符号。
   *   @property {string | undefined} blockRefTextRight - 内容块引用导出锚文本右侧符号。
   *   @property {string | undefined} tagOpenMarker - 标签导出时的开始标记符，默认为 '#'。
   *   @property {string | undefined} tagCloseMarker - 标签导出时的结束标记符，默认为空字符串。
   *   @property {number | undefined} fileAnnotationRefMode - 文件标注引用导出模式：0-文件名-页码-锚文本，1-仅锚文本。
   *   @property {string | undefined} pandocBin - Pandoc 可执行文件路径。
   *   @property {boolean | undefined} markdownYFM - Markdown 导出时是否添加 YAML Front Matter。
   *   @property {boolean | undefined} inlineMemo - 导出时是否包含行级备忘录。
   *   @property {string | undefined} pdfFooter - PDF 导出时的页脚内容，可用占位符 %page 和 %pages。
   *   @property {string | undefined} docxTemplate - Docx 导出时使用的模板文件路径。
   *   @property {string | undefined} pdfWatermarkStr - PDF 导出时的水印文本或水印图片文件路径。
   *   @property {string | undefined} pdfWatermarkDesc - PDF 导出时的水印位置、大小和样式等描述。
   *   @property {string | undefined} imageWatermarkStr - 图片导出时的水印文本或水印图片文件路径。
   *   @property {string | undefined} imageWatermarkDesc - 图片导出时的水印位置、大小和样式等描述。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {any | null} Data - 更新后的导出配置对象。结构与请求体类似。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setExport(data) {
    return this._fetchWrapper('/api/setting/setExport', 'POST', data, true);
  }

  /**
   * 设置文件树配置
   * Endpoint: `POST /api/setting/setFiletree`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean | undefined} alwaysSelectOpenedFile - 打开文件时，文件树是否自动选中该文件。
   *   @property {boolean | undefined} openFilesUseCurrentTab - 是否总是在当前页签打开文件，而不是新页签。
   *   @property {string | undefined} refCreateSaveBox - 通过块引创建新文档时，默认保存到的笔记本ID。
   *   @property {string | undefined} refCreateSavePath - 通过块引创建新文档时，默认保存的路径。
   *   @property {string | undefined} docCreateSaveBox - 直接创建新文档时，默认保存到的笔记本ID。
   *   @property {string | undefined} docCreateSavePath - 直接创建新文档时，默认保存的路径。
   *   @property {number | undefined} maxListCount - 文件树中列出文档的最大数量限制。
   *   @property {number | undefined} maxOpenTabCount - 编辑器最大可打开的页签数量，范围 1-32。
   *   @property {boolean | undefined} allowCreateDeeper - 是否允许创建超过7层深度的子文档。
   *   @property {boolean | undefined} removeDocWithoutConfirm - 删除文档时是否不需要二次确认。
   *   @property {boolean | undefined} closeTabsOnStart - 启动思源笔记时是否关闭所有已打开的页签。
   *   @property {boolean | undefined} useSingleLineSave - 是否使用单行格式保存 .sy 文档和属性视图 .json 文件。
   *   @property {number | undefined} sort - 文件树默认排序方式的数字代码。具体含义需参考 util.SortMode* 常量。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {any | null} Data - 更新后的文件树配置对象。结构与请求体类似。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setFiletree(data) {
    return this._fetchWrapper('/api/setting/setFiletree', 'POST', data, true);
  }

  /**
   * 设置闪卡配置
   * Endpoint: `POST /api/setting/setFlashcard`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number | undefined} newCardLimit - 每日新建卡片上限。
   *   @property {number | undefined} reviewCardLimit - 每日复习卡片上限。
   *   @property {number | undefined} requestRetention - 期望记忆留存率 (FSRS)。
   *   @property {number | undefined} maximumInterval - 最大复习间隔天数 (FSRS)。
   *   @property {number | undefined} easyBonus - 简单奖励系数 (FSRS)。
   *   @property {number | undefined} hardInterval - 困难间隔系数 (FSRS)。
   *   @property {number | undefined} lapseInterval - 失误间隔系数 (FSRS)。
   *   @property {number | undefined} againInterval - 重来间隔系数 (FSRS)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 更新后的闪卡配置对象。
   *     @property {number} newCardLimit - 每日新建卡片上限。
   *     @property {number} reviewCardLimit - 每日复习卡片上限。
   *     @property {number} requestRetention - 期望记忆留存率。
   *     @property {number} maximumInterval - 最大复习间隔天数。
   *     @property {number} easyBonus - 简单奖励系数。
   *     @property {number} hardInterval - 困难间隔系数。
   *     @property {number} lapseInterval - 失误间隔系数。
   *     @property {number} againInterval - 重来间隔系数。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setFlashcard(data) {
    return this._fetchWrapper('/api/setting/setFlashcard', 'POST', data, true);
  }

  /**
   * 设置快捷键配置
   * Endpoint: `POST /api/setting/setKeymap`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {object} data - 包含各类快捷键映射的对象。
   *     @property {Record<string, string> | undefined} editor - 编辑器通用快捷键。键为命令ID，值为快捷键组合字符串。
   *     @property {Record<string, string> | undefined} protyleIR - Protyle (IR模式) 快捷键。
   *     @property {Record<string, string> | undefined} protyleSV - Protyle (SV模式) 快捷键。
   *     @property {Record<string, string> | undefined} protyleWYSIWYG - Protyle (所见即所得模式) 快捷键。
   *     @property {Record<string, string> | undefined} fileTree - 文件树快捷键。
   *     @property {Record<string, string> | undefined} notebook - 笔记本操作快捷键。
   *     @property {Record<string, string> | undefined} global - 全局快捷键。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {null} Data - 此接口成功时不返回具体数据，直接修改配置。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setKeymap(data) {
    return this._fetchWrapper('/api/setting/setKeymap', 'POST', data, true);
  }

  /**
   * 设置发布服务配置
   * Endpoint: `POST /api/setting/setPublish`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} enable - 是否启用发布服务。
   *   @property {number} port - 发布服务监听的端口号。
   *   @property {object} auth - Basic 认证配置。
   *     @property {boolean} enable - 是否启用 Basic 认证。
   *     @property {Array<object>} accounts - Basic 认证账户列表。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 包含更新后配置及服务端口的对象，初始化失败时 Data 可能为 null。
   *     @property {number} port - 发布服务实际监听的端口号 (如果成功初始化)。
   *     @property {object} publish - 详细的发布配置项。
   *       @property {boolean} enable - 是否启用发布服务。
   *       @property {number} port - 发布服务配置的端口号。
   *       @property {object} auth - Basic 认证配置。
   *         @property {boolean} enable - 是否启用 Basic 认证。
   *         @property {Array<object>} accounts - 账户列表。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setPublish(data) {
    return this._fetchWrapper('/api/setting/setPublish', 'POST', data, true);
  }

  /**
   * 设置搜索配置
   * Endpoint: `POST /api/setting/setSearch`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean | undefined} document - 搜索范围是否包含文档块。
   *   @property {boolean | undefined} heading - 搜索范围是否包含标题块。
   *   @property {boolean | undefined} list - 搜索范围是否包含列表块。
   *   @property {boolean | undefined} listItem - 搜索范围是否包含列表项块。
   *   @property {boolean | undefined} codeBlock - 搜索范围是否包含代码块。
   *   @property {boolean | undefined} mathBlock - 搜索范围是否包含数学公式块。
   *   @property {boolean | undefined} table - 搜索范围是否包含表格块。
   *   @property {boolean | undefined} blockquote - 搜索范围是否包含引用块。
   *   @property {boolean | undefined} superBlock - 搜索范围是否包含超级块。
   *   @property {boolean | undefined} paragraph - 搜索范围是否包含段落块。
   *   @property {boolean | undefined} htmlBlock - 搜索范围是否包含HTML块。
   *   @property {boolean | undefined} embedBlock - 搜索范围是否包含嵌入块。
   *   @property {boolean | undefined} databaseBlock - 搜索范围是否包含数据库块。
   *   @property {boolean | undefined} audioBlock - 搜索范围是否包含音频块。
   *   @property {boolean | undefined} videoBlock - 搜索范围是否包含视频块。
   *   @property {boolean | undefined} iframeBlock - 搜索范围是否包含IFrame块。
   *   @property {boolean | undefined} widgetBlock - 搜索范围是否包含挂件块。
   *   @property {number | undefined} limit - 搜索结果数量限制，最小32。
   *   @property {boolean | undefined} caseSensitive - 搜索时是否区分大小写。更改此项会重建索引。
   *   @property {boolean | undefined} name - 搜索时是否匹配块命名。
   *   @property {boolean | undefined} alias - 搜索时是否匹配块别名。
   *   @property {boolean | undefined} memo - 搜索时是否匹配块备注。
   *   @property {boolean | undefined} ial - 搜索时是否匹配IAL属性。
   *   @property {boolean | undefined} indexAssetPath - 是否索引资源文件路径。更改此项会重建索引。
   *   @property {boolean | undefined} backlinkMentionName - 反链提及中是否包含命名。
   *   @property {boolean | undefined} backlinkMentionAlias - 反链提及中是否包含别名。
   *   @property {boolean | undefined} backlinkMentionAnchor - 反链提及中是否包含锚文本。
   *   @property {boolean | undefined} backlinkMentionDoc - 反链提及中是否包含文档标题。
   *   @property {number | undefined} backlinkMentionKeywordsLimit - 反链提及的关键字数量限制。
   *   @property {boolean | undefined} virtualRefName - 虚拟引用是否作用于命名。更改此项会刷新虚拟引用缓存。
   *   @property {boolean | undefined} virtualRefAlias - 虚拟引用是否作用于别名。更改此项会刷新虚拟引用缓存。
   *   @property {boolean | undefined} virtualRefAnchor - 虚拟引用是否作用于锚文本。更改此项会刷新虚拟引用缓存。
   *   @property {boolean | undefined} virtualRefDoc - 虚拟引用是否作用于文档标题。更改此项会刷新虚拟引用缓存。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {any | null} Data - 更新后的搜索配置对象。结构与请求体类似。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSearch(data) {
    return this._fetchWrapper('/api/setting/setSearch', 'POST', data, true);
  }

  /**
   * 设置代码片段配置
   * Endpoint: `POST /api/setting/setSnippet`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean | undefined} enabledCSS - 是否启用所有自定义CSS代码片段。
   *   @property {boolean | undefined} enabledJS - 是否启用所有自定义JS代码片段。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 更新后的代码片段全局配置。
   *     @property {boolean} enabledCSS - 是否启用所有自定义CSS代码片段。
   *     @property {boolean} enabledJS - 是否启用所有自定义JS代码片段。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setConfSnippet(data) {
    return this._fetchWrapper('/api/setting/setSnippet', 'POST', data, true);
  }

  /**
   * 获取代码片段
   * Endpoint: `POST /api/snippet/getSnippet`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {"js" | "css" | "all"} type - 要获取的代码片段类型：'js', 'css', 或 'all'。
   *   @property {number} enabled - 根据启用状态进行过滤：0-仅禁用, 1-仅启用, 2-全部。
   *   @property {string | undefined} keyword - 可选的搜索关键字，用于在代码片段的名称和内容中查找（不区分大小写）。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 包含代码片段列表的对象，获取失败时为 null。
   *     @property {Array<object>} snippets - 符合过滤条件的代码片段对象数组。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getSnippet(data) {
    return this._fetchWrapper('/api/snippet/getSnippet', 'POST', data, true);
  }

  /**
   * 设置代码片段列表
   * Endpoint: `POST /api/snippet/setSnippet`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<object>} snippets - 包含一个或多个代码片段对象的数组。此数组将成为操作完成后系统中全新的、完整的代码片段列表。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {null} Data - 此接口成功时不返回具体数据，直接修改配置。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSnippet(data) {
    return this._fetchWrapper('/api/snippet/setSnippet', 'POST', data, true);
  }

  /**
   * 移除代码片段
   * Endpoint: `POST /api/snippet/removeSnippet`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要移除的代码片段的唯一ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - API 执行结果的状态码，0 表示成功，其他表示失败。
   *   @property {string} Msg - API 执行结果的描述信息。
   *   @property {object | null} Data - 包含被移除代码片段信息的对象，操作失败或未找到时可能为 null 或不返回 Data。
   *     @property {string} id - 被移除代码片段的唯一ID。
   *     @property {string} name - 被移除代码片段的名称。
   *     @property {"js" | "css"} type - 被移除代码片段的类型。
   *     @property {boolean} enabled - 被移除代码片段的启用状态。
   *     @property {string} content - 被移除代码片段的内容。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeSnippet(data) {
    return this._fetchWrapper('/api/snippet/removeSnippet', 'POST', data, true);
  }

  /**
   * 刷新事务队列
   * Endpoint: `POST /api/sqlite/flushTransaction`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async flushTransaction(data) {
    return this._fetchWrapper('/api/sqlite/flushTransaction', 'POST', data, true);
  }

  /**
   * 获取所有已保存的搜索标准
   * Endpoint: `POST /api/storage/getCriteria`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {Array<object>} Data - 已保存的搜索标准列表。每个元素代表一个搜索标准，具体字段请参考思源笔记内核 model.Criterion 结构。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getCriteria(data) {
    return this._fetchWrapper('/api/storage/getCriteria', 'POST', data, true);
  }

  /**
   * 获取所有本地存储项
   * Endpoint: `POST /api/storage/getLocalStorage`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {Record<string, any>} Data - 包含 LocalStorage 所有键值对的对象。值的类型可能多样，取决于存储时的数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getLocalStorage(data) {
    return this._fetchWrapper('/api/storage/getLocalStorage', 'POST', data, true);
  }

  /**
   * 获取最近打开的文档列表
   * Endpoint: `POST /api/storage/getRecentDocs`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {Array<object>} Data - 最近打开的文档列表。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getRecentDocs(data) {
    return this._fetchWrapper('/api/storage/getRecentDocs', 'POST', data, true);
  }

  /**
   * 移除搜索标准
   * Endpoint: `POST /api/storage/removeCriterion`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} name - 要移除的搜索标准的名称。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeCriterion(data) {
    return this._fetchWrapper('/api/storage/removeCriterion', 'POST', data, true);
  }

  /**
   * 批量移除本地存储项
   * Endpoint: `POST /api/storage/removeLocalStorageVals`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} keys - 要移除的 LocalStorage 项目的键名数组。
   *   @property {string} app - 发起操作的 App ID，用于事件广播。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeLocalStorageVals(data) {
    return this._fetchWrapper('/api/storage/removeLocalStorageVals', 'POST', data, true);
  }

  /**
   * 保存搜索标准
   * Endpoint: `POST /api/storage/setCriterion`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {object} criterion - 要保存或更新的搜索标准对象。具体字段请参考思源笔记内核 model.Criterion 结构。
   *     @property {string} name - 搜索标准的唯一名称。
   *     @property {string | undefined} id - 搜索标准的ID，通常在更新时提供。
   *     @property {string | undefined} box - 笔记本 ID。
   *     @property {string | undefined} type - 类型，例如 'doc', 'asset' 等。
   *     @property {string | undefined} query - 搜索关键词或 SQL 查询语句。
   *     @property {number | undefined} sort - 排序方式。
   *     @property {number | undefined} group - 分组方式。
   *     @property {any | undefined} types - 类型筛选条件，具体结构未知，可能是一个对象或数组。
   *     @property {Array<any> | undefined} customSort - 自定义排序规则，具体结构未知。
   *     @property {number | undefined} filter - 过滤条件。
   *     @property {Array<string> | undefined} docIDs - 文档 ID 列表。
   *     @property {Array<string> | undefined} blockIDs - 块 ID 列表。
   *     @property {Array<string> | undefined} tagIDs - 标签 ID 列表。
   *     @property {Array<string> | undefined} attrIDs - 属性 ID 列表。
   *     @property {Array<string> | undefined} refs - 引用 ID 列表。
   *     @property {string | undefined} parentID - 父块 ID。
   *     @property {string | undefined} rootID - 根块 ID。
   *     @property {string | undefined} kwd - 关键词。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setCriterion(data) {
    return this._fetchWrapper('/api/storage/setCriterion', 'POST', data, true);
  }

  /**
   * 整体设置本地存储
   * Endpoint: `POST /api/storage/setLocalStorage`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Record<string, any>} val - 一个对象，其键值对将完全替换现有的 LocalStorage 内容。
   *   @property {string} app - 发起操作的 App ID，用于事件广播。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setLocalStorage(data) {
    return this._fetchWrapper('/api/storage/setLocalStorage', 'POST', data, true);
  }

  /**
   * 设置单个本地存储项
   * Endpoint: `POST /api/storage/setLocalStorageVal`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} key - 要设置的 LocalStorage 项目的键名。
   *   @property {any} val - 要设置的 LocalStorage 项目的值，可以是任意类型，但最终会序列化为字符串存储。
   *   @property {string} app - 发起操作的 App ID，用于事件广播。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setLocalStorageVal(data) {
    return this._fetchWrapper('/api/storage/setLocalStorageVal', 'POST', data, true);
  }

  /**
   * 创建云端同步目录
   * Endpoint: `POST /api/sync/createCloudSyncDir`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} name - 要创建的云端同步目录的名称。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。如果创建失败，Data 可能包含 { closeTimeout: 5000 }。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async createCloudSyncDir(data) {
    return this._fetchWrapper('/api/sync/createCloudSyncDir', 'POST', data, true);
  }

  /**
   * 导出S3同步配置
   * Endpoint: `POST /api/sync/exportSyncProviderS3`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {object | null} Data - 成功时返回导出文件的名称和路径，失败时为 null。
   *     @property {string} name - 导出的文件名 (不含 .zip 后缀)。
   *     @property {string} zip - 导出的 .zip 文件在服务端的临时路径，前端可据此下载。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportSyncProviderS3(data) {
    return this._fetchWrapper('/api/sync/exportSyncProviderS3', 'POST', data, true);
  }

  /**
   * 导出WebDAV同步配置
   * Endpoint: `POST /api/sync/exportSyncProviderWebDAV`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {object | null} Data - 成功时返回导出文件的名称和路径，失败时为 null。
   *     @property {string} name - 导出的文件名 (不含 .zip 后缀)。
   *     @property {string} zip - 导出的 .zip 文件在服务端的临时路径，前端可据此下载。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportSyncProviderWebDAV(data) {
    return this._fetchWrapper('/api/sync/exportSyncProviderWebDAV', 'POST', data, true);
  }

  /**
   * 检查启动时同步状态
   * Endpoint: `POST /api/sync/getBootSync`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码。0 表示未满足特定条件（非管理员、同步未启用、启动时同步未成功），1 表示启动时同步成功。其他值表示失败。注意这里的 Code 含义比较特殊。 
   *   @property {string} Msg - 接口返回的消息。Code 为 1 时，Msg 为提示信息（如 '启动时同步数据完毕'）。Code 为 0 时通常为空。 
   *   @property {null} Data - 此接口不通过 Data 返回数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getBootSync(data) {
    return this._fetchWrapper('/api/sync/getBootSync', 'POST', data, true);
  }

  /**
   * 获取当前同步状态信息
   * Endpoint: `POST /api/sync/getSyncInfo`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {object | null} Data - 成功时返回同步状态信息对象，失败时为 null。
   *     @property {string} synced - 最后成功同步的时间戳 (格式如 'YYYY-MM-DD HH:mm:ss')，如果从未同步则为空字符串。
   *     @property {string} stat - 当前的同步状态文本描述。如果同步未启用，则为 '同步未启用' 或类似提示。
   *     @property {Array<string>} kernels - 当前在线的其他内核实例的 ID 列表。
   *     @property {string} kernel - 当前内核实例的 ID。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getSyncInfo(data) {
    return this._fetchWrapper('/api/sync/getSyncInfo', 'POST', data, true);
  }

  /**
   * 导入S3同步配置
   * Endpoint: `POST /api/sync/importSyncProviderS3`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {object | null} Data - 成功时返回导入的 S3 配置对象，失败时为 null。
   *     @property {object} s3 - 导入并应用成功的 S3 配置对象。部分敏感字段可能不会完整返回或不应直接展示。
   *       @property {string} endpoint - S3 服务的 Endpoint。如：s3.amazonaws.com
   *       @property {string} accessKeyID - S3 Access Key ID。敏感信息，通常前端不直接展示。
   *       @property {string} secretAccessKey - S3 Secret Access Key。敏感信息，通常前端不直接展示。
   *       @property {string} bucket - S3 Bucket 名称。
   *       @property {string} region - S3 Bucket 所在区域。如：us-east-1
   *       @property {string | undefined} cdn - CDN 地址，可选。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async importSyncProviderS3(data) {
    return this._fetchWrapper('/api/sync/importSyncProviderS3', 'POST', data, true);
  }

  /**
   * 导入WebDAV同步配置
   * Endpoint: `POST /api/sync/importSyncProviderWebDAV`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {object | null} Data - 成功时返回导入的 WebDAV 配置对象，失败时为 null。
   *     @property {object} webdav - 导入并应用成功的 WebDAV 配置对象。部分敏感字段可能不会完整返回或不应直接展示。
   *       @property {string} endpoint - WebDAV 服务的 URL。如：https://dav.example.com/dav
   *       @property {string} username - WebDAV 用户名。敏感信息，通常前端不直接展示。
   *       @property {string} password - WebDAV 密码。敏感信息，通常前端不直接展示。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async importSyncProviderWebDAV(data) {
    return this._fetchWrapper('/api/sync/importSyncProviderWebDAV', 'POST', data, true);
  }

  /**
   * 列出云端同步目录
   * Endpoint: `POST /api/sync/listCloudSyncDir`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，1 表示获取失败（如网络错误、配置错误）。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串，失败时包含错误信息。
   *   @property {object | null} Data - 成功时返回包含目录列表和总大小等信息的对象。如果获取失败（Code为1），Data 可能包含 { closeTimeout: 5000 }。
   *     @property {Array<object>} syncDirs - 云端同步目录列表。
   *     @property {string} hSize - 所有同步目录的总大小的人类可读格式。
   *     @property {string} checkedSyncDir - 当前内核配置中正在使用的云端同步目录名称。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async listCloudSyncDir(data) {
    return this._fetchWrapper('/api/sync/listCloudSyncDir', 'POST', data, true);
  }

  /**
   * 执行启动时数据同步
   * Endpoint: `POST /api/sync/performBootSync`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码。model.BootSyncSucc (通常为0或1，表示启动同步的结果) 会被赋给 Code。具体含义需参考内核实现。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 此接口不通过 Data 返回具体数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async performBootSync(data) {
    return this._fetchWrapper('/api/sync/performBootSync', 'POST', data, true);
  }

  /**
   * 执行数据同步
   * Endpoint: `POST /api/sync/performSync`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean | undefined} mobileSwitch - 是否为移动端前后台切换触发的同步。如果是 true，且用户未登录或同步未启用，则不执行操作。仅对 Android 端有特殊逻辑。 
   *   @property {boolean | undefined} upload - 仅在同步模式为3 (云端同步-完全手动) 时有效。true 表示上传，false 表示下载。如果同步模式为3但此参数未提供，则不执行操作。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功接收请求并开始处理（同步是异步过程），其他表示接收参数错误等。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 此接口不通过 Data 返回具体数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async performSync(data) {
    return this._fetchWrapper('/api/sync/performSync', 'POST', data, true);
  }

  /**
   * 移除云端同步目录
   * Endpoint: `POST /api/sync/removeCloudSyncDir`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} name - 要移除的云端同步目录的名称。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。如果移除失败，Data 可能包含 { closeTimeout: 5000 }。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeCloudSyncDir(data) {
    return this._fetchWrapper('/api/sync/removeCloudSyncDir', 'POST', data, true);
  }

  /**
   * 设置当前云端同步目录
   * Endpoint: `POST /api/sync/setCloudSyncDir`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} name - 要设置为当前同步目录的云端目录名称。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。如果设置失败，Data 可能包含 { closeTimeout: 5000 }。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setCloudSyncDir(data) {
    return this._fetchWrapper('/api/sync/setCloudSyncDir', 'POST', data, true);
  }

  /**
   * 设置是否启用同步
   * Endpoint: `POST /api/sync/setSyncEnable`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} enabled - 是否启用同步。true 为启用，false 为禁用。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncEnable(data) {
    return this._fetchWrapper('/api/sync/setSyncEnable', 'POST', data, true);
  }

  /**
   * 设置同步是否生成冲突文档
   * Endpoint: `POST /api/sync/setSyncGenerateConflictDoc`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} generateConflictDoc - 是否生成冲突文档。true 为生成，false 为不生成。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncGenerateConflictDoc(data) {
    return this._fetchWrapper('/api/sync/setSyncGenerateConflictDoc', 'POST', data, true);
  }

  /**
   * 设置自动同步间隔
   * Endpoint: `POST /api/sync/setSyncInterval`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} syncInterval - 自动同步的时间间隔，单位为分钟。例如，输入 5 表示每5分钟同步一次。最小值为1分钟。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncInterval(data) {
    return this._fetchWrapper('/api/sync/setSyncInterval', 'POST', data, true);
  }

  /**
   * 设置同步模式
   * Endpoint: `POST /api/sync/setSyncMode`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} syncMode - 同步模式。例如：0-自动, 1-手动, 3-云端完全手动。具体可用值请参考内核实现或相关文档。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncMode(data) {
    return this._fetchWrapper('/api/sync/setSyncMode', 'POST', data, true);
  }

  /**
   * 设置同步感知
   * Endpoint: `POST /api/sync/setSyncPerception`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} syncPerception - 是否启用同步感知。true 为启用，false 为禁用。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncPerception(data) {
    return this._fetchWrapper('/api/sync/setSyncPerception', 'POST', data, true);
  }

  /**
   * 设置同步服务提供商
   * Endpoint: `POST /api/sync/setSyncProvider`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} syncProvider - 同步服务提供商的标识符。例如：'S3', 'WebDAV', 'LocalFolder'。具体可用值请参考内核实现。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncProvider(data) {
    return this._fetchWrapper('/api/sync/setSyncProvider', 'POST', data, true);
  }

  /**
   * 设置本地文件夹同步路径
   * Endpoint: `POST /api/sync/setSyncProviderLocal`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} syncProviderLocalPath - 本地同步文件夹的绝对路径。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncProviderLocal(data) {
    return this._fetchWrapper('/api/sync/setSyncProviderLocal', 'POST', data, true);
  }

  /**
   * 设置S3同步配置
   * Endpoint: `POST /api/sync/setSyncProviderS3`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} s3AccessKeyID - S3 Access Key ID.
   *   @property {string} s3SecretAccessKey - S3 Secret Access Key.
   *   @property {string} s3Endpoint - S3 服务的 Endpoint。例如：s3.amazonaws.com
   *   @property {string} s3Region - S3 Bucket 所在区域。例如：us-east-1
   *   @property {string} s3Bucket - S3 Bucket 名称。
   *   @property {string | undefined} s3CDN - S3 关联的 CDN 地址，可选。如果为空字符串，表示不使用 CDN。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncProviderS3(data) {
    return this._fetchWrapper('/api/sync/setSyncProviderS3', 'POST', data, true);
  }

  /**
   * 设置WebDAV同步配置
   * Endpoint: `POST /api/sync/setSyncProviderWebDAV`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} webdavEndpoint - WebDAV 服务的 URL。例如：https://dav.example.com/remote.php/dav
   *   @property {string} webdavUsername - WebDAV 用户名。
   *   @property {string} webdavPassword - WebDAV 密码。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} Code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} Msg - 接口返回的消息，成功时通常为空字符串。
   *   @property {null} Data - 接口成功执行时，Data 固定为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setSyncProviderWebDAV(data) {
    return this._fetchWrapper('/api/sync/setSyncProviderWebDAV', 'POST', data, true);
  }

  /**
   * 添加 Microsoft Defender 排除项
   * Endpoint: `POST /api/system/addMicrosoftDefenderExclusion`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async addMicrosoftDefenderExclusion(data) {
    return this._fetchWrapper('/api/system/addMicrosoftDefenderExclusion', 'POST', data, true);
  }

  /**
   * 获取启动进度
   * Endpoint: `GET /api/system/bootProgress`
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {object | null} data - 启动进度信息，启动完成或未开始时可能为 null
   *     @property {number} progress - 启动进度百分比，例如 89
   *     @property {number} state - 当前启动状态码
   *     @property {string} details - 当前启动状态的详细描述文本
   * @throws {Error} If the request fails or the server returns an error.
   */
  async bootProgress(data) {
    return this._fetchWrapper('/api/system/bootProgress', 'GET', data, false);
  }

  /**
   * 检查更新
   * Endpoint: `POST /api/system/checkUpdate`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} showMsg - 是否在检查后显示提示消息给用户
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null，更新信息通过 WebSocket 推送或直接在 UI 弹出
   * @throws {Error} If the request fails or the server returns an error.
   */
  async checkUpdate(data) {
    return this._fetchWrapper('/api/system/checkUpdate', 'POST', data, true);
  }

  /**
   * 检查工作空间目录
   * Endpoint: `POST /api/system/checkWorkspaceDir`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 要检查的目录绝对路径
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功，-1 表示无效路径或检查失败
   *   @property {string} msg - 错误或提示信息
   *   @property {object | null} data - 检查结果，code 非 0 时可能为 null
   *     @property {boolean} isWorkspace - 该路径是否已经是或可以成为一个有效的工作空间
   * @throws {Error} If the request fails or the server returns an error.
   */
  async checkWorkspaceDir(data) {
    return this._fetchWrapper('/api/system/checkWorkspaceDir', 'POST', data, true);
  }

  /**
   * 创建工作空间目录
   * Endpoint: `POST /api/system/createWorkspaceDir`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 要创建工作空间的目录绝对路径
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async createWorkspaceDir(data) {
    return this._fetchWrapper('/api/system/createWorkspaceDir', 'POST', data, true);
  }

  /**
   * 获取当前服务器时间
   * Endpoint: `POST /api/system/currentTime`
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {number} data - 当前的 Unix 时间戳 (毫秒)
   * @throws {Error} If the request fails or the server returns an error.
   */
  async currentTime(data) {
    return this._fetchWrapper('/api/system/currentTime', 'POST', data, false);
  }

  /**
   * 退出程序
   * Endpoint: `POST /api/system/exit`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exit(data) {
    return this._fetchWrapper('/api/system/exit', 'POST', data, true);
  }

  /**
   * 导出配置
   * Endpoint: `POST /api/system/exportConf`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {object} data - data
   *     @property {string} path - 导出的配置文件 `conf.json` 所在临时目录的绝对路径。前端通常会触发下载此目录下的 `conf.json`。
   *     @property {string} name - 导出的配置文件名，通常是 `conf.json`
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportConf(data) {
    return this._fetchWrapper('/api/system/exportConf', 'POST', data, true);
  }

  /**
   * 导出日志
   * Endpoint: `POST /api/system/exportLog`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {object} data - data
   *     @property {string} zip - 导出的日志压缩文件 `log.zip` 的绝对路径。前端通常会触发此文件的下载。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async exportLog(data) {
    return this._fetchWrapper('/api/system/exportLog', 'POST', data, true);
  }

  /**
   * 获取验证码
   * Endpoint: `GET /api/system/getCaptcha`
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number | undefined} code - 通常不适用，因为响应是图片流
   *   @property {string | undefined} msg - 通常不适用
   *   @property {string | undefined} data - 通常不适用。实际是图片二进制数据。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async GetCaptcha(data) {
    return this._fetchWrapper('/api/system/getCaptcha', 'GET', data, false);
  }

  /**
   * 获取更新日志
   * Endpoint: `POST /api/system/getChangelog`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {object} data - data
   *     @property {boolean} show - 是否需要显示更新日志（例如，新版本首次启动后）
   *     @property {string} html - 更新日志的 HTML 内容
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getChangelog(data) {
    return this._fetchWrapper('/api/system/getChangelog', 'POST', data, true);
  }

  /**
   * 获取所有配置
   * Endpoint: `POST /api/system/getConf`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {any} data - 包含所有配置项的对象，结构复杂，请参考 `siyuan/kernel/conf/conf.go` 中的 `Conf` 结构体。例如 `data.appearance.mode` 等。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getConf(data) {
    return this._fetchWrapper('/api/system/getConf', 'POST', data, true);
  }

  /**
   * 获取 Emoji 配置
   * Endpoint: `POST /api/system/getEmojiConf`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {Array<object>} data - Emoji 配置数组，每个元素是一个 Emoji 分组
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getEmojiConf(data) {
    return this._fetchWrapper('/api/system/getEmojiConf', 'POST', data, true);
  }

  /**
   * 获取移动端工作空间列表
   * Endpoint: `POST /api/system/getMobileWorkspaces`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {Array<object>} data - 移动端工作空间列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getMobileWorkspaces(data) {
    return this._fetchWrapper('/api/system/getMobileWorkspaces', 'POST', data, true);
  }

  /**
   * 获取网络配置
   * Endpoint: `POST /api/system/getNetwork`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {object} data - data
   *     @property {string} proxy - 网络代理配置字符串，例如 'socks5://127.0.0.1:1080' 或空字符串
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getNetwork(data) {
    return this._fetchWrapper('/api/system/getNetwork', 'POST', data, true);
  }

  /**
   * 获取系统字体列表
   * Endpoint: `POST /api/system/getSysFonts`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {Array<object>} data - 系统字体列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getSysFonts(data) {
    return this._fetchWrapper('/api/system/getSysFonts', 'POST', data, true);
  }

  /**
   * 获取当前工作空间信息
   * Endpoint: `POST /api/system/getWorkspaceInfo`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {object} data - data
   *     @property {string} workspaceDir - 当前工作空间的绝对路径
   *     @property {string} siyuanVer - 当前思源笔记的版本号
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getWorkspaceInfo(data) {
    return this._fetchWrapper('/api/system/getWorkspaceInfo', 'POST', data, true);
  }

  /**
   * 获取所有工作空间列表
   * Endpoint: `POST /api/system/getWorkspaces`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {Array<object>} data - 工作空间列表
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getWorkspaces(data) {
    return this._fetchWrapper('/api/system/getWorkspaces', 'POST', data, true);
  }

  /**
   * 忽略添加 Microsoft Defender 排除项
   * Endpoint: `POST /api/system/ignoreAddMicrosoftDefenderExclusion`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async ignoreAddMicrosoftDefenderExclusion(data) {
    return this._fetchWrapper('/api/system/ignoreAddMicrosoftDefenderExclusion', 'POST', data, true);
  }

  /**
   * 导入配置
   * Endpoint: `POST /api/system/importConf`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {any} file - 上传的 `conf.json` 文件。通常通过 FormData 提交。`z.instanceof(File)` 在此场景不适用，因为这是后端定义。前端应使用 `FormData`。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async importConf(data) {
    return this._fetchWrapper('/api/system/importConf', 'POST', data, true);
  }

  /**
   * 登录授权
   * Endpoint: `POST /api/system/loginAuth`
   * @param {object} data - Request payload
   *   @property {string | undefined} authcode - 访问授权码 (如果设置了)
   *   @property {string | undefined} captcha - 图片验证码的识别结果 (如果需要验证码)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功，其他表示失败 (如授权码错误、验证码错误等)
   *   @property {string} msg - 错误或提示信息
   *   @property {null} data - 成功时为 null，失败时也可能为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async LoginAuth(data) {
    return this._fetchWrapper('/api/system/loginAuth', 'POST', data, false);
  }

  /**
   * 退出登录
   * Endpoint: `POST /api/system/logoutAuth`
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async LogoutAuth(data) {
    return this._fetchWrapper('/api/system/logoutAuth', 'POST', data, false);
  }

  /**
   * 重新加载UI
   * Endpoint: `POST /api/system/reloadUI`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async reloadUI(data) {
    return this._fetchWrapper('/api/system/reloadUI', 'POST', data, true);
  }

  /**
   * 移除工作空间
   * Endpoint: `POST /api/system/removeWorkspaceDir`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 要移除的工作空间的绝对路径
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeWorkspaceDir(data) {
    return this._fetchWrapper('/api/system/removeWorkspaceDir', 'POST', data, true);
  }

  /**
   * 物理删除工作空间
   * Endpoint: `POST /api/system/removeWorkspaceDirPhysically`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<string>} paths - 要物理删除的工作空间的绝对路径列表
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeWorkspaceDirPhysically(data) {
    return this._fetchWrapper('/api/system/removeWorkspaceDirPhysically', 'POST', data, true);
  }

  /**
   * 设置 API 令牌
   * Endpoint: `POST /api/system/setAPIToken`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} token - 新的 API 令牌。如果为空字符串，则表示清空令牌。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setAPIToken(data) {
    return this._fetchWrapper('/api/system/setAPIToken', 'POST', data, true);
  }

  /**
   * 设置访问授权码
   * Endpoint: `POST /api/system/setAccessAuthCode`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} code - 新的访问授权码。如果为空字符串，则表示清空授权码。
   *   @property {boolean | undefined} permanent - 是否永久有效（此参数在后端实现中可能未直接使用，主要通过 code 是否为空判断）
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setAccessAuthCode(data) {
    return this._fetchWrapper('/api/system/setAccessAuthCode', 'POST', data, true);
  }

  /**
   * 设置外观模式
   * Endpoint: `POST /api/system/setAppearanceMode`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number} mode - 外观模式：0 表示亮色 (Light)，1 表示暗色 (Dark)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setAppearanceMode(data) {
    return this._fetchWrapper('/api/system/setAppearanceMode', 'POST', data, true);
  }

  /**
   * 设置开机自启动
   * Endpoint: `POST /api/system/setAutoLaunch`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} autoLaunch - 是否开机自启动
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setAutoLaunch(data) {
    return this._fetchWrapper('/api/system/setAutoLaunch', 'POST', data, true);
  }

  /**
   * 设置自动下载并安装更新包
   * Endpoint: `POST /api/system/setDownloadInstallPkg`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} downloadInstallPkg - 是否自动下载并安装更新包
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setDownloadInstallPkg(data) {
    return this._fetchWrapper('/api/system/setDownloadInstallPkg', 'POST', data, true);
  }

  /**
   * 设置跟随系统锁屏
   * Endpoint: `POST /api/system/setFollowSystemLockScreen`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} follow - 是否跟随系统锁屏
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setFollowSystemLockScreen(data) {
    return this._fetchWrapper('/api/system/setFollowSystemLockScreen', 'POST', data, true);
  }

  /**
   * 设置 Google Analytics 追踪
   * Endpoint: `POST /api/system/setGoogleAnalytics`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} enabled - 是否启用 Google Analytics
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setGoogleAnalytics(data) {
    return this._fetchWrapper('/api/system/setGoogleAnalytics', 'POST', data, true);
  }

  /**
   * 设置网络代理
   * Endpoint: `POST /api/system/setNetworkProxy`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} proxy - 代理服务器地址，例如 'http://127.0.0.1:7890', 'socks5://127.0.0.1:1080'。如果为空字符串，则表示清除代理设置。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setNetworkProxy(data) {
    return this._fetchWrapper('/api/system/setNetworkProxy', 'POST', data, true);
  }

  /**
   * 设置网络服务
   * Endpoint: `POST /api/system/setNetworkServe`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {boolean} serve - 是否启用网络服务
   *   @property {string} port - 网络服务端口号，字符串形式，例如 '6806'
   *   @property {string} accessPermission - 网络访问权限：'lan' (仅局域网), 'wan' (允许公网，需谨慎), 'localhost' (仅本机)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setNetworkServe(data) {
    return this._fetchWrapper('/api/system/setNetworkServe', 'POST', data, true);
  }

  /**
   * 设置 UI 布局
   * Endpoint: `POST /api/system/setUILayout`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} layout - UI 布局模式的标识符字符串
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setUILayout(data) {
    return this._fetchWrapper('/api/system/setUILayout', 'POST', data, true);
  }

  /**
   * 设置当前工作空间
   * Endpoint: `POST /api/system/setWorkspaceDir`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 要切换到的工作空间的绝对路径
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async setWorkspaceDir(data) {
    return this._fetchWrapper('/api/system/setWorkspaceDir', 'POST', data, true);
  }

  /**
   * 添加 UI 进程信息
   * Endpoint: `POST /api/system/uiproc`
   * @param {object} data - Request payload
   *   @property {number | undefined} pid - UI 进程的 PID (可选)
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {null} data - 成功时总是为 null
   * @throws {Error} If the request fails or the server returns an error.
   */
  async addUIProcess(data) {
    return this._fetchWrapper('/api/system/uiproc', 'POST', data, false);
  }

  /**
   * 获取版本号
   * Endpoint: `GET /api/system/version`
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功
   *   @property {string} msg - 错误信息
   *   @property {string} data - 当前思源笔记的版本号字符串，例如 '2.10.0'
   * @throws {Error} If the request fails or the server returns an error.
   */
  async version(data) {
    return this._fetchWrapper('/api/system/version', 'GET', data, false);
  }

  /**
   * 获取所有标签列表
   * Endpoint: `POST /api/tag/getTag`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {number | undefined} sort - 可选的排序模式。0: 按标签引用计数降序, 1: 按标签字符升序, 2: 按标签字符降序, 3: 按最近使用升序, 4: 按最近使用降序, 5: 按创建时间升序, 6: 按创建时间降序。如果提供此参数，会更新并保存全局标签排序配置。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功。
   *   @property {string} msg - 错误信息，成功时为空字符串。
   *   @property {Array<object> | null} data - 成功时返回标签对象数组，失败时可能为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async getTag(data) {
    return this._fetchWrapper('/api/tag/getTag', 'POST', data, true);
  }

  /**
   * 移除标签
   * Endpoint: `POST /api/tag/removeTag`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} label - 要移除的标签的名称。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功，-1 表示失败。
   *   @property {string} msg - 错误信息。
   *   @property {object | null} data - 成功时为 null，失败时可能包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 操作失败时，前端弹窗的关闭延时（毫秒）。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async removeTag(data) {
    return this._fetchWrapper('/api/tag/removeTag', 'POST', data, true);
  }

  /**
   * 重命名标签
   * Endpoint: `POST /api/tag/renameTag`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} oldLabel - 要重命名的旧标签名称。
   *   @property {string} newLabel - 新的标签名称。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功，-1 表示失败。
   *   @property {string} msg - 错误信息。
   *   @property {object | null} data - 成功时为 null，失败时可能包含 closeTimeout。
   *     @property {number | undefined} closeTimeout - 操作失败时，前端弹窗的关闭延时（毫秒）。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renameTag(data) {
    return this._fetchWrapper('/api/tag/renameTag', 'POST', data, true);
  }

  /**
   * 文档另存为模板
   * Endpoint: `POST /api/template/docSaveAsTemplate`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要作为模板保存的文档ID。
   *   @property {string} name - 模板的名称。
   *   @property {boolean} overwrite - 如果已存在同名模板，是否覆盖。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功，其他表示失败。
   *   @property {string} msg - 错误或成功信息。
   *   @property {null} data - 成功时总是为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async docSaveAsTemplate(data) {
    return this._fetchWrapper('/api/template/docSaveAsTemplate', 'POST', data, true);
  }

  /**
   * 渲染模板
   * Endpoint: `POST /api/template/render`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} path - 模板文件的绝对路径。
   *   @property {string} id - 可选的上下文块ID，用于模板内获取该块的信息。
   *   @property {boolean | undefined} preview - 是否为预览模式，默认为 false。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功。
   *   @property {string} msg - 错误信息。
   *   @property {object | null} data - 成功时返回包含路径和渲染后内容的对象，失败时为 null。
   *     @property {string} path - 渲染的模板文件路径。
   *     @property {string} content - 渲染后的模板内容 (HTML 字符串)。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renderTemplate(data) {
    return this._fetchWrapper('/api/template/render', 'POST', data, true);
  }

  /**
   * 渲染 Sprig 模板字符串
   * Endpoint: `POST /api/template/renderSprig`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} template - 包含 Sprig 模板语法的字符串。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功。
   *   @property {string} msg - 错误信息。
   *   @property {string | null} data - 渲染后的字符串内容，失败时为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async renderSprig(data) {
    return this._fetchWrapper('/api/template/renderSprig', 'POST', data, true);
  }

  /**
   * 执行事务操作
   * Endpoint: `POST /api/transactions`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {Array<object>} transactions - 一个或多个事务对象的数组，至少包含一个事务。
   *   @property {number} reqId - 必需，请求的唯一ID (通常是客户端生成的时间戳，毫秒级)。
   *   @property {string} app - 必需，发起请求的应用标识 (例如 "SiYuan")。
   *   @property {string} session - 必需，当前会话ID (例如前端的 WebSocket clientID)。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功。其他值表示不同类型的错误。
   *   @property {string} msg - 错误或成功信息。成功时通常为空字符串。
   *   @property {Array<object> | null} data - 成功时返回处理后的事务数组。失败或无数据时为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async performTransactions(data) {
    return this._fetchWrapper('/api/transactions', 'POST', data, true);
  }

  /**
   * 重新加载属性视图
   * Endpoint: `POST /api/ui/reloadAttributeView`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要重新加载的属性视图的 ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功。
   *   @property {string} msg - 错误信息，成功时为空字符串。
   *   @property {null} data - 成功时总是为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async reloadAttributeView(data) {
    return this._fetchWrapper('/api/ui/reloadAttributeView', 'POST', data, true);
  }

  /**
   * 重新加载文件树
   * Endpoint: `POST /api/ui/reloadFiletree`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功。
   *   @property {string} msg - 错误信息，成功时为空字符串。
   *   @property {null} data - 成功时总是为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async reloadFiletree(data) {
    return this._fetchWrapper('/api/ui/reloadFiletree', 'POST', data, true);
  }

  /**
   * 重新加载编辑器
   * Endpoint: `POST /api/ui/reloadProtyle`
   * Requires authentication.
   * @param {object} data - Request payload
   *   @property {string} id - 要重新加载的 Protyle 编辑器实例对应的块 ID 或文档 ID。
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功。
   *   @property {string} msg - 错误信息，成功时为空字符串。
   *   @property {null} data - 成功时总是为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async reloadProtyle(data) {
    return this._fetchWrapper('/api/ui/reloadProtyle', 'POST', data, true);
  }

  /**
   * 重新加载标签列表
   * Endpoint: `POST /api/ui/reloadTag`
   * Requires authentication.
   * @param {object} data - Request payload
   * @returns {Promise<object>} The response from the server.
   *   @property {number} code - 错误码，0 表示成功。
   *   @property {string} msg - 错误信息，成功时为空字符串。
   *   @property {null} data - 成功时总是为 null。
   * @throws {Error} If the request fails or the server returns an error.
   */
  async reloadTag(data) {
    return this._fetchWrapper('/api/ui/reloadTag', 'POST', data, true);
  }

}

export default KernelApiClient;
