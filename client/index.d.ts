// TypeScript definitions for generated API clients\n\nimport { ZodFirstPartyTypeKind } from 'zod'; // Optional: for type safety if you inspect these types\n\ninterface CheckActivationcodeParams {\n  data: string; // 要检查的激活码\n}\n\ninterface CheckActivationcodeResponse {\n  Code: number; // 返回码，0 表示成功，其他表示失败\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface DeactivateUserResponse {\n  Code: number; // 返回码，0 表示成功，其他表示失败\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface LoginParams {\n  userName: string; // 用户名\n  userPassword: string; // 用户密码\n  captcha: string; // 验证码\n  cloudRegion: number; // 云端区域代码，例如 0 表示中国区\n}\n\ninterface LoginResponse {\n  Code: number; // 返回码，0 表示成功，其他表示失败\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface StartFreeTrialResponse {\n  Code: number; // 返回码，0 表示成功，其他表示失败\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface UseActivationcodeParams {\n  data: string; // 要使用的激活码\n}\n\ninterface UseActivationcodeResponse {\n  Code: number; // 返回码，0 表示成功，其他表示失败\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface ChatGPTParams {\n  msg: string; // 发送给 ChatGPT 的消息内容\n}\n\ninterface ChatGPTResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any; // ChatGPT 的回复内容\n}\n\ninterface ChatGPTWithActionParams {\n  ids: Array<string>; // 要操作的块 ID 列表\n  action: string; // 要执行的动作指令\n}\n\ninterface ChatGPTWithActionResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any; // ChatGPT 执行动作后的返回结果\n}\n\ninterface UnzipParams {\n  zipPath: string; // 要解压的 .zip 文件的绝对路径或相对于工作空间的路径\n  path: string; // 解压到目标目录的绝对路径或相对于工作空间的路径\n}\n\ninterface UnzipResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface ZipParams {\n  path: string; // 要压缩的文件或目录的绝对路径或相对于工作空间的路径\n  zipPath: string; // 生成的 .zip 文件保存的绝对路径或相对于工作空间的路径\n}\n\ninterface ZipResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface FullReindexAssetContentResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface GetDocAssetsParams {\n  id: string; // 文档块的 ID\n}\n\ninterface GetDocAssetsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any; // 资源文件对象数组，具体结构未定义\n}\n\ninterface GetDocImageAssetsParams {\n  id: string; // 文档块的 ID\n}\n\ninterface GetDocImageAssetsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any; // 图片资源文件对象数组，具体结构未定义\n}\n\ninterface GetFileAnnotationParams {\n  path: string; // 资源文件的路径 (例如 assets/xxx.pdf)\n}\n\ninterface GetFileAnnotationResponseData {\n  path: string; // 资源文件的路径\n  data: string; // 标注数据 (通常为 XFDF 格式的字符串)\n}\n\ninterface GetFileAnnotationResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetFileAnnotationResponseData;\n}\n\ninterface GetImageOCRTextParams {\n  path: string; // 图片资源文件的路径 (例如 assets/xxx.png)\n}\n\ninterface GetImageOCRTextResponseData {\n  text: string; // OCR 识别出的文本内容\n  ocrJSON: any; // 原始 OCR 结果，通常为 JSON 对象，具体结构取决于 OCR 引擎\n}\n\ninterface GetImageOCRTextResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetImageOCRTextResponseData;\n}\n\ninterface GetMissingAssetsResponseData {\n  missingAssets: Array<any>; // 丢失的资源路径列表，具体元素结构未定义\n}\n\ninterface GetMissingAssetsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetMissingAssetsResponseData;\n}\n\ninterface GetUnusedAssetsResponseData {\n  unusedAssets: Array<any>; // 未使用的资源文件对象列表，具体元素结构未定义\n}\n\ninterface GetUnusedAssetsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetUnusedAssetsResponseData;\n}\n\ninterface InsertLocalAssetsParams {\n  assetPaths: Array<string>; // 本地资源文件的绝对路径数组\n  id: string; // 要插入资源引用的目标文档块 ID\n  isUpload?: boolean;\n}\n\ninterface InsertLocalAssetsResponseData {\n  succMap: Record<string, string>; // 成功插入的资源映射，键为原始文件名，值为在思源中的新资源路径\n}\n\ninterface InsertLocalAssetsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: InsertLocalAssetsResponseData;\n}\n\ninterface OcrParams {\n  path: string;\n}\n\ninterface OcrResponseData {\n  text: string; // OCR 识别出的文本内容\n  ocrJSON: any; // 原始 OCR 结果，通常为 JSON 对象，具体结构取决于 OCR 引擎\n}\n\ninterface OcrResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: OcrResponseData;\n}\n\ninterface RemoveUnusedAssetParams {\n  path: string;\n}\n\ninterface RemoveUnusedAssetResponseData {\n  path: string; // 被成功移除的资源文件的路径\n}\n\ninterface RemoveUnusedAssetResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: RemoveUnusedAssetResponseData;\n}\n\ninterface RemoveUnusedAssetsResponseData {\n  paths: Array<string>; // 被成功移除的所有未使用资源文件的路径列表\n}\n\ninterface RemoveUnusedAssetsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: RemoveUnusedAssetsResponseData;\n}\n\ninterface RenameAssetParams {\n  oldPath: string; // 资源文件的当前路径 (例如 assets/old_name.png)\n  newName: string; // 资源文件的新名称 (不含路径，例如 new_name.png)\n}\n\ninterface RenameAssetResponseData {\n  newPath: string; // 资源文件重命名后的新路径 (例如 assets/new_name.png)\n}\n\ninterface RenameAssetResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: RenameAssetResponseData;\n}\n\ninterface ResolveAssetPathParams {\n  path: string; // 思源笔记中的资源相对路径 (例如 assets/image.png)\n}\n\ninterface ResolveAssetPathResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: string; // 资源文件在文件系统中的绝对路径\n}\n\ninterface SetFileAnnotationParams {\n  path: string; // 资源文件的路径 (例如 assets/xxx.pdf)\n  data: string; // 要设置的标注数据 (通常为 XFDF 格式的字符串)\n}\n\ninterface SetFileAnnotationResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface SetImageOCRTextParams {\n  path: string; // 图片资源文件的路径 (例如 assets/xxx.png)\n  text: string; // 要设置的 OCR 文本内容\n}\n\ninterface SetImageOCRTextResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface StatAssetParams {\n  path: string; // 资源文件的 assets/ 路径或本地文件的 file:/// 绝对路径\n}\n\ninterface StatAssetResponseData {\n  size: number; // 文件大小（字节）\n  hSize: string; // 人类可读的文件大小 (例如 1.2MB)\n  created: number; // 文件创建时间戳 (毫秒)\n  hCreated: string; // 人类可读的文件创建时间\n  updated: number; // 文件最后修改时间戳 (毫秒)\n  hUpdated: string; // 人类可读的文件最后修改时间\n}\n\ninterface StatAssetResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: StatAssetResponseData;\n}\n\ninterface UploadResponseData {\n  errFiles: Array<string>; // 上传失败的文件名列表\n  succMap: Record<string, string>; // 上传成功的文件映射，键为原始文件名，值为在思源中的新资源路径 (例如 assets/image.png)\n}\n\ninterface UploadResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: UploadResponseData;\n}\n\ninterface UploadCloudParams {\n  id: string; // 文档块的 ID，将上传此文档及其子文档中引用的所有本地资源\n}\n\ninterface UploadCloudResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface BatchGetBlockAttrsParams {\n  ids: Array<string>; // 要获取属性的块 ID 数组\n}\n\ninterface BatchGetBlockAttrsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: Record<string, Record<string, string>>; // 一个对象，键为块 ID，值为该块的属性对象 (属性名: 属性值)\n}\n\ninterface BatchSetBlockAttrsParamsBlockAttrsItem {\n  id: string; // 块 ID\n  attrs: Record<string, string | null>; // 要设置的属性对象 (属性名: 属性值)。如果属性值为 null，则删除该属性。\n}\n\ninterface BatchSetBlockAttrsParams {\n  blockAttrs: Array<BatchSetBlockAttrsParamsBlockAttrsItem>; // 包含多个块属性设置的对象数组\n}\n\ninterface BatchSetBlockAttrsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface GetBlockAttrsParams {\n  id: string; // 要获取属性的块 ID\n}\n\ninterface GetBlockAttrsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: Record<string, string>; // 该块的属性对象 (属性名: 属性值)\n}\n\ninterface GetBookmarkLabelsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: Array<string>; // 书签标签字符串数组\n}\n\ninterface ResetBlockAttrsParams {\n  id: string; // 要重置属性的块 ID\n  attrs: Record<string, string>; // 要重置的属性对象 (属性名: 期望的当前属性值)。只有当块的属性值与此处提供的值匹配时，该属性才会被移除。\n}\n\ninterface ResetBlockAttrsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface SetBlockAttrsParams {\n  id: string; // 要设置属性的块 ID\n  attrs: Record<string, string | null>; // 要设置的属性对象 (属性名: 属性值)。如果属性值为 null，则删除该属性。\n}\n\ninterface SetBlockAttrsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface AddAttributeViewBlocksParams {\n  avID: string; // 属性视图的 ID\n  blockID?: string;\n  previousID?: string;\n  ignoreFillFilter?: boolean;\n  srcs: Array<Record<string, any>>; // 要添加的源数据块信息数组，具体结构取决于源类型\n}\n\ninterface AddAttributeViewBlocksResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface AddAttributeViewKeyParams {\n  avID: string; // 属性视图的 ID\n  keyID: string; // 新列的 ID，如果为空则自动生成\n  keyName: string; // 新列的名称\n  keyType: string; // 新列的类型 (e.g., 'text', 'number', 'select')\n  keyIcon: string; // 新列的图标 (Emoji 或思源图标名)\n  previousKeyID: string; // 新列将插入到此列 ID 之前\n}\n\ninterface AddAttributeViewKeyResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface AppendAttributeViewDetachedBlocksWithValuesParams {\n  avID: string; // 属性视图的 ID\n  blocksValues: Array<Array<any>>; // 二维数组，外层数组代表多个新块，内层数组代表每个块对应各列的初始值\n}\n\ninterface AppendAttributeViewDetachedBlocksWithValuesResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface DuplicateAttributeViewBlockParams {\n  avID: string; // 要复制的属性视图块的 ID\n}\n\ninterface DuplicateAttributeViewBlockResponseData {\n  avID: string; // 新复制的属性视图的 ID\n  blockID: string; // 新复制的属性视图块的 ID\n}\n\ninterface DuplicateAttributeViewBlockResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: DuplicateAttributeViewBlockResponseData | null;\n}\n\ninterface GetAttributeViewParams {\n  id: string; // 属性视图的 ID\n}\n\ninterface GetAttributeViewResponseData {\n  av: any; // 属性视图对象的详细信息，具体结构复杂，参考前端实际使用或Go源码 `kernel.AttributeView`\n}\n\ninterface GetAttributeViewResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetAttributeViewResponseData | null;\n}\n\ninterface GetAttributeViewFilterSortParams {\n  id: string; // 属性视图的 ID\n  blockID: string; // 属性视图关联的块 ID (通常与属性视图ID相同)\n}\n\ninterface GetAttributeViewFilterSortResponseData {\n  filters: Array<any>; // 筛选条件对象数组，具体结构参考 `kernel.AVFilter`\n  sorts: Array<any>; // 排序规则对象数组，具体结构参考 `kernel.AVSort`\n}\n\ninterface GetAttributeViewFilterSortResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetAttributeViewFilterSortResponseData | null;\n}\n\ninterface GetAttributeViewKeysParams {\n  id: string; // 属性视图的 ID\n}\n\ninterface GetAttributeViewKeysResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: Array<any> | null;\n}\n\ninterface GetAttributeViewKeysByAvIDParams {\n  avID: string; // 属性视图的 ID\n}\n\ninterface GetAttributeViewKeysByAvIDResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: Array<any> | null;\n}\n\ninterface GetAttributeViewPrimaryKeyValuesParams {\n  id: string; // 属性视图的 ID\n  keyword?: string;\n  page?: number;\n  pageSize?: number;\n}\n\ninterface GetAttributeViewPrimaryKeyValuesResponseData {\n  name: string; // 主键列的名称\n  blockIDs: Array<string>; // 匹配的主键值对应的块 ID 列表\n  rows: Array<any>; // 匹配的行数据数组，具体结构可能包含主键值和其他相关信息\n}\n\ninterface GetAttributeViewPrimaryKeyValuesResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetAttributeViewPrimaryKeyValuesResponseData | null;\n}\n\ninterface GetMirrorDatabaseBlocksParams {\n  avID: string; // 属性视图的 ID\n}\n\ninterface GetMirrorDatabaseBlocksResponseDataRefDefsItem {\n  RefID: string; // 引用的块ID (通常是属性视图本身)\n  DefIDs: Array<string>; // 被引用的定义块ID列表 (镜像块)\n}\n\ninterface GetMirrorDatabaseBlocksResponseData {\n  refDefs: Array<GetMirrorDatabaseBlocksResponseDataRefDefsItem>; // 引用定义对象数组\n}\n\ninterface GetMirrorDatabaseBlocksResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetMirrorDatabaseBlocksResponseData | null;\n}\n\ninterface RemoveAttributeViewBlocksParams {\n  avID: string; // 属性视图的 ID\n  srcIDs: Array<string>; // 要移除的源数据块的 ID 数组\n}\n\ninterface RemoveAttributeViewBlocksResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface RemoveAttributeViewKeyParams {\n  avID: string; // 属性视图的 ID\n  keyID: string; // 要移除的列的 ID\n  removeRelationDest?: boolean;\n}\n\ninterface RemoveAttributeViewKeyResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface RenderAttributeViewParams {\n  id: string; // 属性视图的 ID\n  viewID?: string;\n  query?: string;\n  page?: number;\n  pageSize?: number;\n}\n\ninterface RenderAttributeViewResponseData {\n  name: string; // 属性视图的名称\n  id: string; // 属性视图的 ID\n  viewType: any; // 当前视图的类型 (具体类型需查阅 kernel.AVViewType)\n  viewID: any; // 当前视图的 ID (具体类型需查阅 kernel.AVViewID)\n  views: Array<any>; // 属性视图包含的所有视图定义数组，元素结构参考 `kernel.AVView`\n  view: any; // 当前渲染的视图的详细数据，结构复杂，取决于视图类型\n  isMirror: boolean; // 是否为镜像属性视图\n}\n\ninterface RenderAttributeViewResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: RenderAttributeViewResponseData | null;\n}\n\ninterface RenderHistoryAttributeViewParams {\n  id: string; // 属性视图的 ID\n  created: string; // 历史版本创建的时间戳字符串 (毫秒级)\n}\n\ninterface RenderHistoryAttributeViewResponseData {\n  name: string; // 属性视图的名称\n  id: string; // 属性视图的 ID\n  viewType: any; // 视图的类型\n  viewID: any; // 视图的 ID\n  views: Array<any>; // 所有视图定义数组\n  view: any; // 当前渲染的视图的详细数据\n  isMirror: boolean; // 是否为镜像\n}\n\ninterface RenderHistoryAttributeViewResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: RenderHistoryAttributeViewResponseData | null;\n}\n\ninterface RenderSnapshotAttributeViewParams {\n  snapshot: string; // 快照的路径或标识\n  id: string; // 属性视图的 ID\n}\n\ninterface RenderSnapshotAttributeViewResponseData {\n  name: string; // 属性视图的名称\n  id: string; // 属性视图的 ID\n  viewType: any; // 视图的类型\n  viewID: any; // 视图的 ID\n  views: Array<any>; // 所有视图定义数组\n  view: any; // 当前渲染的视图的详细数据\n  isMirror: boolean; // 是否为镜像\n}\n\ninterface RenderSnapshotAttributeViewResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: RenderSnapshotAttributeViewResponseData | null;\n}\n\ninterface SearchAttributeViewParams {\n  keyword: string; // 搜索关键词\n  excludes?: Array<string>;\n}\n\ninterface SearchAttributeViewResponseData {\n  results: Array<any>; // 搜索结果对象数组，每个对象包含属性视图的基本信息 (如 id, name)\n}\n\ninterface SearchAttributeViewResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: SearchAttributeViewResponseData | null;\n}\n\ninterface SearchAttributeViewNonRelationKeyParams {\n  avID: string; // 属性视图的 ID\n  keyword: string; // 搜索关键词\n}\n\ninterface SearchAttributeViewNonRelationKeyResponseData {\n  keys: Array<any>; // 匹配的非关联列定义对象数组，结构参考 `kernel.AVKey`\n}\n\ninterface SearchAttributeViewNonRelationKeyResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: SearchAttributeViewNonRelationKeyResponseData | null;\n}\n\ninterface SearchAttributeViewRelationKeyParams {\n  avID: string; // 属性视图的 ID\n  keyword: string; // 搜索关键词\n}\n\ninterface SearchAttributeViewRelationKeyResponseData {\n  keys: Array<any>; // 匹配的关联列定义对象数组，结构参考 `kernel.AVKey`\n}\n\ninterface SearchAttributeViewRelationKeyResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: SearchAttributeViewRelationKeyResponseData | null;\n}\n\ninterface SetAttributeViewBlockAttrParams {\n  avID: string; // 属性视图的 ID\n  keyID: string; // 列的 ID (Key ID)\n  rowID: string; // 行的 ID (通常是数据块的 ID)\n  value: any; // 要设置的新值，具体类型取决于列的类型\n}\n\ninterface SetAttributeViewBlockAttrResponseData {\n  value: any; // 成功设置后的值，可能经过转换或处理\n}\n\ninterface SetAttributeViewBlockAttrResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: SetAttributeViewBlockAttrResponseData | null;\n}\n\ninterface SetDatabaseBlockViewParams {\n  id: string; // 数据库块（属性视图块）的 ID\n  viewID: string; // 要设置为默认视图的视图 ID\n}\n\ninterface SetDatabaseBlockViewResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface SortAttributeViewKeyParams {\n  avID: string; // 属性视图的 ID\n  keyID: string; // 要移动的列的 ID\n  previousKeyID: string; // 目标位置：将列移动到此列 ID 之前\n}\n\ninterface SortAttributeViewKeyResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface SortAttributeViewViewKeyParams {\n  avID: string; // 属性视图的 ID\n  viewID: string; // 特定视图的 ID\n  keyID: string; // 要移动的列的 ID\n  previousKeyID: string; // 目标位置：将列移动到此列 ID 之前\n}\n\ninterface SortAttributeViewViewKeyResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface BatchUpdatePackageParams {\n  frontend: string; // 客户端类型，通常为 'frontend' 或 'app'\n}\n\ninterface BatchUpdatePackageResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: any | null;\n}\n\ninterface GetBazaarIconParams {\n  keyword?: string;\n}\n\ninterface GetBazaarIconResponseData {\n  packages: Array<any>; // 集市图标包对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetBazaarIconResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetBazaarIconResponseData | null;\n}\n\ninterface GetBazaarPackageREAMEParams {\n  repoURL: string; // 包所在的仓库 URL\n  repoHash: string; // 包在仓库中的特定提交哈希或版本标签\n  packageType: string; // 包类型 (例如 'icons', 'plugins', 'themes', 'templates', 'widgets')\n}\n\ninterface GetBazaarPackageREAMEResponseData {\n  html: string; // README 文件的 HTML 内容\n}\n\ninterface GetBazaarPackageREAMEResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetBazaarPackageREAMEResponseData | null;\n}\n\ninterface GetBazaarPluginParams {\n  frontend: string; // 客户端类型，通常为 'frontend' 或 'app'\n  keyword?: string;\n}\n\ninterface GetBazaarPluginResponseData {\n  packages: Array<any>; // 集市插件包对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetBazaarPluginResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetBazaarPluginResponseData | null;\n}\n\ninterface GetBazaarTemplateParams {\n  keyword?: string;\n}\n\ninterface GetBazaarTemplateResponseData {\n  packages: Array<any>; // 集市模板包对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetBazaarTemplateResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetBazaarTemplateResponseData | null;\n}\n\ninterface GetBazaarThemeParams {\n  keyword?: string;\n}\n\ninterface GetBazaarThemeResponseData {\n  packages: Array<any>; // 集市主题包对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetBazaarThemeResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetBazaarThemeResponseData | null;\n}\n\ninterface GetBazaarWidgetParams {\n  keyword?: string;\n}\n\ninterface GetBazaarWidgetResponseData {\n  packages: Array<any>; // 集市挂件包对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetBazaarWidgetResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetBazaarWidgetResponseData | null;\n}\n\ninterface GetInstalledIconParams {\n  keyword?: string;\n}\n\ninterface GetInstalledIconResponseData {\n  packages: Array<any>; // 已安装图标包对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetInstalledIconResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetInstalledIconResponseData | null;\n}\n\ninterface GetInstalledPluginParams {\n  frontend: string; // 客户端类型，通常为 'frontend' 或 'app'\n  keyword?: string;\n}\n\ninterface GetInstalledPluginResponseData {\n  packages: Array<any>; // 已安装插件对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetInstalledPluginResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetInstalledPluginResponseData | null;\n}\n\ninterface GetInstalledTemplateParams {\n  keyword?: string;\n}\n\ninterface GetInstalledTemplateResponseData {\n  packages: Array<any>; // 已安装模板对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetInstalledTemplateResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetInstalledTemplateResponseData | null;\n}\n\ninterface GetInstalledThemeParams {\n  keyword?: string;\n}\n\ninterface GetInstalledThemeResponseData {\n  packages: Array<any>; // 已安装主题对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetInstalledThemeResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetInstalledThemeResponseData | null;\n}\n\ninterface GetInstalledWidgetParams {\n  keyword?: string;\n}\n\ninterface GetInstalledWidgetResponseData {\n  packages: Array<any>; // 已安装挂件对象数组，具体结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetInstalledWidgetResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetInstalledWidgetResponseData | null;\n}\n\ninterface GetUpdatedPackageParams {\n  frontend: string; // 客户端类型，通常为 'frontend' 或 'app'\n}\n\ninterface GetUpdatedPackageResponseData {\n  plugins: Array<any>; // 可更新的插件列表，元素结构参考 `kernel.BazaarPackage`\n  widgets: Array<any>; // 可更新的挂件列表，元素结构参考 `kernel.BazaarPackage`\n  icons: Array<any>; // 可更新的图标包列表，元素结构参考 `kernel.BazaarPackage`\n  themes: Array<any>; // 可更新的主题列表，元素结构参考 `kernel.BazaarPackage`\n  templates: Array<any>; // 可更新的模板列表，元素结构参考 `kernel.BazaarPackage`\n}\n\ninterface GetUpdatedPackageResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: GetUpdatedPackageResponseData | null;\n}\n\ninterface InstallBazaarIconParams {\n  repoURL: string; // 图标包所在的仓库 URL\n  repoHash: string; // 图标包在仓库中的特定提交哈希或版本标签\n  packageName: string; // 图标包的名称 (通常是仓库名)\n  keyword?: string;\n}\n\ninterface InstallBazaarIconResponseData {\n  packages: Array<any>; // 更新后的已安装图标包列表，元素结构参考 `kernel.BazaarPackage`\n  appearance: any; // 更新后的外观设置对象，具体结构参考 `conf.Appearance`\n}\n\ninterface InstallBazaarIconResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: InstallBazaarIconResponseData | null;\n}\n\ninterface InstallBazaarPluginParams {\n  repoURL: string; // 插件所在的仓库 URL\n  repoHash: string; // 插件在仓库中的特定提交哈希或版本标签\n  packageName: string; // 插件的名称 (通常是仓库名)\n  frontend: string; // 客户端类型，通常为 'frontend' 或 'app'\n  keyword?: string;\n}\n\ninterface InstallBazaarPluginResponseData {\n  packages: Array<any>; // 更新后的已安装插件列表，元素结构参考 `kernel.BazaarPackage`\n}\n\ninterface InstallBazaarPluginResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: InstallBazaarPluginResponseData | null;\n}\n\ninterface InstallBazaarTemplateParams {\n  repoURL: string; // 模板所在的仓库 URL\n  repoHash: string; // 模板在仓库中的特定提交哈希或版本标签\n  packageName: string; // 模板的名称 (通常是仓库名)\n  keyword?: string;\n}\n\ninterface InstallBazaarTemplateResponseData {\n  packages: Array<any>; // 更新后的已安装模板列表，元素结构参考 `kernel.BazaarPackage`\n}\n\ninterface InstallBazaarTemplateResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: InstallBazaarTemplateResponseData | null;\n}\n\ninterface InstallBazaarThemeParams {\n  repoURL: string; // 主题所在的仓库 URL\n  repoHash: string; // 主题在仓库中的特定提交哈希或版本标签\n  packageName: string; // 主题的名称 (通常是仓库名)\n  mode: number; // 主题模式 (0: 亮色, 1: 暗色, 2: 根据系统)\n  update?: boolean;\n  keyword?: string;\n}\n\ninterface InstallBazaarThemeResponseData {\n  packages: Array<any>; // 更新后的已安装主题列表，元素结构参考 `kernel.BazaarPackage`\n  appearance: any; // 更新后的外观设置对象，具体结构参考 `conf.Appearance`\n}\n\ninterface InstallBazaarThemeResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: InstallBazaarThemeResponseData | null;\n}\n\ninterface InstallBazaarWidgetParams {\n  repoURL: string; // 挂件所在的仓库 URL\n  repoHash: string; // 挂件在仓库中的特定提交哈希或版本标签\n  packageName: string; // 挂件的名称 (通常是仓库名)\n  keyword?: string;\n}\n\ninterface InstallBazaarWidgetResponseData {\n  packages: Array<any>; // 更新后的已安装挂件列表，元素结构参考 `kernel.BazaarPackage`\n}\n\ninterface InstallBazaarWidgetResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: InstallBazaarWidgetResponseData | null;\n}\n\ninterface UninstallBazaarIconParams {\n  packageName: string; // 要卸载的图标包的名称\n  keyword?: string;\n}\n\ninterface UninstallBazaarIconResponseData {\n  packages: Array<any>; // 更新后的已安装图标包列表，元素结构参考 `kernel.BazaarPackage`\n  appearance: any; // 更新后的外观设置对象，具体结构参考 `conf.Appearance`\n}\n\ninterface UninstallBazaarIconResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: UninstallBazaarIconResponseData | null;\n}\n\ninterface UninstallBazaarPluginParams {\n  packageName: string; // 要卸载的插件的名称\n  frontend: string; // 客户端类型，通常为 'frontend' 或 'app'\n  keyword?: string;\n}\n\ninterface UninstallBazaarPluginResponseData {\n  packages: Array<any>; // 更新后的已安装插件列表，元素结构参考 `kernel.BazaarPackage`\n}\n\ninterface UninstallBazaarPluginResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: UninstallBazaarPluginResponseData | null;\n}\n\ninterface UninstallBazaarTemplateParams {\n  packageName: string; // 要卸载的模板的名称\n  keyword?: string;\n}\n\ninterface UninstallBazaarTemplateResponseData {\n  packages: Array<any>; // 更新后的已安装模板列表，元素结构参考 `kernel.BazaarPackage`\n}\n\ninterface UninstallBazaarTemplateResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: UninstallBazaarTemplateResponseData | null;\n}\n\ninterface UninstallBazaarThemeParams {\n  packageName: string; // 要卸载的主题的名称\n  mode: number; // 主题模式 (0: 亮色, 1: 暗色, 2: 根据系统)，用于确定要卸载哪个模式下的主题或重置相关配置\n  keyword?: string;\n}\n\ninterface UninstallBazaarThemeResponseData {\n  packages: Array<any>; // 更新后的已安装主题列表，元素结构参考 `kernel.BazaarPackage`\n  appearance: any; // 更新后的外观设置对象，具体结构参考 `conf.Appearance`\n}\n\ninterface UninstallBazaarThemeResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: UninstallBazaarThemeResponseData | null;\n}\n\ninterface UninstallBazaarWidgetParams {\n  packageName: string; // 要卸载的挂件的名称\n  keyword?: string;\n}\n\ninterface UninstallBazaarWidgetResponseData {\n  packages: Array<any>; // 更新后的已安装挂件列表，元素结构参考 `kernel.BazaarPackage`\n}\n\ninterface UninstallBazaarWidgetResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 返回消息\n  Data: UninstallBazaarWidgetResponseData | null;\n}\n\ninterface AppendBlockParams {\n  data: string; // 要插入的内容，可以是 Markdown 或 DOM 字符串\n  dataType: 'markdown' | 'dom'; // 指定 data 参数的类型\n  parentID: string; // 父块的 ID\n}\n\ninterface AppendBlockResponseDataItem {\n  id: string; // 新创建块的 ID\n}\n\ninterface AppendBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<AppendBlockResponseDataItem> | null;\n}\n\ninterface AppendDailyNoteBlockParams {\n  data: string; // 要追加的内容，可以是 Markdown 或 DOM 字符串\n  dataType: 'markdown' | 'dom'; // 指定 data 参数的类型\n  notebook: string; // 目标笔记本的 ID\n}\n\ninterface AppendDailyNoteBlockResponseDataItem {\n  id: string; // 新创建块的 ID\n}\n\ninterface AppendDailyNoteBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<AppendDailyNoteBlockResponseDataItem> | null;\n}\n\ninterface BatchUpdateBlockParamsBlocksItem {\n  id: string; // 要更新的块 ID\n  data: string; // 新的块内容，可以是 Markdown 或 DOM 字符串\n  dataType: 'markdown' | 'dom'; // 指定 data 参数的类型\n}\n\ninterface BatchUpdateBlockParams {\n  blocks: Array<BatchUpdateBlockParamsBlocksItem>; // 包含多个待更新块信息的数组\n}\n\ninterface BatchUpdateBlockResponseDataItem {\n  id: string; // 已更新块的 ID\n}\n\ninterface BatchUpdateBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<BatchUpdateBlockResponseDataItem> | null;\n}\n\ninterface CheckBlockExistParams {\n  id: string; // 要检查的块 ID\n}\n\ninterface CheckBlockExistResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: boolean; // 块是否存在\n}\n\ninterface CheckBlockFoldParams {\n  id: string; // 要检查的块 ID\n}\n\ninterface CheckBlockFoldResponseData {\n  isFolded: boolean; // 块是否已折叠\n  isRoot: boolean; // 块是否为根块（通常指文档块）\n}\n\ninterface CheckBlockFoldResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: CheckBlockFoldResponseData; // 包含折叠状态和是否为根块的信息\n}\n\ninterface CheckBlockRefParams {\n  ids: Array<string>; // 要检查的块 ID 数组\n}\n\ninterface CheckBlockRefResponseDataValue {\n  defCount: number; // 该块作为定义块被引用的次数\n  refCount: number; // 该块作为引用块引用其他块的次数\n}\n\ninterface CheckBlockRefResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Record<string, CheckBlockRefResponseDataValue>; // 一个记录对象，键为块 ID，值为该块的引用统计信息\n}\n\ninterface DeleteBlockParams {\n  id: string; // 要删除的块 ID\n}\n\ninterface DeleteBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<any> | null;\n}\n\ninterface FoldBlockParams {\n  id: string; // 要折叠的块 ID\n}\n\ninterface FoldBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<any> | null;\n}\n\ninterface GetBlockBreadcrumbParams {\n  id: string; // 目标块的 ID\n  excludeTypes?: Array<string>;\n}\n\ninterface GetBlockBreadcrumbResponseDataItem {\n  id: string; // 面包屑项的块 ID\n  name: string; // 面包屑项的名称（通常是块内容或标题）\n  type: string; // 面包屑项的块类型\n  icon?: string;\n}\n\ninterface GetBlockBreadcrumbResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<GetBlockBreadcrumbResponseDataItem>; // 面包屑路径数组，从根到目标块的父块\n}\n\ninterface GetBlockDOMParams {\n  id: string; // 要获取 DOM 的块 ID\n}\n\ninterface GetBlockDOMResponseData {\n  id: string; // 块 ID\n  dom: string; // 块的 DOM 内容 (HTML 字符串)\n  isFullWidth?: boolean;\n}\n\ninterface GetBlockDOMResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetBlockDOMResponseData; // 包含块 ID 和其 DOM 内容的对象\n}\n\ninterface GetBlockDefIDsByRefTextParams {\n  anchor: string; // 要搜索的引用锚文本\n  excludeIDs?: Array<string>;\n}\n\ninterface GetBlockDefIDsByRefTextResponseDataRefDefsItem {\n  RefID: string; // 引用块的ID (发起引用的块)\n  DefIDs: Array<string>; // 被引用的定义块ID列表\n}\n\ninterface GetBlockDefIDsByRefTextResponseData {\n  refDefs: Array<GetBlockDefIDsByRefTextResponseDataRefDefsItem>; // 引用定义对的列表\n}\n\ninterface GetBlockDefIDsByRefTextResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetBlockDefIDsByRefTextResponseData; // 包含引用定义对列表的对象\n}\n\ninterface GetBlockIndexParams {\n  id: string; // 要获取索引的块 ID\n}\n\ninterface GetBlockIndexResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: number; // 块在其父块子节点中的索引位置，-1 表示未找到或出错\n}\n\ninterface GetBlockInfoParams {\n  id: string; // 要获取信息的块 ID\n}\n\ninterface GetBlockInfoResponseData {\n  box: string; // 块所在的笔记本 ID\n  path: string; // 块在笔记本中的绝对路径\n  rootID: string; // 块所属的根文档块 ID\n  rootTitle: string; // 根文档块的标题\n  rootChildID: string; // 该块在根文档块下的一级子块ID (如果自身不是一级子块，则为空)\n  rootIcon: string; // 根文档块的图标\n}\n\ninterface GetBlockInfoResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetBlockInfoResponseData; // 包含块的详细路径和上下文信息的对象\n}\n\ninterface GetBlockKramdownParams {\n  id: string; // 要获取 Kramdown 源码的块 ID\n  mode?: 'md' | 'textmark';\n}\n\ninterface GetBlockKramdownResponseData {\n  id: string; // 块 ID\n  kramdown: string; // 块的 Kramdown 源码\n}\n\ninterface GetBlockKramdownResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetBlockKramdownResponseData; // 包含块 ID 和其 Kramdown 源码的对象\n}\n\ninterface GetBlockSiblingIDParams {\n  id: string; // 目标块的 ID\n}\n\ninterface GetBlockSiblingIDResponseData {\n  parent: string; // 父块 ID，如果目标块是根块则为空字符串\n  previous: string; // 上一个同级块 ID，如果没有则为空字符串\n  next: string; // 下一个同级块 ID，如果没有则为空字符串\n}\n\ninterface GetBlockSiblingIDResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetBlockSiblingIDResponseData; // 包含父块、上一个和下一个同级块 ID 的对象\n}\n\ninterface GetBlockTreeInfosParams {\n  ids: Array<string>; // 要获取块树信息的块 ID 数组\n}\n\ninterface GetBlockTreeInfosResponseDataItem {\n  id: string; // 块 ID\n  box: string; // 笔记本 ID\n  path: string; // 块的路径\n  hPath: string; // 块的人类可读路径\n  name: string; // 块的名称（通常是内容的前缀）\n  alias: string; // 块的别名\n  memo: string; // 块的备注\n  tag: string; // 块的标签\n  bookmark: string; // 块的书签内容\n  type: string; // 块的类型\n  subType: string; // 块的子类型\n  depth: number; // 块在树中的深度\n  sort: number; // 块的排序值\n  created: string; // 块的创建时间 (Unix 时间戳字符串)\n  updated: string; // 块的更新时间 (Unix 时间戳字符串)\n  f Suprema: string; // 块的 F Suprema 值，用途未知\n  fcontent: string; // 块的 FContent 值，可能是格式化内容预览\n  markdown: string; // 块的 Markdown 内容\n  length: number; // 块内容的长度\n  refCount: number; // 块的引用计数\n  defCount: number; // 块的定义计数\n  refID: string; // 块的引用目标 ID (如果该块是引用块)\n  parentID: string; // 父块 ID\n  parent2ID: string; // 祖父块 ID\n  rootID: string; // 根块 ID (文档块 ID)\n  childrenCount: number; // 直接子块数量\n  codeBlockCount: number; // 代码块数量\n  avCount: number; // 属性视图数量\n  docSize: number; // 文档大小 (如果该块是文档块)\n  subFileCount: number; // 子文件数量 (如果该块是文档块)\n  headingCount: number; // 标题数量\n  listCount: number; // 列表数量\n  listItemCount: number; // 列表项数量\n  mathBlockCount: number; // 数学公式块数量\n  htmlBlockCount: number; // HTML 块数量\n  tableCount: number; // 表格数量\n  quoteCount: number; // 引述块数量\n  superBlockCount: number; // 超级块数量\n  paragraphCount: number; // 段落数量\n  todoCount: number; // 待办事项数量\n  imageCount: number; // 图片数量\n  audioCount: number; // 音频数量\n  videoCount: number; // 视频数量\n  otherAssetCount: number; // 其他资源数量\n  isBacklink: boolean; // 是否为反向链接提及\n  isRef: boolean; // 是否为引用\n  isDef: boolean; // 是否为定义\n  isComment: boolean; // 是否为评论\n  hasMemo: boolean; // 是否有备注\n  hasTag: boolean; // 是否有标签\n  hasBookmark: boolean; // 是否有书签\n  hasAlias: boolean; // 是否有别名\n  hidden: boolean; // 是否隐藏\n  folded: boolean; // 是否折叠\n  refText: string; // 引用文本 (如果该块是引用块)\n  refPath: string; // 引用路径 (如果该块是引用块)\n  refPath2: string; // 引用路径2 (如果该块是引用块)\n  refCreate: string; // 引用创建时间 (如果该块是引用块, Unix 时间戳字符串)\n  refUpdate: string; // 引用更新时间 (如果该块是引用块, Unix 时间戳字符串)\n  defPath: string; // 定义路径 (如果该块是定义块)\n  defPath2: string; // 定义路径2 (如果该块是定义块)\n  ial: Record<string, string>; // 块的 IAL 属性键值对\n  children?: Array<any>;\n  attrs?: Record<string, string>;\n}\n\ninterface GetBlockTreeInfosResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<GetBlockTreeInfosResponseDataItem>; // 一个包含多个块树信息的数组，每个对象代表一个块及其详细信息和可能的子节点\n}\n\ninterface GetBlocksIndexesParams {\n  ids: Array<string>; // 要获取索引的块 ID 数组\n}\n\ninterface GetBlocksIndexesResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Record<string, number>; // 一个记录对象，键为块 ID，值为该块在其父块中的索引\n}\n\ninterface GetBlocksWordCountParams {\n  ids: Array<string>; // 要统计字数的块 ID 数组\n  reqId?: string;\n}\n\ninterface GetBlocksWordCountResponseDataStat {\n  wordCount: number; // 总字数\n  charCount: number; // 总字符数\n  linkCount: number; // 总链接数\n}\n\ninterface GetBlocksWordCountResponseData {\n  reqId?: string;\n  stat: GetBlocksWordCountResponseDataStat; // 字数统计结果\n}\n\ninterface GetBlocksWordCountResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetBlocksWordCountResponseData; // 包含字数统计结果和可选请求 ID 的对象\n}\n\ninterface GetChildBlocksParams {\n  id: string; // 父块的 ID\n}\n\ninterface GetChildBlocksResponseDataItem {\n  id: string; // 子块的 ID\n  type: string; // 子块的类型\n}\n\ninterface GetChildBlocksResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<GetChildBlocksResponseDataItem>; // 直接子块的基本信息数组\n}\n\ninterface GetContentWordCountParams {\n  content: string; // 要统计字数的文本内容\n  reqId?: string;\n}\n\ninterface GetContentWordCountResponseDataStat {\n  wordCount: number; // 总字数\n  charCount: number; // 总字符数\n  linkCount: number; // 总链接数\n}\n\ninterface GetContentWordCountResponseData {\n  reqId?: string;\n  stat: GetContentWordCountResponseDataStat; // 字数统计结果\n}\n\ninterface GetContentWordCountResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetContentWordCountResponseData; // 包含字数统计结果和可选请求 ID 的对象\n}\n\ninterface GetDOMTextParams {\n  dom: string; // 包含 HTML 标签的 DOM 字符串\n}\n\ninterface GetDOMTextResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: string; // 从 DOM 中提取的纯文本内容\n}\n\ninterface GetDocInfoParams {\n  id: string; // 目标文档块的 ID\n}\n\ninterface GetDocInfoResponseData {\n  id: string; // 文档块 ID\n  box: string; // 笔记本 ID\n  path: string; // 文档的存储路径\n  dom: string; // 文档内容的 DOM (HTML 字符串)\n  title: string; // 文档标题\n  icon: string; // 文档图标的 Base64 编码或 Emoji\n  iconURL: string; // 文档图标的 URL\n  breadcrumb: string; // 文档的面包屑路径 (HTML 字符串)\n  isTemplate: boolean; // 该文档是否为模板\n  updated: string; // 文档更新时间 (yyyyMMddHHmmss格式)\n}\n\ninterface GetDocInfoResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetDocInfoResponseData; // 包含文档详细信息的对象\n}\n\ninterface GetDocsInfoParams {\n  ids: Array<string>; // 包含多个文档块 ID 的数组\n}\n\ninterface GetDocsInfoResponseDataItem {\n  id: string; // 文档块 ID\n  box: string; // 笔记本 ID\n  path: string; // 文档的存储路径\n  title: string; // 文档标题\n  icon: string; // 文档图标的 Base64 编码或 Emoji\n  iconURL: string; // 文档图标的 URL\n  isTemplate: boolean; // 该文档是否为模板\n  updated: string; // 文档更新时间 (yyyyMMddHHmmss格式)\n}\n\ninterface GetDocsInfoResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<GetDocsInfoResponseDataItem>; // 包含多个文档详细信息的数组\n}\n\ninterface GetHeadingChildrenDOMParams {\n  id: string; // 目标标题块的 ID\n}\n\ninterface GetHeadingChildrenDOMResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: string; // 标题块下所有子孙块合并的 DOM (HTML 字符串)\n}\n\ninterface GetHeadingChildrenIDsParams {\n  id: string; // 目标标题块的 ID\n}\n\ninterface GetHeadingChildrenIDsResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<string>; // 标题块下所有子孙块的 ID 数组\n}\n\ninterface GetHeadingDeleteTransactionParams {\n  id: string; // 要获取删除事务的标题块 ID\n}\n\ninterface GetHeadingDeleteTransactionResponseDataDoOperationsItem {\n  action: string; // 操作类型 (例如: delete, update, insert等)\n  id?: string;\n  data?: string;\n  parentID?: string;\n  previousID?: string;\n  dataType?: string;\n}\n\ninterface GetHeadingDeleteTransactionResponseData {\n  doOperations: Array<GetHeadingDeleteTransactionResponseDataDoOperationsItem>; // 正向操作列表\n}\n\ninterface GetHeadingDeleteTransactionResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetHeadingDeleteTransactionResponseData; // 包含删除操作的事务对象\n}\n\ninterface GetHeadingLevelTransactionParams {\n  id: string; // 要调整级别的标题块 ID\n  level: number; // 新的标题级别 (1-6)\n}\n\ninterface GetHeadingLevelTransactionResponseDataDoOperationsItem {\n  action: string; // 操作类型 (例如: updateial)\n  id: string; // 操作的块 ID\n  data?: string;\n}\n\ninterface GetHeadingLevelTransactionResponseData {\n  doOperations: Array<GetHeadingLevelTransactionResponseDataDoOperationsItem>; // 正向操作列表\n}\n\ninterface GetHeadingLevelTransactionResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetHeadingLevelTransactionResponseData; // 包含调整级别操作的事务对象\n}\n\ninterface GetRecentUpdatedBlocksResponseDataItem {\n  id: string; // 块 ID\n  box: string; // 笔记本 ID\n  path: string; // 块所在文档的路径\n  hPath: string; // 块所在文档的人类可读路径\n  name: string; // 块的名称/内容预览\n  bookmark: string; // 块的书签内容\n  memo: string; // 块的备注内容\n  alias: string; // 块的别名\n  type: string; // 块类型\n  updated: string; // 块更新时间 (yyyyMMddHHmmss 格式)\n}\n\ninterface GetRecentUpdatedBlocksResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<GetRecentUpdatedBlocksResponseDataItem>; // 最近更新的块信息数组\n}\n\ninterface GetRefIDsParams {\n  id: string; // 发起引用的块 ID\n}\n\ninterface GetRefIDsResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<string>; // 该块引用的所有定义块的 ID 数组\n}\n\ninterface GetRefIDsByFileAnnotationIDParams {\n  id: string; // 文件注解块的 ID\n}\n\ninterface GetRefIDsByFileAnnotationIDResponseData {\n  refID: string; // 相关的引用块 ID\n  defID: string; // 相关的定义块 ID\n}\n\ninterface GetRefIDsByFileAnnotationIDResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetRefIDsByFileAnnotationIDResponseData; // 包含相关引用ID和定义ID的对象\n}\n\ninterface GetRefTextParams {\n  id: string; // 引用块的 ID\n}\n\ninterface GetRefTextResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: string; // 引用块的锚文本\n}\n\ninterface GetTailChildBlocksParams {\n  id: string; // 父块的 ID\n  size: number; // 要获取的尾部子块数量\n}\n\ninterface GetTailChildBlocksResponseDataItem {\n  id: string; // 子块的 ID\n  type: string; // 子块的类型\n}\n\ninterface GetTailChildBlocksResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<GetTailChildBlocksResponseDataItem>; // 尾部子块的基本信息数组\n}\n\ninterface GetTreeStatParams {\n  id: string; // 目标块的 ID，通常为文档块\n}\n\ninterface GetTreeStatResponseData {\n  id: string; // 块 ID\n  box: string; // 笔记本 ID\n  path: string; // 块路径\n  refCount: number; // 引用数量\n  defCount: number; // 定义数量\n  childrenCount: number; // 直接子块数量\n  codeBlockCount: number; // 代码块数量\n  avCount: number; // 属性视图数量\n  docSize: number; // 文档大小 (字节)\n  subFileCount: number; // 子文件数量 (文档内文档)\n  headingCount: number; // 标题块数量\n  listCount: number; // 列表块数量\n  listItemCount: number; // 列表项数量\n  mathBlockCount: number; // 数学公式块数量\n  htmlBlockCount: number; // HTML块数量\n  tableCount: number; // 表格块数量\n  quoteCount: number; // 引述块数量\n  superBlockCount: number; // 超级块数量\n  paragraphCount: number; // 段落数量\n  todoCount: number; // 待办事项数量 (已完成或未完成)\n  imageCount: number; // 图片资源数量\n  audioCount: number; // 音频资源数量\n  videoCount: number; // 视频资源数量\n  otherAssetCount: number; // 其他资源数量\n}\n\ninterface GetTreeStatResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetTreeStatResponseData; // 块树的统计信息对象\n}\n\ninterface GetUnfoldedParentIDParams {\n  id: string; // 起始块的 ID\n}\n\ninterface GetUnfoldedParentIDResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: string; // 最近的已展开父块的 ID，如果无此类父块或出错则为空字符串\n}\n\ninterface InsertBlockParams {\n  anchorID: string; // 锚点块的 ID\n  data: string; // 要插入的内容，可以是 Markdown 或 DOM 字符串\n  dataType: 'markdown' | 'dom'; // 指定 data 参数的类型\n  isBefore: boolean; // 是否在锚点块之前插入 (true: 之前, false: 之后)\n}\n\ninterface InsertBlockResponseDataItem {\n  id: string; // 新创建块的 ID\n}\n\ninterface InsertBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<InsertBlockResponseDataItem> | null;\n}\n\ninterface PrependBlockParams {\n  data: string; // 要插入的内容，可以是 Markdown 或 DOM 字符串\n  dataType: 'markdown' | 'dom'; // 指定 data 参数的类型\n  parentID: string; // 父块的 ID\n}\n\ninterface PrependBlockResponseDataItem {\n  id: string; // 新创建块的 ID\n}\n\ninterface PrependBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<PrependBlockResponseDataItem> | null;\n}\n\ninterface SetBlockReminderParams {\n  id: string; // 要设置提醒的块 ID\n  timed: string; // 提醒时间，格式为 yyyyMMddHHmmss (例如: 20230815103000)\n}\n\ninterface SetBlockReminderResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: null; // 成功时为 null\n}\n\ninterface SwapBlockRefParams {\n  refID: string; // 原引用块的 ID\n  defID: string; // 原定义块的 ID\n  includeChildren: boolean; // 是否包含子块进行交换 (通常用于嵌入块)\n}\n\ninterface SwapBlockRefResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: null; // 成功时为 null\n}\n\ninterface TransferBlockRefParams {\n  fromID: string; // 原块的 ID，其引用关系将被转移\n  toID: string; // 目标块的 ID，将接收引用关系\n  refIDs?: Array<string>;\n  reloadUI?: boolean;\n}\n\ninterface TransferBlockRefResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: null; // 成功时为 null\n}\n\ninterface UnfoldBlockParams {\n  id: string; // 要展开的块 ID\n}\n\ninterface UnfoldBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<any> | null;\n}\n\ninterface UpdateBlockParams {\n  id: string; // 要更新的块 ID\n  data: string; // 新的块内容，可以是 Markdown 或 DOM 字符串\n  dataType: 'markdown' | 'dom'; // 指定 data 参数的类型\n}\n\ninterface UpdateBlockResponseDataItem {\n  id: string; // 已更新块的 ID\n}\n\ninterface UpdateBlockResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<UpdateBlockResponseDataItem> | null;\n}\n\ninterface GetBookmarkResponseDataItemBlocksItem {\n  id: string; // 块的 ID\n  type: string; // 块的类型 (例如 Paragraph, Heading, List, Document 等)\n  content: string; // 块的显示内容 (对于普通块可能是名称或概要，对于属性视图是其标题)\n  markdown: string; // 块的 Markdown 源码\n  name?: string;\n  alias?: string;\n  memo?: string;\n  icon?: string;\n  hPath: string; // 块所在文档的人类可读路径 (例如 '/文档名/子文档名')\n  path: string; // 块所在文档的绝对存储路径\n  box: string; // 块所属的笔记本 ID\n  rootID: string; // 块所属的根文档块 ID\n}\n\ninterface GetBookmarkResponseDataItem {\n  name: string; // 书签的名称 (用户在 IAL 中为块设置的 bookmark 属性值)\n  blocks: Array<GetBookmarkResponseDataItemBlocksItem>; // 属于此书签名称下的块对象列表\n  type: string; // 固定为 'bookmark'，表示这是一个书签分组\n  depth: number; // 层级深度，对于书签固定为 1\n  count: number; // 此书签名称下包含的块的数量\n}\n\ninterface GetBookmarkResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<GetBookmarkResponseDataItem>; // 书签数据数组，每个元素是一个书签分组及其包含的书签块列表\n}\n\ninterface RemoveBookmarkParams {\n  bookmark: string; // 要移除的书签的名称 (块 IAL 中 bookmark 属性的值)\n}\n\ninterface RemoveBookmarkResponseData {\n  closeTimeout: number; // 一个建议的关闭超时时间 (毫秒)，通常在错误时提供以便UI提示\n}\n\ninterface RemoveBookmarkResponse {\n  Code: number; // API 调用返回码，0 表示成功，其他表示失败\n  Msg: string; // API 调用返回消息\n  Data?: RemoveBookmarkResponseData | null;\n}\n\ninterface RenameBookmarkParams {\n  oldBookmark: string; // 要重命名的旧书签名称 (块 IAL 中 bookmark 属性的当前值)\n  newBookmark: string; // 新的书签名称 (将写入块 IAL 中 bookmark 属性的新值)\n}\n\ninterface RenameBookmarkResponseData {\n  closeTimeout: number; // 一个建议的关闭超时时间 (毫秒)，通常在错误时提供以便UI提示\n}\n\ninterface RenameBookmarkResponse {\n  Code: number; // API 调用返回码，0 表示成功，其他表示失败\n  Msg: string; // API 调用返回消息\n  Data?: RenameBookmarkResponseData | null;\n}\n\ninterface GetChannelInfoParams {\n  name: string; // 要查询的广播频道名称\n}\n\ninterface GetChannelInfoResponseData {\n  name: string; // 频道名称\n  count: number; // 频道的总订阅者数量 (WebSocket + SSE)\n}\n\ninterface GetChannelInfoResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: GetChannelInfoResponseData; // 频道信息对象\n}\n\ninterface GetChannelsResponseDataItem {\n  name: string; // 频道名称\n  count: number; // 频道的总订阅者数量 (WebSocket + SSE)\n}\n\ninterface GetChannelsResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<GetChannelsResponseDataItem>; // 活跃频道信息对象数组\n}\n\ninterface PostMessageParams {\n  channel: string; // 目标广播频道的名称\n  cmd?: string;\n  data: string; // 要发送的消息内容或命令参数 (JSON 字符串)\n}\n\ninterface PostMessageResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: any | null;\n}\n\ninterface BroadcastPublishParams {\n  channel: string; // 目标广播频道的名称\n  type: 'string' | 'binary'; // 消息类型：'string' (文本) 或 'binary' (二进制文件)\n  data?: string;\n  file?: any;\n}\n\ninterface BroadcastPublishResponseDataChannel {\n  name: string; // 目标频道名称\n  count: number; // 发布时频道的订阅者数量\n}\n\ninterface BroadcastPublishResponseDataMessage {\n  type: 'string' | 'binary'; // 发布的消息类型\n  size: number; // 发布的消息大小 (字节)\n  filename: string; // 发布的文件名 (如果 type 为 'binary')\n}\n\ninterface BroadcastPublishResponseData {\n  code: number; // 操作结果返回码，0 表示成功\n  msg: string; // 操作结果消息\n  channel: BroadcastPublishResponseDataChannel; // 频道信息\n  message: BroadcastPublishResponseDataMessage; // 发布的消息详情\n}\n\ninterface BroadcastPublishResponse {\n  Code: number; // API 调用返回码 (外层)\n  Msg: string; // API 调用返回消息 (外层)\n  Data: BroadcastPublishResponseData; // 发布操作的结果详情\n}\n\ninterface ReadFilePathsResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: Array<string>; // 从剪贴板中读取到的文件绝对路径列表。如果剪贴板中不是文件路径，或在 Linux 等受限情况下，可能返回空数组。\n}\n\ninterface GetCloudSpaceResponseDataSync {\n  size: number; // 云端同步数据的大小 (字节)\n  hSize: string; // 人类可读的云端同步数据大小 (例如 '1.2 GB')，仅当服务商为思源官方时有效，其他为'-'\n  updated: string; // 云端同步数据最后更新时间戳 (格式可能为 Unix 时间戳或特定日期字符串)\n  cloudName: string; // 云端同步数据存放的目录名 (例如 'main')\n  saveDir: string; // 本地同步数据实际存放的目录绝对路径\n}\n\ninterface GetCloudSpaceResponseDataBackup {\n  size: number; // 云端备份数据的大小 (字节)\n  hSize: string; // 人类可读的云端备份数据大小 (例如 '500 MB')，仅当服务商为思源官方时有效，其他为'-'\n  updated: string; // 云端备份数据最后更新时间戳 (格式可能为 Unix 时间戳或特定日期字符串)\n  saveDir: string; // 本地备份数据实际存放的目录绝对路径\n}\n\ninterface GetCloudSpaceResponseData {\n  sync: GetCloudSpaceResponseDataSync; // 云同步相关信息\n  backup: GetCloudSpaceResponseDataBackup; // 云备份相关信息\n  hAssetSize: string; // 人类可读的云端资源文件总大小 (例如 '300 MB')，仅当服务商为思源官方时有效，其他为'-'\n  hSize: string; // 人类可读的云端已用空间总大小 (同步数据 + 备份数据 + 资源文件，例如 '2 GB')，仅当服务商为思源官方时有效，其他为'-'\n  hTotalSize: string; // 人类可读的云端总可用空间大小 (例如 '10 GB')，仅当服务商为思源官方时有效，其他为'-'\n  hExchangeSize: string; // 人类可读的积分兑换云空间大小 (例如 '1 GB')，仅当服务商为思源官方时有效，其他为'-'\n  hTrafficUploadSize: string; // 人类可读的当月已用上传流量 (例如 '5 GB')，仅当服务商为思源官方时有效，其他为'-'\n  hTrafficDownloadSize: string; // 人类可读的当月已用下载流量 (例如 '12 GB')，仅当服务商为思源官方时有效，其他为'-'\n  hTrafficAPIGet: string; // 人类可读的当月 API GET 请求次数 (例如 '1.5 k')，仅当服务商为思源官方时有效，其他为'-'\n  hTrafficAPIPut: string; // 人类可读的当月 API PUT 请求次数 (例如 '800')，仅当服务商为思源官方时有效，其他为'-'\n}\n\ninterface GetCloudSpaceResponse {\n  Code: number; // API 调用返回码，0 表示成功，1 表示获取信息时发生错误\n  Msg: string; // API 调用返回消息，错误时包含错误信息\n  Data: GetCloudSpaceResponseData; // 云端空间和流量的详细信息\n}\n\ninterface PandocParams {\n  dir?: string;\n  args: Array<string>; // Pandoc 命令行参数数组\n}\n\ninterface PandocResponseData {\n  path: string; // 转换后输出文件的路径\n}\n\ninterface PandocResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: PandocResponseData; // 成功时返回的数据\n}\n\ninterface Export2LiandiParams {\n  id: string; // 要导出到链滴的文档ID\n}\n\ninterface Export2LiandiResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface ExportAsFileParams {\n  type: string; // 上传文件的MIME类型\n}\n\ninterface ExportAsFileResponseData {\n  name: string; // 处理后的文件名\n  file: string; // 文件在服务器上的可访问路径 (相对于/export/)\n}\n\ninterface ExportAsFileResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportAsFileResponseData; // 成功时返回的数据\n}\n\ninterface ExportAsciiDocParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportAsciiDocResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportAsciiDocResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportAsciiDocResponseData; // 成功时返回的数据\n}\n\ninterface ExportAttributeViewParams {\n  id: string; // 属性视图的ID (avID)\n  blockID: string; // 包含该属性视图的块ID\n}\n\ninterface ExportAttributeViewResponseData {\n  zip: string; // 导出的CSV压缩文件在服务器上的绝对路径\n}\n\ninterface ExportAttributeViewResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportAttributeViewResponseData; // 成功时返回的数据\n}\n\ninterface ExportDataResponseData {\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportDataResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportDataResponseData; // 成功时返回的数据\n}\n\ninterface ExportDataInFolderParams {\n  folder: string; // 要导出数据的文件夹路径 (相对于工作空间data目录)\n}\n\ninterface ExportDataInFolderResponseData {\n  name: string; // 导出的压缩包文件名 (不含路径)\n}\n\ninterface ExportDataInFolderResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportDataInFolderResponseData; // 成功时返回的数据\n}\n\ninterface ExportDocxParams {\n  id: string; // 要导出的文档ID\n  savePath: string; // 服务器上保存 .docx 文件的绝对路径\n  removeAssets: boolean; // 是否移除导出的 Word 文件中包含的资源文件（如图片）的原始文件\n  merge?: boolean;\n}\n\ninterface ExportDocxResponseData {\n  path: string; // 最终生成的 .docx 文件在服务器上的绝对路径\n}\n\ninterface ExportDocxResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportDocxResponseData; // 成功时返回的数据\n}\n\ninterface ExportEPUBParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportEPUBResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportEPUBResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportEPUBResponseData; // 成功时返回的数据\n}\n\ninterface ExportHTMLParams {\n  id: string; // 要导出的文档ID\n  pdf: boolean; // 是否为导出 PDF 进行预处理（例如，处理链接和资源路径以适应 PDF 生成环境）\n  savePath: string; // 服务器上保存 HTML 文件的绝对路径 (如果 pdf 为 true，则此路径可能用于临时存储)\n  keepFold?: boolean;\n  merge?: boolean;\n}\n\ninterface ExportHTMLResponseData {\n  id: string; // 导出的文档ID\n  name: string; // 文档的原始名称\n  content: string; // 生成的 HTML 内容\n}\n\ninterface ExportHTMLResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportHTMLResponseData; // 成功时返回的数据\n}\n\ninterface ExportMdParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportMdResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportMdResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportMdResponseData; // 成功时返回的数据\n}\n\ninterface ExportMdContentParams {\n  id: string; // 要导出 Markdown 内容的文档ID\n  refMode?: number;\n  embedMode?: number;\n  yfm?: boolean;\n}\n\ninterface ExportMdContentResponseData {\n  hPath: string; // 文档的人类可读路径 (面包屑路径)\n  content: string; // 导出的 Markdown 文本内容\n}\n\ninterface ExportMdContentResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportMdContentResponseData; // 成功时返回的数据\n}\n\ninterface ExportMdHTMLParams {\n  id: string; // 要导出 HTML 内容的文档ID\n  savePath: string; // 服务器上保存 HTML 文件的绝对路径 (此参数在后端代码中存在但似乎未实际用于此接口，可能为遗留或通用逻辑)\n}\n\ninterface ExportMdHTMLResponseData {\n  id: string; // 导出的文档ID\n  name: string; // 文档的原始名称\n  content: string; // 生成的纯 HTML 内容\n}\n\ninterface ExportMdHTMLResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportMdHTMLResponseData; // 成功时返回的数据\n}\n\ninterface ExportMdsParams {\n  ids: Array<string>; // 要导出的文档ID数组\n}\n\ninterface ExportMdsResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportMdsResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportMdsResponseData; // 成功时返回的数据\n}\n\ninterface ExportMediaWikiParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportMediaWikiResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportMediaWikiResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportMediaWikiResponseData; // 成功时返回的数据\n}\n\ninterface ExportNotebookMdParams {\n  notebook: string; // 要导出的笔记本ID\n}\n\ninterface ExportNotebookMdResponseData {\n  name: string; // 导出的 .zip 文件名 (通常为笔记本名称)\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportNotebookMdResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportNotebookMdResponseData; // 成功时返回的数据\n}\n\ninterface ExportNotebookSYParams {\n  id: string; // 要导出的笔记本ID\n}\n\ninterface ExportNotebookSYResponseData {\n  zip: string; // 导出的 .sy 文件在服务器上的绝对路径\n}\n\ninterface ExportNotebookSYResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportNotebookSYResponseData; // 成功时返回的数据\n}\n\ninterface ExportODTParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportODTResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportODTResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportODTResponseData; // 成功时返回的数据\n}\n\ninterface ExportOPMLParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportOPMLResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportOPMLResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportOPMLResponseData; // 成功时返回的数据\n}\n\ninterface ExportOrgModeParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportOrgModeResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportOrgModeResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportOrgModeResponseData; // 成功时返回的数据\n}\n\ninterface ExportPreviewHTMLParams {\n  id: string; // 要导出预览 HTML 的文档ID\n  keepFold?: boolean;\n  merge?: boolean;\n  image?: boolean;\n}\n\ninterface ExportPreviewHTMLResponseData {\n  id: string; // 导出的文档ID\n  name: string; // 文档的原始名称\n  content: string; // 生成的预览 HTML 内容\n  attrs: Record<string, string>; // 文档块的属性 (IAL)\n  type: string; // 文档块的类型 (如 'd' 表示文档块)\n}\n\ninterface ExportPreviewHTMLResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportPreviewHTMLResponseData; // 成功时返回的数据\n}\n\ninterface ExportRTFParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportRTFResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportRTFResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportRTFResponseData; // 成功时返回的数据\n}\n\ninterface ExportReStructuredTextParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportReStructuredTextResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportReStructuredTextResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportReStructuredTextResponseData; // 成功时返回的数据\n}\n\ninterface ExportResourcesParams {\n  name?: string;\n  paths: Array<string>; // 要导出的文件或文件夹在工作空间中的相对路径数组 (相对于data目录)\n}\n\ninterface ExportResourcesResponseData {\n  path: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportResourcesResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportResourcesResponseData; // 成功时返回的数据\n}\n\ninterface ExportSYParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportSYResponseData {\n  name: string; // 导出的 .sy 文件名\n  zip: string; // 导出的 .sy 文件在服务器上的绝对路径\n}\n\ninterface ExportSYResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportSYResponseData; // 成功时返回的数据\n}\n\ninterface ExportTempContentParams {\n  content: string; // 要导出预览的 Markdown 内容字符串\n  mode?: number;\n  theme?: string;\n  title?: string;\n  type?: string;\n  css?: string;\n  js?: string;\n}\n\ninterface ExportTempContentResponseData {\n  url: string; // 生成的临时内容预览 URL (形如 http://localhost:6806/export/temp/xxxxxxx)\n}\n\ninterface ExportTempContentResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportTempContentResponseData; // 成功时返回的数据\n}\n\ninterface ExportTextileParams {\n  id: string; // 要导出的文档ID\n}\n\ninterface ExportTextileResponseData {\n  name: string; // 导出的 .zip 文件名\n  zip: string; // 导出的 .zip 文件在服务器上的绝对路径\n}\n\ninterface ExportTextileResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportTextileResponseData; // 成功时返回的数据\n}\n\ninterface ExportPreviewParams {\n  id: string; // 要获取 HTML 预览的文档ID\n}\n\ninterface ExportPreviewResponseData {\n  html: string; // 生成的文档 HTML 预览内容\n}\n\ninterface ExportPreviewResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: ExportPreviewResponseData; // 成功时返回的数据\n}\n\ninterface ProcessPDFParams {\n  id: string; // 相关文档的ID (用于日志记录或上下文关联)\n  path: string; // 已生成的 HTML 文件的绝对路径 (该文件将被用于生成或处理 PDF)\n  merge?: boolean;\n  removeAssets: boolean; // 处理完成后是否移除相关资源文件\n  watermark: boolean; // 是否添加水印\n}\n\ninterface ProcessPDFResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface ExtensionCopyResponseData {\n  md: string; // 转换后或直接获取的 Markdown 内容\n  withMath: boolean; // 指示转换后的 Markdown 内容中是否包含数学公式 (KaTeX)\n}\n\ninterface ExtensionCopyResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息，失败时错误信息显示在这里\n  Data: ExtensionCopyResponseData | null;\n}\n\ninterface CopyFileParams {\n  src: string; // 源文件路径。如果是资源文件，则为相对于 assets 目录的路径；如果是普通工作空间文件，则为相对于工作空间根目录的路径。后端会尝试将其解析为绝对路径。注意：此接口不能直接复制目录。后台实现会先尝试将其作为资源文件解析，如果失败则作为工作空间普通文件解析。若要复制普通文件，建议使用 /api/file/globalCopyFiles。 \n  dest: string; // 目标文件绝对路径。\n}\n\ninterface CopyFileResponseData {\n  closeTimeout?: number;\n}\n\ninterface CopyFileResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: CopyFileResponseData | null;\n}\n\ninterface GetFileParams {\n  path: string; // 要获取内容的文件路径 (相对于工作空间根目录)。\n}\n\ninterface GetFileResponse {\n  Code: number; // 错误状态码 (例如 403, 404, 500)\n  Msg: string; // 错误消息\n}\n\ninterface GetUniqueFilenameParams {\n  path: string; // 原始文件路径 (通常包含期望的文件名和扩展名)。\n}\n\ninterface GetUniqueFilenameResponseData {\n  path: string; // 处理后的唯一文件路径。\n}\n\ninterface GetUniqueFilenameResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: GetUniqueFilenameResponseData;\n}\n\ninterface GlobalCopyFilesParams {\n  srcs: Array<string>; // 要复制的源文件绝对路径数组。如果任何一个文件不存在，操作将失败。注意：不能是目录。\n  destDir: string; // 目标目录路径 (相对于工作空间根目录)。\n}\n\ninterface GlobalCopyFilesResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface PutFileResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface ReadDirParams {\n  path: string; // 要读取的目录路径 (相对于工作空间根目录)。\n}\n\ninterface ReadDirResponseDataItem {\n  name: string; // 文件名或目录名\n  isDir: boolean; // 是否为目录\n  isSymlink: boolean; // 是否为符号链接\n  updated: number; // 最后修改时间的Unix时间戳 (秒)\n}\n\ninterface ReadDirResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: Array<ReadDirResponseDataItem>; // 目录中的条目列表\n}\n\ninterface RemoveFileParams {\n  path: string; // 要移除的文件或目录路径 (相对于工作空间根目录)。\n}\n\ninterface RemoveFileResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface RenameFileParams {\n  path: string; // 原始文件或目录路径 (相对于工作空间根目录)。\n  newPath: string; // 新的文件或目录路径 (相对于工作空间根目录)。\n}\n\ninterface RenameFileResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface ChangeSortParams {\n  notebook: string; // 要更改排序的笔记本ID。\n  paths: Array<string>; // 需要调整排序的文档路径列表。这些路径通常是文档在其笔记本内的相对路径。后端会根据这些路径的顺序来更新文档树的排序。\n}\n\ninterface ChangeSortResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface CreateDailyNoteParams {\n  notebook: string; // 要在哪个笔记本下创建日记的ID。\n  app?: string;\n  callback?: string;\n}\n\ninterface CreateDailyNoteResponseData {\n  id: string; // 创建或获取到的日记文档的根块ID。\n}\n\ninterface CreateDailyNoteResponse {\n  Code: number; // 响应状态码。0 表示成功创建或获取；1 表示笔记本未找到；-1 表示其他错误。\n  Msg: string; // 响应消息。\n  Data?: CreateDailyNoteResponseData;\n}\n\ninterface CreateDocParams {\n  notebook: string; // 文档所属的笔记本ID。\n  path: string; // 文档的存储路径 (相对于笔记本根目录，例如 '/folder/documentName')。\n  title: string; // 文档的标题。\n  md: string; // 文档的初始 Markdown 内容。\n  sorts?: Array<string>;\n  listDocTree?: boolean;\n  callback?: string;\n}\n\ninterface CreateDocResponseData {\n  id: string; // 新创建文档的根块ID。\n  closeTimeout?: number;\n}\n\ninterface CreateDocResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: CreateDocResponseData; // 成功时返回新文档的ID；失败时可能包含 closeTimeout。\n}\n\ninterface CreateDocWithMdParams {\n  notebook: string; // 文档所属的笔记本ID。\n  path: string; // 文档的人类可读路径 (HPath)，例如 '/My Notes/New Document'。后端会处理路径中的非法字符和长度限制。\n  markdown: string; // 新文档的Markdown内容。\n  parentID?: string;\n  id?: string;\n  tags?: string;\n  withMath?: boolean;\n  clippingHref?: string;\n  listDocTree?: boolean;\n  callback?: string;\n}\n\ninterface CreateDocWithMdResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: string;\n}\n\ninterface Doc2HeadingParams {\n  srcID: string; // 要转换的源文档的ID。\n  targetID: string; // 目标文档中，新标题块将插入到其后的那个标题块的ID。如果 after 为 false，则插入其前。\n  after: boolean; // 是否将源文档内容插入到 targetID 块之后 (true) 或之前 (false)。\n}\n\ninterface Doc2HeadingResponseData {\n  srcTreeBox: string; // 源文档所在的笔记本ID。\n  srcTreePath: string; // 源文档的路径。\n  closeTimeout?: number;\n}\n\ninterface Doc2HeadingResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: Doc2HeadingResponseData; // 成功时返回源文档的笔记本和路径信息；失败时可能包含 closeTimeout。\n}\n\ninterface DuplicateDocParams {\n  id: string; // 要复制的源文档的ID。\n  listDocTree?: boolean;\n  callback?: string;\n}\n\ninterface DuplicateDocResponseData {\n  id: string; // 新复制出来的文档的根块ID。\n  notebook: string; // 新文档所在的笔记本ID。\n  path: string; // 新文档的存储路径。\n  hPath: string; // 新文档的人类可读路径 (HPath)。\n  closeTimeout?: number;\n}\n\ninterface DuplicateDocResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: DuplicateDocResponseData; // 成功时返回新文档的相关信息；失败时可能包含 closeTimeout。\n}\n\ninterface GetDocParams {\n  id: string; // 要获取的文档或块的ID。\n  index?: number;\n  query?: string;\n  queryMethod?: number;\n  queryTypes?: Record<string, boolean>;\n  mode?: number;\n  size?: number;\n  startID?: string;\n  endID?: string;\n  isBacklink?: boolean;\n  originalRefBlockIDs?: Record<string, string>;\n  highlight?: boolean;\n  reqId?: string;\n}\n\ninterface GetDocResponseData {\n  id: string; // 请求的原始块ID。\n  mode: number; // 请求的加载模式。\n  parentID: string; // 父块ID。\n  parent2ID: string; // 父父块ID。\n  rootID: string; // 文档根块ID。\n  type: number; // 块类型。\n  content: string; // 块的DOM内容 (HTML字符串)。\n  blockCount: number; // 返回的块数量。\n  eof: boolean; // 是否已到达文档末尾 (在向下加载模式时)。\n  scroll: boolean; // 是否需要滚动定位。\n  box: string; // 文档所属的笔记本ID。\n  path: string; // 文档的存储路径。\n  isSyncing: boolean; // 文档当前是否正在同步中。\n  isBacklinkExpand: boolean; // 是否为反链展开上下文。\n  keywords?: Array<string>;\n  reqId?: string;\n}\n\ninterface GetDocResponse {\n  Code: number; // 响应状态码。0: 成功；1: 通用错误；3: 块未找到。\n  Msg: string; // 响应消息。\n  Data?: GetDocResponseData;\n}\n\ninterface GetDocCreateSavePathParams {\n  notebook: string; // 当前操作的笔记本ID。计算默认保存位置时会参考此笔记本的配置及全局配置。\n}\n\ninterface GetDocCreateSavePathResponseData {\n  box: string; // 计算得出的用于保存新文档的笔记本ID。\n  path: string; // 计算得出的用于保存新文档的人类可读路径 (HPath)。\n}\n\ninterface GetDocCreateSavePathResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: GetDocCreateSavePathResponseData;\n}\n\ninterface GetFullHPathByIDParams {\n  id: string; // 要查询的文档或块的ID。\n}\n\ninterface GetFullHPathByIDResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: string;\n}\n\ninterface GetHPathByIDParams {\n  id: string; // 要查询的文档或块的ID。\n}\n\ninterface GetHPathByIDResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: string;\n}\n\ninterface GetHPathByPathParams {\n  notebook: string; // 文档所在的笔记本ID。\n  path: string; // 文档的实际存储路径 (相对于笔记本根目录，例如 '/folderName/documentName.sy')。\n}\n\ninterface GetHPathByPathResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: string;\n}\n\ninterface GetHPathsByPathsParamsPathsItem {\n  notebook: string; // 文档所在的笔记本ID。\n  path: string; // 文档的实际存储路径 (相对于笔记本根目录)。\n}\n\ninterface GetHPathsByPathsParams {\n  paths: Array<GetHPathsByPathsParamsPathsItem>; // 包含笔记本ID和文档路径的对象数组。\n}\n\ninterface GetHPathsByPathsResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: Array<string>;\n}\n\ninterface GetIDsByHPathParams {\n  notebook: string; // 文档所在的笔记本ID。\n  path: string; // 要查询的文档的人类可读路径 (HPath)，例如 '/My Notes/Topic'。\n}\n\ninterface GetIDsByHPathResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: Array<string>;\n}\n\ninterface GetPathByIDParams {\n  id: string; // 要查询的文档或块的ID。\n}\n\ninterface GetPathByIDResponseData {\n  path: string; // 文档的实际存储路径 (相对于笔记本根目录，例如 '/folderName/documentName.sy')。\n  notebook: string; // 文档所在的笔记本ID。\n}\n\ninterface GetPathByIDResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: GetPathByIDResponseData;\n}\n\ninterface GetRefCreateSavePathParams {\n  notebook: string; // 当前操作的笔记本ID。计算默认保存位置时会参考此笔记本的配置及全局配置。\n}\n\ninterface GetRefCreateSavePathResponseData {\n  box: string; // 计算得出的用于保存新块引文档的笔记本ID。\n  path: string; // 计算得出的用于保存新块引文档的人类可读路径 (HPath)。\n}\n\ninterface GetRefCreateSavePathResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: GetRefCreateSavePathResponseData;\n}\n\ninterface Heading2DocParams {\n  srcHeadingID: string; // 源文档中要转换为新文档的标题块的ID。\n  targetNoteBook: string; // 新文档将要创建在哪个笔记本的ID。\n  targetPath?: string;\n  previousPath?: string;\n  callback?: string;\n}\n\ninterface Heading2DocResponseData {\n  srcRootBlockID: string; // 转换后新文档的根块ID。\n  path: string; // 新文档在目标笔记本中的实际存储路径。\n  closeTimeout?: number;\n}\n\ninterface Heading2DocResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: Heading2DocResponseData; // 成功时返回新文档的ID和路径；失败时可能包含 closeTimeout。\n}\n\ninterface Li2DocParams {\n  srcListItemID: string; // 源文档中要转换为新文档的列表项的ID。\n  targetNoteBook: string; // 新文档将要创建在哪个笔记本的ID。\n  targetPath?: string;\n  previousPath?: string;\n  callback?: string;\n}\n\ninterface Li2DocResponseData {\n  srcRootBlockID: string; // 转换后新文档的根块ID。\n  path: string; // 新文档在目标笔记本中的实际存储路径。\n  closeTimeout?: number;\n}\n\ninterface Li2DocResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: Li2DocResponseData; // 成功时返回新文档的ID和路径；失败时可能包含 closeTimeout。\n}\n\ninterface ListDocTreeParams {\n  notebook: string; // 要列出文档树的笔记本ID。\n  path: string; // 要列出文档树的起始路径 (相对于笔记本根目录，例如 '/folderName')。通常用于列出某个文件夹下的文档结构。\n}\n\ninterface ListDocTreeResponseDataTreeItem {\n  id: string; // 文档或目录的ID。\n  children?: Array<any>;\n}\n\ninterface ListDocTreeResponseData {\n  tree: Array<ListDocTreeResponseDataTreeItem>; // 文档树结构数组。\n}\n\ninterface ListDocTreeResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: ListDocTreeResponseData;\n}\n\ninterface ListDocsByPathParams {\n  notebook: string; // 笔记本ID。\n  path: string; // 要列出文档的路径 (相对于笔记本根目录，例如 '/folderName')。空字符串表示笔记本根目录。\n  sort?: number;\n  flashcard?: boolean;\n  maxListCount?: number;\n  showHidden?: boolean;\n  ignoreMaxListHint?: boolean;\n}\n\ninterface ListDocsByPathResponseDataFilesItem {\n  type: string; // 条目类型，'d' 表示目录 (doc file)，'f' 表示文件 (asset file)。在 filetree 上下文，通常都是文档，但 model.File 的定义更通用。\n  name: string; // 文档名或目录名 (不含.sy后缀)。\n  alias?: string;\n  memo?: string;\n  bookmark?: string;\n  hPath: string; // 人类可读路径 (HPath)。\n  id: string; // 文档ID。\n  path: string; // 文档的实际存储路径 (相对于笔记本根目录)。\n  nameCount?: number;\n  updated: number; // 文档最后修改时间的Unix时间戳 (秒)。\n  subFileCount: number; // 如果是目录，表示其下子文档/目录的数量。\n  icon?: string;\n  sort?: number;\n  refCount?: number;\n  newFlashcardCount?: number;\n  dueFlashcardCount?: number;\n  flashcardCount?: number;\n  hidden?: boolean;\n}\n\ninterface ListDocsByPathResponseData {\n  box: string; // 请求的笔记本ID。\n  path: string; // 请求的路径。\n  files: Array<ListDocsByPathResponseDataFilesItem>; // 文档和子目录列表。\n}\n\ninterface ListDocsByPathResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: ListDocsByPathResponseData;\n}\n\ninterface MoveDocsParams {\n  fromPaths: Array<string>; // 要移动的源文档路径数组。每个路径字符串应为 '笔记本ID/文档相对路径.sy' 或 '笔记本ID/文档相对路径' 的形式。后端会处理。例如：['box123/notes/docA.sy', 'box456/folder/docB']\n  toNotebook: string; // 目标笔记本的ID。\n  toPath: string; // 目标路径 (HPath 或实际路径均可，后端会尝试解析)。文档将被移动到此路径下。例如 '/Target Folder' 或 '/Target Folder/NewName.sy' (如果只移动一个文件且想重命名)。\n  callback?: string;\n}\n\ninterface MoveDocsResponseData {\n  closeTimeout?: number;\n}\n\ninterface MoveDocsResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: MoveDocsResponseData | null;\n}\n\ninterface MoveDocsByIDParams {\n  fromIDs: Array<string>; // 要移动的源文档ID数组。\n  toID: string; // 目标文档或目录的ID。如果 toID 是一个文档，则 fromIDs 中的文档会成为其子文档（如果内核逻辑支持）；如果 toID 是一个目录（通常是一个文档的HPath的父级），则 fromIDs 中的文档会被移动到该目录下。具体行为需参考内核实现细节。后台实现中，会先通过 toID 获取其 toNotebook 和 toPath，然后调用 model.MoveDocs。\n  callback?: string;\n}\n\ninterface MoveDocsByIDResponseData {\n  closeTimeout?: number;\n}\n\ninterface MoveDocsByIDResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: MoveDocsByIDResponseData | null;\n}\n\ninterface MoveLocalShorthandsParams {\n  notebook: string; // 要处理闪念速记的笔记本ID。\n  path?: string;\n  parentID?: string;\n}\n\ninterface MoveLocalShorthandsResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface RefreshFiletreeResponse {\n  Code: number; // 响应状态码，0 表示成功（操作已异步启动）\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface RemoveDocParams {\n  notebook: string; // 文档所在的笔记本ID。\n  path: string; // 要移除的文档的相对路径 (相对于笔记本根目录，例如 '/notes/docToRemove.sy')。\n}\n\ninterface RemoveDocResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface RemoveDocByIDParams {\n  id: string; // 要移除的文档的ID。\n}\n\ninterface RemoveDocByIDResponseData {\n  closeTimeout?: number;\n}\n\ninterface RemoveDocByIDResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: RemoveDocByIDResponseData | null;\n}\n\ninterface RemoveDocsParams {\n  paths: Array<string>; // 要移除的文档的复合路径数组。每个路径字符串应为 '笔记本ID/文档相对路径.sy' 或 '笔记本ID/文档相对路径' 的形式。例如：['box123/notes/docA.sy', 'box456/folder/docB']\n}\n\ninterface RemoveDocsResponse {\n  Code: number; // 响应状态码，0 表示成功（即使部分路径无效也可能返回0，具体需看Msg）\n  Msg: string; // 响应消息。如果部分文档移除失败，Msg中可能会有提示。\n  Data?: null;\n}\n\ninterface RemoveIndexesParams {\n  paths: Array<string>; // 需要移除索引的文档绝对路径列表。这些路径通常指向 data 目录下的 .sy 文件，例如 '/data/notebookId/path/to/doc.sy'。\n}\n\ninterface RemoveIndexesResponse {\n  Code: number; // 响应状态码，0 表示成功（操作已接受）\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface RenameDocParams {\n  notebook: string; // 文档所在的笔记本ID。\n  path: string; // 要重命名的文档的当前相对路径 (相对于笔记本根目录，例如 '/notes/oldName.sy')。\n  title: string; // 文档的新标题 (不需要带 .sy 后缀)。\n}\n\ninterface RenameDocResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface RenameDocByIDParams {\n  id: string; // 要重命名的文档的ID。\n  title: string; // 文档的新标题 (不需要带 .sy 后缀)。\n}\n\ninterface RenameDocByIDResponseData {\n  closeTimeout?: number;\n}\n\ninterface RenameDocByIDResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: RenameDocByIDResponseData | null;\n}\n\ninterface SearchDocsParams {\n  k: string; // 搜索关键词。\n  flashcard?: boolean;\n}\n\ninterface SearchDocsResponseDataItem {\n  box: string; // 文档所属的笔记本ID。\n  path: string; // 文档的实际存储路径。\n  hPath: string; // 文档的人类可读路径。\n  id: string; // 文档ID。\n  name: string; // 文档名。\n  nameRaw: string; // 文档名原文（可能包含高亮标签）。\n  alias?: string;\n  aliasRaw?: string;\n  memo?: string;\n}\n\ninterface SearchDocsResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data?: Array<SearchDocsResponseDataItem>;\n}\n\ninterface UpsertIndexesParams {\n  paths: Array<string>; // 需要更新/插入索引的文档绝对路径列表。这些路径通常指向 data 目录下的 .sy 文件，例如 '/data/notebookId/path/to/doc.sy'。\n}\n\ninterface UpsertIndexesResponse {\n  Code: number; // 响应状态码，0 表示成功（操作已接受）\n  Msg: string; // 响应消息\n  Data?: null;\n}\n\ninterface AutoSpaceParams {\n  id: string; // 要处理的块 ID。\n}\n\ninterface AutoSpaceResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: null; // 操作成功时为 null\n}\n\ninterface NetAssets2LocalAssetsParams {\n  id: string; // 要处理的块 ID，该块内的网络资源将被转存。\n}\n\ninterface NetAssets2LocalAssetsResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: null; // 操作成功时为 null\n}\n\ninterface NetImg2LocalAssetsParams {\n  id: string; // 要处理的块 ID。块内的网络图片将被转存。\n  url?: string;\n}\n\ninterface NetImg2LocalAssetsResponse {\n  Code: number; // API 调用返回码，0 表示成功\n  Msg: string; // API 调用返回消息\n  Data: null; // 操作成功时为 null\n}\n\ninterface GetGraphParamsConfType {\n  tag: boolean; // 是否显示标签节点\n  paragraph: boolean; // 是否显示段落块节点\n  heading: boolean; // 是否显示标题块节点\n  math: boolean; // 是否显示数学公式块节点\n  code: boolean; // 是否显示代码块节点\n  table: boolean; // 是否显示表格块节点\n  list: boolean; // 是否显示列表块节点\n  listItem: boolean; // 是否显示列表项块节点\n  blockquote: boolean; // 是否显示引述块节点\n  super: boolean; // 是否显示超级块节点\n}\n\ninterface GetGraphParamsConfD3 {\n  nodeSize: number; // 节点大小\n  linkWidth: number; // 连线宽度\n  lineOpacity: number; // 连线不透明度\n  centerStrength: number; // 中心力强度\n  collideRadius: number; // 碰撞半径\n  collideStrength: number; // 碰撞力强度\n  linkDistance: number; // 连线距离\n  arrow: boolean; // 是否显示箭头\n}\n\ninterface GetGraphParamsConf {\n  minRefs: number; // 节点最少被引用次数（低于此值将被隐藏）\n  dailyNote: boolean; // 是否包含日记节点\n  type: GetGraphParamsConfType; // 节点类型筛选配置\n  d3: GetGraphParamsConfD3; // D3力导向图配置\n}\n\ninterface GetGraphParams {\n  reqId: any; // 请求 ID，用于跟踪异步请求\n  k: string; // 搜索关键词，用于筛选关系图中的节点\n  conf: GetGraphParamsConf; // 全局关系图配置项\n}\n\ninterface GetGraphResponseNodesItem {\n  id: string; // 节点 ID (通常是块 ID 或标签名)\n  box: string; // 节点所属的笔记本 ID\n  path: string; // 节点对应的文档路径\n  size: number; // 节点在图中的显示大小\n  title?: string;\n  label: string; // 节点标签 (显示在节点上的文字)\n  type: string; // 节点类型 (块类型或 'tag')\n  refs: number; // 节点的引用数量\n  defs: number; // 节点的被引用数量 (定义数量)\n}\n\ninterface GetGraphResponseLinksItemArrowsTo {\n  enabled: boolean; // 箭头是否启用\n}\n\ninterface GetGraphResponseLinksItemArrows {\n  to?: GetGraphResponseLinksItemArrowsTo;\n}\n\ninterface GetGraphResponseLinksItem {\n  from: string; // 起始节点 ID\n  to: string; // 目标节点 ID\n  ref: boolean; // 是否为引用关系 (true: 引用关系, false: 父子层级关系)\n  arrows?: GetGraphResponseLinksItemArrows;\n}\n\ninterface GetGraphResponseConfType {\n  tag: boolean; // 是否显示标签节点\n  paragraph: boolean; // 是否显示段落块节点\n  heading: boolean; // 是否显示标题块节点\n  math: boolean; // 是否显示数学公式块节点\n  code: boolean; // 是否显示代码块节点\n  table: boolean; // 是否显示表格块节点\n  list: boolean; // 是否显示列表块节点\n  listItem: boolean; // 是否显示列表项块节点\n  blockquote: boolean; // 是否显示引述块节点\n  super: boolean; // 是否显示超级块节点\n}\n\ninterface GetGraphResponseConfD3 {\n  nodeSize: number; // 节点大小\n  linkWidth: number; // 连线宽度\n  lineOpacity: number; // 连线不透明度\n  centerStrength: number; // 中心力强度\n  collideRadius: number; // 碰撞半径\n  collideStrength: number; // 碰撞力强度\n  linkDistance: number; // 连线距离\n  arrow: boolean; // 是否显示箭头\n}\n\ninterface GetGraphResponseConf {\n  minRefs: number; // 节点最少被引用次数（低于此值将被隐藏）\n  dailyNote: boolean; // 是否包含日记节点\n  type: GetGraphResponseConfType; // 节点类型筛选配置\n  d3: GetGraphResponseConfD3; // D3力导向图配置\n}\n\ninterface GetGraphResponse {\n  nodes: Array<GetGraphResponseNodesItem>; // 关系图中的节点列表\n  links: Array<GetGraphResponseLinksItem>; // 关系图中的边列表\n  conf: GetGraphResponseConf; // 更新后的全局关系图配置项\n  box: string; // 当前知识空间（笔记本组）ID\n  reqId: any; // 请求 ID，与请求参数中的 reqId 一致\n}\n\ninterface GetLocalGraphParamsConfType {\n  tag: boolean; // 是否显示标签节点\n  paragraph: boolean; // 是否显示段落块节点\n  heading: boolean; // 是否显示标题块节点\n  math: boolean; // 是否显示数学公式块节点\n  code: boolean; // 是否显示代码块节点\n  table: boolean; // 是否显示表格块节点\n  list: boolean; // 是否显示列表块节点\n  listItem: boolean; // 是否显示列表项块节点\n  blockquote: boolean; // 是否显示引述块节点\n  super: boolean; // 是否显示超级块节点\n}\n\ninterface GetLocalGraphParamsConfD3 {\n  nodeSize: number; // 节点大小\n  linkWidth: number; // 连线宽度\n  lineOpacity: number; // 连线不透明度\n  centerStrength: number; // 中心力强度\n  collideRadius: number; // 碰撞半径\n  collideStrength: number; // 碰撞力强度\n  linkDistance: number; // 连线距离\n  arrow: boolean; // 是否显示箭头\n}\n\ninterface GetLocalGraphParamsConf {\n  dailyNote: boolean; // 是否包含日记节点\n  type: GetLocalGraphParamsConfType; // 节点类型筛选配置\n  d3: GetLocalGraphParamsConfD3; // D3力导向图配置\n}\n\ninterface GetLocalGraphParams {\n  reqId: any; // 请求 ID，用于跟踪异步请求\n  id: string; // 文档 ID，用于构建局部关系图的中心节点\n  k: string; // 搜索关键词，用于筛选关系图中的节点\n  conf: GetLocalGraphParamsConf; // 局部关系图配置项\n}\n\ninterface GetLocalGraphResponseNodesItem {\n  id: string; // 节点 ID (通常是块 ID 或标签名)\n  box: string; // 节点所属的笔记本 ID\n  path: string; // 节点对应的文档路径\n  size: number; // 节点在图中的显示大小\n  title?: string;\n  label: string; // 节点标签 (显示在节点上的文字)\n  type: string; // 节点类型 (块类型或 'tag')\n  refs: number; // 节点的引用数量\n  defs: number; // 节点的被引用数量 (定义数量)\n}\n\ninterface GetLocalGraphResponseLinksItemArrowsTo {\n  enabled: boolean; // 箭头是否启用\n}\n\ninterface GetLocalGraphResponseLinksItemArrows {\n  to?: GetLocalGraphResponseLinksItemArrowsTo;\n}\n\ninterface GetLocalGraphResponseLinksItem {\n  from: string; // 起始节点 ID\n  to: string; // 目标节点 ID\n  ref: boolean; // 是否为引用关系 (true: 引用关系, false: 父子层级关系)\n  arrows?: GetLocalGraphResponseLinksItemArrows;\n}\n\ninterface GetLocalGraphResponseConfType {\n  tag: boolean; // 是否显示标签节点\n  paragraph: boolean; // 是否显示段落块节点\n  heading: boolean; // 是否显示标题块节点\n  math: boolean; // 是否显示数学公式块节点\n  code: boolean; // 是否显示代码块节点\n  table: boolean; // 是否显示表格块节点\n  list: boolean; // 是否显示列表块节点\n  listItem: boolean; // 是否显示列表项块节点\n  blockquote: boolean; // 是否显示引述块节点\n  super: boolean; // 是否显示超级块节点\n}\n\ninterface GetLocalGraphResponseConfD3 {\n  nodeSize: number; // 节点大小\n  linkWidth: number; // 连线宽度\n  lineOpacity: number; // 连线不透明度\n  centerStrength: number; // 中心力强度\n  collideRadius: number; // 碰撞半径\n  collideStrength: number; // 碰撞力强度\n  linkDistance: number; // 连线距离\n  arrow: boolean; // 是否显示箭头\n}\n\ninterface GetLocalGraphResponseConf {\n  dailyNote: boolean; // 是否包含日记节点\n  type: GetLocalGraphResponseConfType; // 节点类型筛选配置\n  d3: GetLocalGraphResponseConfD3; // D3力导向图配置\n}\n\ninterface GetLocalGraphResponse {\n  id: string; // 请求的文档 ID\n  box: string; // 当前知识空间（笔记本组）ID\n  nodes: Array<GetLocalGraphResponseNodesItem>; // 关系图中的节点列表\n  links: Array<GetLocalGraphResponseLinksItem>; // 关系图中的边列表\n  conf: GetLocalGraphResponseConf; // 更新后的局部关系图配置项\n  reqId: any; // 请求 ID，与请求参数中的 reqId 一致\n}\n\ninterface ResetGraphResponseConfType {\n  tag: boolean; // 是否显示标签节点\n  paragraph: boolean; // 是否显示段落块节点\n  heading: boolean; // 是否显示标题块节点\n  math: boolean; // 是否显示数学公式块节点\n  code: boolean; // 是否显示代码块节点\n  table: boolean; // 是否显示表格块节点\n  list: boolean; // 是否显示列表块节点\n  listItem: boolean; // 是否显示列表项块节点\n  blockquote: boolean; // 是否显示引述块节点\n  super: boolean; // 是否显示超级块节点\n}\n\ninterface ResetGraphResponseConfD3 {\n  nodeSize: number; // 节点大小\n  linkWidth: number; // 连线宽度\n  lineOpacity: number; // 连线不透明度\n  centerStrength: number; // 中心力强度\n  collideRadius: number; // 碰撞半径\n  collideStrength: number; // 碰撞力强度\n  linkDistance: number; // 连线距离\n  arrow: boolean; // 是否显示箭头\n}\n\ninterface ResetGraphResponseConf {\n  minRefs: number; // 节点最少被引用次数（低于此值将被隐藏）\n  dailyNote: boolean; // 是否包含日记节点\n  type: ResetGraphResponseConfType; // 节点类型筛选配置\n  d3: ResetGraphResponseConfD3; // D3力导向图配置\n}\n\ninterface ResetGraphResponse {\n  conf: ResetGraphResponseConf; // 重置后的全局关系图配置项\n}\n\ninterface ResetLocalGraphResponseConfType {\n  tag: boolean; // 是否显示标签节点\n  paragraph: boolean; // 是否显示段落块节点\n  heading: boolean; // 是否显示标题块节点\n  math: boolean; // 是否显示数学公式块节点\n  code: boolean; // 是否显示代码块节点\n  table: boolean; // 是否显示表格块节点\n  list: boolean; // 是否显示列表块节点\n  listItem: boolean; // 是否显示列表项块节点\n  blockquote: boolean; // 是否显示引述块节点\n  super: boolean; // 是否显示超级块节点\n}\n\ninterface ResetLocalGraphResponseConfD3 {\n  nodeSize: number; // 节点大小\n  linkWidth: number; // 连线宽度\n  lineOpacity: number; // 连线不透明度\n  centerStrength: number; // 中心力强度\n  collideRadius: number; // 碰撞半径\n  collideStrength: number; // 碰撞力强度\n  linkDistance: number; // 连线距离\n  arrow: boolean; // 是否显示箭头\n}\n\ninterface ResetLocalGraphResponseConf {\n  dailyNote: boolean; // 是否包含日记节点\n  type: ResetLocalGraphResponseConfType; // 节点类型筛选配置\n  d3: ResetLocalGraphResponseConfD3; // D3力导向图配置\n}\n\ninterface ResetLocalGraphResponse {\n  conf: ResetLocalGraphResponseConf; // 重置后的局部关系图配置项\n}\n\ninterface ClearWorkspaceHistoryResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: null; // 成功时固定为 null\n}\n\ninterface GetDocHistoryContentResponseData {\n  id: string; // 文档的 ID\n  rootID: string; // 文档的根块 ID\n  content: string; // 文档历史版本的内容 (HTML 格式)\n  isLargeDoc: boolean; // 是否为大文档\n}\n\ninterface GetDocHistoryContentResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: GetDocHistoryContentResponseData | null;\n}\n\ninterface GetHistoryItemsResponseDataItemsItem {\n  id: string; // 历史记录条目的唯一ID (通常为历史文件名或路径相关ID)\n  title: string; // 历史记录条目的标题或名称\n  content: string; // 历史记录条目的简要内容或描述\n  notebookID: string; // 所属笔记本ID\n  notebookName: string; // 所属笔记本名称\n  path: string; // 相关文档或资源的路径\n  type: number; // 历史记录类型\n  created: string; // 创建时间 (Unix时间戳字符串或特定格式日期)\n  updated: string; // 更新时间 (Unix时间戳字符串或特定格式日期)\n  size: number; // 大小 (字节)\n  hSize: string; // 人类可读的大小\n  count: number; // 相关计数 (例如，如果是笔记本历史，可能表示包含的文档数)\n  repoID?: string;\n  historyName?: string;\n  historyPath?: string;\n  docID?: string;\n}\n\ninterface GetHistoryItemsResponseData {\n  items: Array<GetHistoryItemsResponseDataItemsItem>; // 符合条件的历史条目数组\n}\n\ninterface GetHistoryItemsResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: GetHistoryItemsResponseData | null;\n}\n\ninterface GetNotebookHistoryResponseDataHistoriesItem {\n  id: string; // 历史记录的唯一ID (通常为历史文件名或路径相关ID)\n  title: string; // 历史记录的标题 (通常是笔记本名称)\n  type: number; // 历史类型 (应为2，代表笔记本历史)\n  created: string; // 历史创建的时间戳 (格式：YYYYMMDDHHmmss)\n  updated: string; // 历史更新的时间戳 (格式：YYYYMMDDHHmmss)\n  count: number; // 该历史版本包含的文档数量\n  size: number; // 历史版本占用的磁盘空间大小 (字节)\n  hSize: string; // 人类可读的磁盘空间大小\n  repoID: string; // 所属版本库ID (通常是笔记本ID)\n  historyName: string; // 历史文件名 (例如 '20230315103000.json')\n  historyPath: string; // 历史文件的完整存储路径\n}\n\ninterface GetNotebookHistoryResponseData {\n  histories: Array<GetNotebookHistoryResponseDataHistoriesItem>; // 笔记本历史记录数组\n}\n\ninterface GetNotebookHistoryResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: GetNotebookHistoryResponseData | null;\n}\n\ninterface ReindexHistoryResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: null; // 成功时固定为 null\n}\n\ninterface RollbackAssetsHistoryResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: null; // 成功时固定为 null\n}\n\ninterface RollbackDocHistoryResponseData {\n  box: string; // 文档所属的笔记本 ID\n}\n\ninterface RollbackDocHistoryResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: RollbackDocHistoryResponseData | null;\n}\n\ninterface RollbackNotebookHistoryResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: null; // 成功时固定为 null\n}\n\ninterface SearchHistoryResponseDataHistoriesItemItemsItem {\n  id: string; // 历史记录条目的唯一ID\n  title: string; // 历史记录条目的标题或名称\n  content: string; // 历史记录条目的简要内容或描述\n  notebookID: string; // 所属笔记本ID\n  notebookName: string; // 所属笔记本名称\n  path: string; // 相关文档或资源的路径\n  type: number; // 历史记录类型\n  created: string; // 创建时间 (Unix时间戳字符串或特定格式日期)\n  updated: string; // 更新时间 (Unix时间戳字符串或特定格式日期)\n  size: number; // 大小 (字节)\n  hSize: string; // 人类可读的大小\n  count: number; // 相关计数\n  repoID?: string;\n  historyName?: string;\n  historyPath?: string;\n  docID?: string;\n}\n\ninterface SearchHistoryResponseDataHistoriesItem {\n  created: string; // 历史记录分组的创建日期 (格式：YYYYMMDD)\n  count: number; // 该日期分组下的历史条目数量\n  items?: Array<SearchHistoryResponseDataHistoriesItemItemsItem>;\n}\n\ninterface SearchHistoryResponseData {\n  histories: Array<SearchHistoryResponseDataHistoriesItem>; // 按日期分组的历史记录数组\n  pageCount: number; // 总页数\n  totalCount: number; // 符合条件的总历史记录条目数 (注意，这里可能指分组数量，不是单个item数量)\n}\n\ninterface SearchHistoryResponse {\n  Code: number; // 响应状态码，0 表示成功\n  Msg: string; // 响应消息\n  Data: SearchHistoryResponseData | null;\n}\n\ninterface GetShorthandParams {\n  id: string; // 要获取的速记的唯一标识符 (通常为时间戳字符串)\n}\n\ninterface GetShorthandResponseData {\n  id?: string;\n  shorthandContent: string; // 速记内容 (经过 Lute 引擎处理后的 HTML 格式)\n  shorthandMd: string; // 速记内容的原始 Markdown 格式\n  hCreated: string; // 格式化后的创建时间 (YYYY-MM-DD HH:mm)\n  [key: string]: any; // From .catchall()\n}\n\ninterface GetShorthandResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 错误信息，成功时为空字符串\n  Data: GetShorthandResponseData; // 包含速记详细信息的对象\n}\n\ninterface GetShorthandsParams {\n  page: number; // 要获取的速记列表的页码，从 1 开始\n}\n\ninterface GetShorthandsResponseDataShorthandsItem {\n  oId: string; // 速记的原始唯一标识符 (通常为时间戳字符串)\n  shorthandContent: string; // 速记内容 (经过 Lute 引擎处理后的 HTML 格式)\n  shorthandMd: string; // 速记内容的原始 Markdown 格式\n  shorthandDesc: string; // 速记的描述 (经过处理，例如音视频标签被替换为文字)\n  hCreated: string; // 格式化后的创建时间 (YYYY-MM-DD HH:mm)\n  [key: string]: any; // From .catchall()\n}\n\ninterface GetShorthandsResponseData {\n  shorthands: Array<GetShorthandsResponseDataShorthandsItem>; // 速记对象列表\n  [key: string]: any; // From .catchall()\n}\n\ninterface GetShorthandsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 错误信息，成功时为空字符串\n  Data: GetShorthandsResponseData; // 包含速记列表及可能的分页信息的对象\n}\n\ninterface RemoveShorthandsParams {\n  ids: Array<string>; // 要移除的速记的唯一标识符数组\n}\n\ninterface RemoveShorthandsResponse {\n  Code: number; // 返回码，0 表示成功\n  Msg: string; // 错误信息，成功时为空字符串\n  Data?: null;\n}\n\ndeclare module './accountClient' {\n  /**\n   * 检查用户输入的激活码是否有效。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (CheckActivationcodeParams)\n   * @returns Promise<CheckActivationcodeResponse> \n   */\n  export function checkActivationcode(params: CheckActivationcodeParams): Promise<CheckActivationcodeResponse>;\n\n  /**\n   * 注销当前用户账号。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @returns Promise<DeactivateUserResponse> \n   */\n  export function deactivateUser(): Promise<DeactivateUserResponse>;\n\n  /**\n   * 用户登录，需要提供用户名、密码、验证码和云端区域。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (LoginParams)\n   * @returns Promise<LoginResponse> \n   */\n  export function login(params: LoginParams): Promise<LoginResponse>;\n\n  /**\n   * 为当前用户开启免费试用。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @returns Promise<StartFreeTrialResponse> \n   */\n  export function startFreeTrial(): Promise<StartFreeTrialResponse>;\n\n  /**\n   * 使用激活码激活账户。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UseActivationcodeParams)\n   * @returns Promise<UseActivationcodeResponse> \n   */\n  export function useActivationcode(params: UseActivationcodeParams): Promise<UseActivationcodeResponse>;\n\n}\n\ndeclare module './aiClient' {\n  /**\n   * 与 ChatGPT 进行简单对话。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ChatGPTParams)\n   * @returns Promise<ChatGPTResponse> \n   */\n  export function chatGPT(params: ChatGPTParams): Promise<ChatGPTResponse>;\n\n  /**\n   * 调用 ChatGPT 对指定的块ID列表执行特定动作。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ChatGPTWithActionParams)\n   * @returns Promise<ChatGPTWithActionResponse> \n   */\n  export function chatGPTWithAction(params: ChatGPTWithActionParams): Promise<ChatGPTWithActionResponse>;\n\n}\n\ndeclare module './archiveClient' {\n  /**\n   * 将指定的 .zip 文件解压到指定路径。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UnzipParams)\n   * @returns Promise<UnzipResponse> \n   */\n  export function unzip(params: UnzipParams): Promise<UnzipResponse>;\n\n  /**\n   * 将指定路径的文件或目录压缩到指定的 .zip 文件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (ZipParams)\n   * @returns Promise<ZipResponse> \n   */\n  export function zip(params: ZipParams): Promise<ZipResponse>;\n\n}\n\ndeclare module './assetClient' {\n  /**\n   * 完全重新索引工作空间中所有资源文件的内容，用于搜索。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @returns Promise<FullReindexAssetContentResponse> \n   */\n  export function fullReindexAssetContent(): Promise<FullReindexAssetContentResponse>;\n\n  /**\n   * 获取指定文档块所引用的所有资源文件列表。\n   * (Requires authentication)\n   * @param params Request parameters (GetDocAssetsParams)\n   * @returns Promise<GetDocAssetsResponse> \n   */\n  export function getDocAssets(params: GetDocAssetsParams): Promise<GetDocAssetsResponse>;\n\n  /**\n   * 获取指定文档块所引用的所有图片类型资源文件列表。\n   * (Requires authentication)\n   * @param params Request parameters (GetDocImageAssetsParams)\n   * @returns Promise<GetDocImageAssetsResponse> \n   */\n  export function getDocImageAssets(params: GetDocImageAssetsParams): Promise<GetDocImageAssetsResponse>;\n\n  /**\n   * 获取指定资源文件的标注信息（通常是 XFDF 格式的 PDF 标注）。\n   * (Requires authentication)\n   * @param params Request parameters (GetFileAnnotationParams)\n   * @returns Promise<GetFileAnnotationResponse> \n   */\n  export function getFileAnnotation(params: GetFileAnnotationParams): Promise<GetFileAnnotationResponse>;\n\n  /**\n   * 获取指定图片资源文件后台 OCR 识别的文本内容。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (GetImageOCRTextParams)\n   * @returns Promise<GetImageOCRTextResponse> \n   */\n  export function getImageOCRText(params: GetImageOCRTextParams): Promise<GetImageOCRTextResponse>;\n\n  /**\n   * 获取所有在文档中被引用但实际资源文件已不存在的资源路径列表。\n   * (Requires authentication)\n   * @returns Promise<GetMissingAssetsResponse> \n   */\n  export function getMissingAssets(): Promise<GetMissingAssetsResponse>;\n\n  /**\n   * 获取工作空间中存在但未被任何文档引用的资源文件列表（最多返回512条）。\n   * (Requires authentication)\n   * @returns Promise<GetUnusedAssetsResponse> \n   */\n  export function getUnusedAssets(): Promise<GetUnusedAssetsResponse>;\n\n  /**\n   * 将指定的本地文件复制到当前笔记本的 assets 文件夹中，并在指定文档中插入对这些资源的引用。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (InsertLocalAssetsParams)\n   * @returns Promise<InsertLocalAssetsResponse> \n   */\n  export function insertLocalAssets(params: InsertLocalAssetsParams): Promise<InsertLocalAssetsResponse>;\n\n  /**\n   * 对指定的图片资源文件执行光学字符识别，并返回识别出的文本及原始 OCR 结果。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (OcrParams)\n   * @returns Promise<OcrResponse> \n   */\n  export function ocr(params: OcrParams): Promise<OcrResponse>;\n\n  /**\n   * 删除工作空间中指定的单个未使用（未被任何文档引用）的资源文件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveUnusedAssetParams)\n   * @returns Promise<RemoveUnusedAssetResponse> \n   */\n  export function removeUnusedAsset(params: RemoveUnusedAssetParams): Promise<RemoveUnusedAssetResponse>;\n\n  /**\n   * 删除工作空间中所有未被任何文档引用的资源文件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @returns Promise<RemoveUnusedAssetsResponse> \n   */\n  export function removeUnusedAssets(): Promise<RemoveUnusedAssetsResponse>;\n\n  /**\n   * 重命名指定的资源文件，并自动更新所有文档中对该资源的引用。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RenameAssetParams)\n   * @returns Promise<RenameAssetResponse> \n   */\n  export function renameAsset(params: RenameAssetParams): Promise<RenameAssetResponse>;\n\n  /**\n   * 将资源文件在思源笔记中的相对路径（如 'assets/image.png'）转换为其在文件系统中的绝对路径。\n   * (Requires authentication)\n   * @param params Request parameters (ResolveAssetPathParams)\n   * @returns Promise<ResolveAssetPathResponse> \n   */\n  export function resolveAssetPath(params: ResolveAssetPathParams): Promise<ResolveAssetPathResponse>;\n\n  /**\n   * 为指定的资源文件（通常是 PDF）保存或更新其标注信息（通常是 XFDF 格式）。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SetFileAnnotationParams)\n   * @returns Promise<SetFileAnnotationResponse> \n   */\n  export function setFileAnnotation(params: SetFileAnnotationParams): Promise<SetFileAnnotationResponse>;\n\n  /**\n   * 手动为指定的图片资源文件设置或更新其 OCR 文本内容，并刷新到数据库。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SetImageOCRTextParams)\n   * @returns Promise<SetImageOCRTextResponse> \n   */\n  export function setImageOCRText(params: SetImageOCRTextParams): Promise<SetImageOCRTextResponse>;\n\n  /**\n   * 获取指定资源文件（assets/ 路径）或本地文件（file:/// 路径）的大小、创建及修改时间等元信息。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (StatAssetParams)\n   * @returns Promise<StatAssetResponse> \n   */\n  export function statAsset(params: StatAssetParams): Promise<StatAssetResponse>;\n\n  /**\n   * 处理文件上传。通常用于将文件上传到服务器的临时目录或直接作为资源插入。参数通过 FormData 传递，如 assetPath (可选，指定保存路径) 和 id (可选，关联的文档ID)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<UploadResponse> \n   */\n  export function Upload(payload: any): Promise<UploadResponse>;\n\n  /**\n   * 将指定文档（及其子文档中）引用的所有本地资源文件上传到用户配置的云存储服务。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UploadCloudParams)\n   * @returns Promise<UploadCloudResponse> \n   */\n  export function uploadCloud(params: UploadCloudParams): Promise<UploadCloudResponse>;\n\n}\n\ndeclare module './attrClient' {\n  /**\n   * 根据提供的块 ID 列表，批量获取这些块的所有自定义属性。\n   * (Requires authentication)\n   * @param params Request parameters (BatchGetBlockAttrsParams)\n   * @returns Promise<BatchGetBlockAttrsResponse> \n   */\n  export function batchGetBlockAttrs(params: BatchGetBlockAttrsParams): Promise<BatchGetBlockAttrsResponse>;\n\n  /**\n   * 根据提供的块 ID 和对应的属性集，批量为这些块设置自定义属性。如果属性值为 null，则表示删除该属性。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (BatchSetBlockAttrsParams)\n   * @returns Promise<BatchSetBlockAttrsResponse> \n   */\n  export function batchSetBlockAttrs(params: BatchSetBlockAttrsParams): Promise<BatchSetBlockAttrsResponse>;\n\n  /**\n   * 获取指定块 ID 的所有自定义属性。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockAttrsParams)\n   * @returns Promise<GetBlockAttrsResponse> \n   */\n  export function getBlockAttrs(params: GetBlockAttrsParams): Promise<GetBlockAttrsResponse>;\n\n  /**\n   * 获取当前工作空间中所有书签使用过的标签列表。\n   * (Requires authentication)\n   * @returns Promise<GetBookmarkLabelsResponse> \n   */\n  export function getBookmarkLabels(): Promise<GetBookmarkLabelsResponse>;\n\n  /**\n   * 重置指定块的若干属性。此操作通常用于删除属性，但需要提供属性的当前期望值进行匹配后才会执行。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (ResetBlockAttrsParams)\n   * @returns Promise<ResetBlockAttrsResponse> \n   */\n  export function resetBlockAttrs(params: ResetBlockAttrsParams): Promise<ResetBlockAttrsResponse>;\n\n  /**\n   * 为指定的单个块设置自定义属性。如果属性值为 null，则表示删除该属性。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SetBlockAttrsParams)\n   * @returns Promise<SetBlockAttrsResponse> \n   */\n  export function setBlockAttrs(params: SetBlockAttrsParams): Promise<SetBlockAttrsResponse>;\n\n}\n\ndeclare module './avClient' {\n  /**\n   * 向指定的属性视图中添加一个或多个数据块。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (AddAttributeViewBlocksParams)\n   * @returns Promise<AddAttributeViewBlocksResponse> \n   */\n  export function addAttributeViewBlocks(params: AddAttributeViewBlocksParams): Promise<AddAttributeViewBlocksResponse>;\n\n  /**\n   * 向指定的属性视图添加一个新的列定义。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (AddAttributeViewKeyParams)\n   * @returns Promise<AddAttributeViewKeyResponse> \n   */\n  export function addAttributeViewKey(params: AddAttributeViewKeyParams): Promise<AddAttributeViewKeyResponse>;\n\n  /**\n   * 向属性视图追加多个新的独立块，并为这些块设置初始值。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (AppendAttributeViewDetachedBlocksWithValuesParams)\n   * @returns Promise<AppendAttributeViewDetachedBlocksWithValuesResponse> \n   */\n  export function appendAttributeViewDetachedBlocksWithValues(params: AppendAttributeViewDetachedBlocksWithValuesParams): Promise<AppendAttributeViewDetachedBlocksWithValuesResponse>;\n\n  /**\n   * 复制一个属性视图块（数据库块）。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (DuplicateAttributeViewBlockParams)\n   * @returns Promise<DuplicateAttributeViewBlockResponse> \n   */\n  export function duplicateAttributeViewBlock(params: DuplicateAttributeViewBlockParams): Promise<DuplicateAttributeViewBlockResponse>;\n\n  /**\n   * 获取指定ID的属性视图的详细信息。\n   * (Requires authentication, Unavailable in read-only mode)\n   * @param params Request parameters (GetAttributeViewParams)\n   * @returns Promise<GetAttributeViewResponse> \n   */\n  export function getAttributeView(params: GetAttributeViewParams): Promise<GetAttributeViewResponse>;\n\n  /**\n   * 获取指定属性视图（或其关联块）的筛选条件和排序规则。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (GetAttributeViewFilterSortParams)\n   * @returns Promise<GetAttributeViewFilterSortResponse> \n   */\n  export function getAttributeViewFilterSort(params: GetAttributeViewFilterSortParams): Promise<GetAttributeViewFilterSortResponse>;\n\n  /**\n   * 获取指定属性视图ID的所有列定义 (keys)。\n   * (Requires authentication)\n   * @param params Request parameters (GetAttributeViewKeysParams)\n   * @returns Promise<GetAttributeViewKeysResponse> \n   */\n  export function getAttributeViewKeys(params: GetAttributeViewKeysParams): Promise<GetAttributeViewKeysResponse>;\n\n  /**\n   * 通过属性视图ID获取其所有列定义 (keys)。(此接口功能上可能与 getAttributeViewKeys 重复，需确认)\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (GetAttributeViewKeysByAvIDParams)\n   * @returns Promise<GetAttributeViewKeysByAvIDResponse> \n   */\n  export function getAttributeViewKeysByAvID(params: GetAttributeViewKeysByAvIDParams): Promise<GetAttributeViewKeysByAvIDResponse>;\n\n  /**\n   * 获取指定属性视图的主键列的值，支持分页和关键词搜索。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (GetAttributeViewPrimaryKeyValuesParams)\n   * @returns Promise<GetAttributeViewPrimaryKeyValuesResponse> \n   */\n  export function getAttributeViewPrimaryKeyValues(params: GetAttributeViewPrimaryKeyValuesParams): Promise<GetAttributeViewPrimaryKeyValuesResponse>;\n\n  /**\n   * 获取指定属性视图ID的镜像数据库块ID列表。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (GetMirrorDatabaseBlocksParams)\n   * @returns Promise<GetMirrorDatabaseBlocksResponse> \n   */\n  export function getMirrorDatabaseBlocks(params: GetMirrorDatabaseBlocksParams): Promise<GetMirrorDatabaseBlocksResponse>;\n\n  /**\n   * 从指定的属性视图中移除一个或多个数据块。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveAttributeViewBlocksParams)\n   * @returns Promise<RemoveAttributeViewBlocksResponse> \n   */\n  export function removeAttributeViewBlocks(params: RemoveAttributeViewBlocksParams): Promise<RemoveAttributeViewBlocksResponse>;\n\n  /**\n   * 从指定的属性视图移除一个列定义。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveAttributeViewKeyParams)\n   * @returns Promise<RemoveAttributeViewKeyResponse> \n   */\n  export function removeAttributeViewKey(params: RemoveAttributeViewKeyParams): Promise<RemoveAttributeViewKeyResponse>;\n\n  /**\n   * 渲染属性视图，获取其名称、视图类型、视图ID、所有视图、当前视图详情以及是否为镜像等信息。\n   * (Requires authentication)\n   * @param params Request parameters (RenderAttributeViewParams)\n   * @returns Promise<RenderAttributeViewResponse> \n   */\n  export function renderAttributeView(params: RenderAttributeViewParams): Promise<RenderAttributeViewResponse>;\n\n  /**\n   * 渲染指定历史版本的属性视图。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (RenderHistoryAttributeViewParams)\n   * @returns Promise<RenderHistoryAttributeViewResponse> \n   */\n  export function renderHistoryAttributeView(params: RenderHistoryAttributeViewParams): Promise<RenderHistoryAttributeViewResponse>;\n\n  /**\n   * 渲染指定快照索引的属性视图。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (RenderSnapshotAttributeViewParams)\n   * @returns Promise<RenderSnapshotAttributeViewResponse> \n   */\n  export function renderSnapshotAttributeView(params: RenderSnapshotAttributeViewParams): Promise<RenderSnapshotAttributeViewResponse>;\n\n  /**\n   * 根据关键词搜索属性视图，可排除指定ID。\n   * (Requires authentication, Unavailable in read-only mode)\n   * @param params Request parameters (SearchAttributeViewParams)\n   * @returns Promise<SearchAttributeViewResponse> \n   */\n  export function searchAttributeView(params: SearchAttributeViewParams): Promise<SearchAttributeViewResponse>;\n\n  /**\n   * 根据关键词搜索指定属性视图的非关联列 (Non-relation Key)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SearchAttributeViewNonRelationKeyParams)\n   * @returns Promise<SearchAttributeViewNonRelationKeyResponse> \n   */\n  export function searchAttributeViewNonRelationKey(params: SearchAttributeViewNonRelationKeyParams): Promise<SearchAttributeViewNonRelationKeyResponse>;\n\n  /**\n   * 根据关键词搜索指定属性视图的关联列 (Relation Key)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SearchAttributeViewRelationKeyParams)\n   * @returns Promise<SearchAttributeViewRelationKeyResponse> \n   */\n  export function searchAttributeViewRelationKey(params: SearchAttributeViewRelationKeyParams): Promise<SearchAttributeViewRelationKeyResponse>;\n\n  /**\n   * 更新属性视图中指定行（块ID）、指定列（KeyID）的单元格的值。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SetAttributeViewBlockAttrParams)\n   * @returns Promise<SetAttributeViewBlockAttrResponse> \n   */\n  export function setAttributeViewBlockAttr(params: SetAttributeViewBlockAttrParams): Promise<SetAttributeViewBlockAttrResponse>;\n\n  /**\n   * 设置指定数据库块（属性视图块）的默认视图ID。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SetDatabaseBlockViewParams)\n   * @returns Promise<SetDatabaseBlockViewResponse> \n   */\n  export function setDatabaseBlockView(params: SetDatabaseBlockViewParams): Promise<SetDatabaseBlockViewResponse>;\n\n  /**\n   * 对属性视图的列进行排序。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SortAttributeViewKeyParams)\n   * @returns Promise<SortAttributeViewKeyResponse> \n   */\n  export function sortAttributeViewKey(params: SortAttributeViewKeyParams): Promise<SortAttributeViewKeyResponse>;\n\n  /**\n   * 对属性视图中某个特定视图（如图表、看板等）的列进行排序。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SortAttributeViewViewKeyParams)\n   * @returns Promise<SortAttributeViewViewKeyResponse> \n   */\n  export function sortAttributeViewViewKey(params: SortAttributeViewViewKeyParams): Promise<SortAttributeViewViewKeyResponse>;\n\n}\n\ndeclare module './bazaarClient' {\n  /**\n   * 根据指定的客户端类型（如 'frontend'）批量更新思源笔记本地缓存的集市包信息。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (BatchUpdatePackageParams)\n   * @returns Promise<BatchUpdatePackageResponse> \n   */\n  export function batchUpdatePackage(params: BatchUpdatePackageParams): Promise<BatchUpdatePackageResponse>;\n\n  /**\n   * 从集市获取所有可用的图标包列表，支持关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetBazaarIconParams)\n   * @returns Promise<GetBazaarIconResponse> \n   */\n  export function getBazaarIcon(params: GetBazaarIconParams): Promise<GetBazaarIconResponse>;\n\n  /**\n   * 获取指定集市包（通过仓库URL、哈希和类型指定）的 README 文件内容 (HTML格式)。\n   * (Requires authentication)\n   * @param params Request parameters (GetBazaarPackageREAMEParams)\n   * @returns Promise<GetBazaarPackageREAMEResponse> \n   */\n  export function getBazaarPackageREAME(params: GetBazaarPackageREAMEParams): Promise<GetBazaarPackageREAMEResponse>;\n\n  /**\n   * 从集市获取所有可用的插件列表，支持按前端类型和关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetBazaarPluginParams)\n   * @returns Promise<GetBazaarPluginResponse> \n   */\n  export function getBazaarPlugin(params: GetBazaarPluginParams): Promise<GetBazaarPluginResponse>;\n\n  /**\n   * 从集市获取所有可用的模板列表，支持关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetBazaarTemplateParams)\n   * @returns Promise<GetBazaarTemplateResponse> \n   */\n  export function getBazaarTemplate(params: GetBazaarTemplateParams): Promise<GetBazaarTemplateResponse>;\n\n  /**\n   * 从集市获取所有可用的主题列表，支持关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetBazaarThemeParams)\n   * @returns Promise<GetBazaarThemeResponse> \n   */\n  export function getBazaarTheme(params: GetBazaarThemeParams): Promise<GetBazaarThemeResponse>;\n\n  /**\n   * 从集市获取所有可用的挂件列表，支持关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetBazaarWidgetParams)\n   * @returns Promise<GetBazaarWidgetResponse> \n   */\n  export function getBazaarWidget(params: GetBazaarWidgetParams): Promise<GetBazaarWidgetResponse>;\n\n  /**\n   * 获取本地已安装的图标包列表，支持关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetInstalledIconParams)\n   * @returns Promise<GetInstalledIconResponse> \n   */\n  export function getInstalledIcon(params: GetInstalledIconParams): Promise<GetInstalledIconResponse>;\n\n  /**\n   * 获取本地已安装的插件列表，支持按前端类型和关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetInstalledPluginParams)\n   * @returns Promise<GetInstalledPluginResponse> \n   */\n  export function getInstalledPlugin(params: GetInstalledPluginParams): Promise<GetInstalledPluginResponse>;\n\n  /**\n   * 获取本地已安装的模板列表，支持关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetInstalledTemplateParams)\n   * @returns Promise<GetInstalledTemplateResponse> \n   */\n  export function getInstalledTemplate(params: GetInstalledTemplateParams): Promise<GetInstalledTemplateResponse>;\n\n  /**\n   * 获取本地已安装的主题列表，支持关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetInstalledThemeParams)\n   * @returns Promise<GetInstalledThemeResponse> \n   */\n  export function getInstalledTheme(params: GetInstalledThemeParams): Promise<GetInstalledThemeResponse>;\n\n  /**\n   * 获取本地已安装的挂件列表，支持关键词筛选。\n   * (Requires authentication)\n   * @param params Request parameters (GetInstalledWidgetParams)\n   * @returns Promise<GetInstalledWidgetResponse> \n   */\n  export function getInstalledWidget(params: GetInstalledWidgetParams): Promise<GetInstalledWidgetResponse>;\n\n  /**\n   * 检查并返回所有已安装且存在更新的集市包（插件、挂件、图标、主题、模板）。\n   * (Requires authentication)\n   * @param params Request parameters (GetUpdatedPackageParams)\n   * @returns Promise<GetUpdatedPackageResponse> \n   */\n  export function getUpdatedPackage(params: GetUpdatedPackageParams): Promise<GetUpdatedPackageResponse>;\n\n  /**\n   * 从集市安装指定的图标包。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (InstallBazaarIconParams)\n   * @returns Promise<InstallBazaarIconResponse> \n   */\n  export function installBazaarIcon(params: InstallBazaarIconParams): Promise<InstallBazaarIconResponse>;\n\n  /**\n   * 从集市安装指定的插件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (InstallBazaarPluginParams)\n   * @returns Promise<InstallBazaarPluginResponse> \n   */\n  export function installBazaarPlugin(params: InstallBazaarPluginParams): Promise<InstallBazaarPluginResponse>;\n\n  /**\n   * 从集市安装指定的模板。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (InstallBazaarTemplateParams)\n   * @returns Promise<InstallBazaarTemplateResponse> \n   */\n  export function installBazaarTemplate(params: InstallBazaarTemplateParams): Promise<InstallBazaarTemplateResponse>;\n\n  /**\n   * 从集市安装指定的主题，并可指定主题模式 (mode) 和是否为更新 (update)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (InstallBazaarThemeParams)\n   * @returns Promise<InstallBazaarThemeResponse> \n   */\n  export function installBazaarTheme(params: InstallBazaarThemeParams): Promise<InstallBazaarThemeResponse>;\n\n  /**\n   * 从集市安装指定的挂件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (InstallBazaarWidgetParams)\n   * @returns Promise<InstallBazaarWidgetResponse> \n   */\n  export function installBazaarWidget(params: InstallBazaarWidgetParams): Promise<InstallBazaarWidgetResponse>;\n\n  /**\n   * 卸载本地已安装的指定图标包。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UninstallBazaarIconParams)\n   * @returns Promise<UninstallBazaarIconResponse> \n   */\n  export function uninstallBazaarIcon(params: UninstallBazaarIconParams): Promise<UninstallBazaarIconResponse>;\n\n  /**\n   * 卸载本地已安装的指定插件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UninstallBazaarPluginParams)\n   * @returns Promise<UninstallBazaarPluginResponse> \n   */\n  export function uninstallBazaarPlugin(params: UninstallBazaarPluginParams): Promise<UninstallBazaarPluginResponse>;\n\n  /**\n   * 卸载本地已安装的指定模板。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UninstallBazaarTemplateParams)\n   * @returns Promise<UninstallBazaarTemplateResponse> \n   */\n  export function uninstallBazaarTemplate(params: UninstallBazaarTemplateParams): Promise<UninstallBazaarTemplateResponse>;\n\n  /**\n   * 卸载本地已安装的指定主题。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UninstallBazaarThemeParams)\n   * @returns Promise<UninstallBazaarThemeResponse> \n   */\n  export function uninstallBazaarTheme(params: UninstallBazaarThemeParams): Promise<UninstallBazaarThemeResponse>;\n\n  /**\n   * 卸载本地已安装的指定挂件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UninstallBazaarWidgetParams)\n   * @returns Promise<UninstallBazaarWidgetResponse> \n   */\n  export function uninstallBazaarWidget(params: UninstallBazaarWidgetParams): Promise<UninstallBazaarWidgetResponse>;\n\n}\n\ndeclare module './blockClient' {\n  /**\n   * 在指定父块的末尾插入新的子块。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (AppendBlockParams)\n   * @returns Promise<AppendBlockResponse> \n   */\n  export function appendBlock(params: AppendBlockParams): Promise<AppendBlockResponse>;\n\n  /**\n   * 向指定笔记本的当日日记文档末尾追加新的内容块。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (AppendDailyNoteBlockParams)\n   * @returns Promise<AppendDailyNoteBlockResponse> \n   */\n  export function appendDailyNoteBlock(params: AppendDailyNoteBlockParams): Promise<AppendDailyNoteBlockResponse>;\n\n  /**\n   * 批量更新多个块的内容。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (BatchUpdateBlockParams)\n   * @returns Promise<BatchUpdateBlockResponse> \n   */\n  export function batchUpdateBlock(params: BatchUpdateBlockParams): Promise<BatchUpdateBlockResponse>;\n\n  /**\n   * 检查指定的块ID是否存在。\n   * (Requires authentication)\n   * @param params Request parameters (CheckBlockExistParams)\n   * @returns Promise<CheckBlockExistResponse> \n   */\n  export function checkBlockExist(params: CheckBlockExistParams): Promise<CheckBlockExistResponse>;\n\n  /**\n   * 检查指定的块ID是否已折叠，并返回其是否为根块。\n   * (Requires authentication)\n   * @param params Request parameters (CheckBlockFoldParams)\n   * @returns Promise<CheckBlockFoldResponse> \n   */\n  export function checkBlockFold(params: CheckBlockFoldParams): Promise<CheckBlockFoldResponse>;\n\n  /**\n   * 检查一批块ID的引用状态（例如，是否被其他块引用，是否定义了其他块等）。\n   * (Requires authentication)\n   * @param params Request parameters (CheckBlockRefParams)\n   * @returns Promise<CheckBlockRefResponse> \n   */\n  export function checkBlockRef(params: CheckBlockRefParams): Promise<CheckBlockRefResponse>;\n\n  /**\n   * 删除指定的块ID。此操作通过事务完成。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (DeleteBlockParams)\n   * @returns Promise<DeleteBlockResponse> \n   */\n  export function deleteBlock(params: DeleteBlockParams): Promise<DeleteBlockResponse>;\n\n  /**\n   * 折叠指定的块ID。对于标题块，执行 foldHeading 操作；对于其他类型的块，设置其 fold 属性。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (FoldBlockParams)\n   * @returns Promise<FoldBlockResponse> \n   */\n  export function foldBlock(params: FoldBlockParams): Promise<FoldBlockResponse>;\n\n  /**\n   * 获取指定块ID到其根块（通常是文档块）的面包屑路径，可以排除特定类型的块。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockBreadcrumbParams)\n   * @returns Promise<GetBlockBreadcrumbResponse> \n   */\n  export function getBlockBreadcrumb(params: GetBlockBreadcrumbParams): Promise<GetBlockBreadcrumbResponse>;\n\n  /**\n   * 获取指定块ID的DOM表示（HTML字符串）。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockDOMParams)\n   * @returns Promise<GetBlockDOMResponse> \n   */\n  export function getBlockDOM(params: GetBlockDOMParams): Promise<GetBlockDOMResponse>;\n\n  /**\n   * 根据引用文本（锚文本）搜索并返回其可能指向的块定义ID列表。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockDefIDsByRefTextParams)\n   * @returns Promise<GetBlockDefIDsByRefTextResponse> \n   */\n  export function getBlockDefIDsByRefText(params: GetBlockDefIDsByRefTextParams): Promise<GetBlockDefIDsByRefTextResponse>;\n\n  /**\n   * 获取指定块ID在其父级块的子块列表中的位置索引（从0开始）。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockIndexParams)\n   * @returns Promise<GetBlockIndexResponse> \n   */\n  export function getBlockIndex(params: GetBlockIndexParams): Promise<GetBlockIndexResponse>;\n\n  /**\n   * 获取指定块ID的详细信息，包括其所在的笔记本ID(box)、路径(path)、根块ID(rootID)、根块标题(rootTitle)、根块图标(rootIcon)以及其在根块下的直接子块ID(rootChildID)。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockInfoParams)\n   * @returns Promise<GetBlockInfoResponse> \n   */\n  export function getBlockInfo(params: GetBlockInfoParams): Promise<GetBlockInfoResponse>;\n\n  /**\n   * 获取指定块ID的Kramdown源码表示。可选模式：'md'（Markdown标记符模式，默认）或 'textmark'（文本标记模式，使用span标签）。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockKramdownParams)\n   * @returns Promise<GetBlockKramdownResponse> \n   */\n  export function getBlockKramdown(params: GetBlockKramdownParams): Promise<GetBlockKramdownResponse>;\n\n  /**\n   * 获取指定块ID的父块ID、上一个同级块ID和下一个同级块ID。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockSiblingIDParams)\n   * @returns Promise<GetBlockSiblingIDResponse> \n   */\n  export function getBlockSiblingID(params: GetBlockSiblingIDParams): Promise<GetBlockSiblingIDResponse>;\n\n  /**\n   * 批量获取指定块ID列表对应的块树（BlockTree）信息。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlockTreeInfosParams)\n   * @returns Promise<GetBlockTreeInfosResponse> \n   */\n  export function getBlockTreeInfos(params: GetBlockTreeInfosParams): Promise<GetBlockTreeInfosResponse>;\n\n  /**\n   * 批量获取指定块ID列表各自在其父级块的子块列表中的位置索引。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlocksIndexesParams)\n   * @returns Promise<GetBlocksIndexesResponse> \n   */\n  export function getBlocksIndexes(params: GetBlocksIndexesParams): Promise<GetBlocksIndexesResponse>;\n\n  /**\n   * 获取指定块ID列表的总字数、字符数和链接数统计信息。\n   * (Requires authentication)\n   * @param params Request parameters (GetBlocksWordCountParams)\n   * @returns Promise<GetBlocksWordCountResponse> \n   */\n  export function getBlocksWordCount(params: GetBlocksWordCountParams): Promise<GetBlocksWordCountResponse>;\n\n  /**\n   * 获取指定块ID的所有直接子块的基本信息列表（仅包含ID和类型）。\n   * (Requires authentication)\n   * @param params Request parameters (GetChildBlocksParams)\n   * @returns Promise<GetChildBlocksResponse> \n   */\n  export function getChildBlocks(params: GetChildBlocksParams): Promise<GetChildBlocksResponse>;\n\n  /**\n   * 获取给定内容字符串的字数、字符数和链接数统计信息。\n   * (Requires authentication)\n   * @param params Request parameters (GetContentWordCountParams)\n   * @returns Promise<GetContentWordCountResponse> \n   */\n  export function getContentWordCount(params: GetContentWordCountParams): Promise<GetContentWordCountResponse>;\n\n  /**\n   * 提取给定DOM字符串中的纯文本内容。\n   * (Requires authentication)\n   * @param params Request parameters (GetDOMTextParams)\n   * @returns Promise<GetDOMTextResponse> \n   */\n  export function getDOMText(params: GetDOMTextParams): Promise<GetDOMTextResponse>;\n\n  /**\n   * 获取指定文档块ID的信息，包括其内容（DOM）、标题、图标、面包屑路径和是否为模板。\n   * (Requires authentication)\n   * @param params Request parameters (GetDocInfoParams)\n   * @returns Promise<GetDocInfoResponse> \n   */\n  export function getDocInfo(params: GetDocInfoParams): Promise<GetDocInfoResponse>;\n\n  /**\n   * 批量获取多个指定文档块ID的信息。\n   * (Requires authentication)\n   * @param params Request parameters (GetDocsInfoParams)\n   * @returns Promise<GetDocsInfoResponse> \n   */\n  export function getDocsInfo(params: GetDocsInfoParams): Promise<GetDocsInfoResponse>;\n\n  /**\n   * 获取指定标题块ID下的所有子孙块的DOM内容。\n   * (Requires authentication)\n   * @param params Request parameters (GetHeadingChildrenDOMParams)\n   * @returns Promise<GetHeadingChildrenDOMResponse> \n   */\n  export function getHeadingChildrenDOM(params: GetHeadingChildrenDOMParams): Promise<GetHeadingChildrenDOMResponse>;\n\n  /**\n   * 获取指定标题块ID下的所有子孙块的ID列表。\n   * (Requires authentication)\n   * @param params Request parameters (GetHeadingChildrenIDsParams)\n   * @returns Promise<GetHeadingChildrenIDsResponse> \n   */\n  export function getHeadingChildrenIDs(params: GetHeadingChildrenIDsParams): Promise<GetHeadingChildrenIDsResponse>;\n\n  /**\n   * 获取删除指定标题块（及其所有子孙块）所需的事务操作列表。此接口仅返回事务，不实际执行删除。\n   * (Requires authentication)\n   * @param params Request parameters (GetHeadingDeleteTransactionParams)\n   * @returns Promise<GetHeadingDeleteTransactionResponse> \n   */\n  export function getHeadingDeleteTransaction(params: GetHeadingDeleteTransactionParams): Promise<GetHeadingDeleteTransactionResponse>;\n\n  /**\n   * 获取调整指定标题块级别所需的事务操作列表。此接口仅返回事务，不实际执行调整。\n   * (Requires authentication)\n   * @param params Request parameters (GetHeadingLevelTransactionParams)\n   * @returns Promise<GetHeadingLevelTransactionResponse> \n   */\n  export function getHeadingLevelTransaction(params: GetHeadingLevelTransactionParams): Promise<GetHeadingLevelTransactionResponse>;\n\n  /**\n   * 获取最近更新的块列表，按更新时间倒序排列。\n   * (Requires authentication)\n   * @returns Promise<GetRecentUpdatedBlocksResponse> \n   */\n  export function getRecentUpdatedBlocks(): Promise<GetRecentUpdatedBlocksResponse>;\n\n  /**\n   * 获取指定块ID所引用的所有定义块的ID列表。\n   * (Requires authentication)\n   * @param params Request parameters (GetRefIDsParams)\n   * @returns Promise<GetRefIDsResponse> \n   */\n  export function getRefIDs(params: GetRefIDsParams): Promise<GetRefIDsResponse>;\n\n  /**\n   * 根据文件注解块的ID，查找与该注解相关的引用块ID和定义块ID。\n   * (Requires authentication)\n   * @param params Request parameters (GetRefIDsByFileAnnotationIDParams)\n   * @returns Promise<GetRefIDsByFileAnnotationIDResponse> \n   */\n  export function getRefIDsByFileAnnotationID(params: GetRefIDsByFileAnnotationIDParams): Promise<GetRefIDsByFileAnnotationIDResponse>;\n\n  /**\n   * 获取指定引用块ID的锚文本内容。\n   * (Requires authentication)\n   * @param params Request parameters (GetRefTextParams)\n   * @returns Promise<GetRefTextResponse> \n   */\n  export function getRefText(params: GetRefTextParams): Promise<GetRefTextResponse>;\n\n  /**\n   * 获取指定块ID的尾部（最后）指定数量的直接子块的基本信息。\n   * (Requires authentication)\n   * @param params Request parameters (GetTailChildBlocksParams)\n   * @returns Promise<GetTailChildBlocksResponse> \n   */\n  export function getTailChildBlocks(params: GetTailChildBlocksParams): Promise<GetTailChildBlocksResponse>;\n\n  /**\n   * 获取指定块ID（通常是文档块）的树结构统计信息，如各种类型子块的数量等。\n   * (Requires authentication)\n   * @param params Request parameters (GetTreeStatParams)\n   * @returns Promise<GetTreeStatResponse> \n   */\n  export function getTreeStat(params: GetTreeStatParams): Promise<GetTreeStatResponse>;\n\n  /**\n   * 向上查找指定块ID的父块链，返回最近的一个已展开（未折叠）的父块ID。\n   * (Requires authentication)\n   * @param params Request parameters (GetUnfoldedParentIDParams)\n   * @returns Promise<GetUnfoldedParentIDResponse> \n   */\n  export function getUnfoldedParentID(params: GetUnfoldedParentIDParams): Promise<GetUnfoldedParentIDResponse>;\n\n  /**\n   * 在指定的锚点块（anchorID）之前或之后插入新的内容块。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (InsertBlockParams)\n   * @returns Promise<InsertBlockResponse> \n   */\n  export function insertBlock(params: InsertBlockParams): Promise<InsertBlockResponse>;\n\n  /**\n   * 在指定父块的开头插入新的子块。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (PrependBlockParams)\n   * @returns Promise<PrependBlockResponse> \n   */\n  export function prependBlock(params: PrependBlockParams): Promise<PrependBlockResponse>;\n\n  /**\n   * 为指定的块ID设置一个提醒时间。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SetBlockReminderParams)\n   * @returns Promise<SetBlockReminderResponse> \n   */\n  export function setBlockReminder(params: SetBlockReminderParams): Promise<SetBlockReminderResponse>;\n\n  /**\n   * 交换指定的引用块和其指向的定义块的角色。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (SwapBlockRefParams)\n   * @returns Promise<SwapBlockRefResponse> \n   */\n  export function swapBlockRef(params: SwapBlockRefParams): Promise<SwapBlockRefResponse>;\n\n  /**\n   * 将原块（fromID）的所有引用关系（或指定的引用关系 refIDs）转移到目标块（toID）。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (TransferBlockRefParams)\n   * @returns Promise<TransferBlockRefResponse> \n   */\n  export function transferBlockRef(params: TransferBlockRefParams): Promise<TransferBlockRefResponse>;\n\n  /**\n   * 展开指定的块ID。对于标题块，执行 unfoldHeading 操作；对于其他类型的块，设置其 fold 属性为 false。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UnfoldBlockParams)\n   * @returns Promise<UnfoldBlockResponse> \n   */\n  export function unfoldBlock(params: UnfoldBlockParams): Promise<UnfoldBlockResponse>;\n\n  /**\n   * 更新指定块ID的内容。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UpdateBlockParams)\n   * @returns Promise<UpdateBlockResponse> \n   */\n  export function updateBlock(params: UpdateBlockParams): Promise<UpdateBlockResponse>;\n\n  /**\n   * 在指定笔记本的当日日记文档开头追加新的内容块。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def prependDailyNoteBlock Response returns z.object() directly.\n   */\n  export function prependDailyNoteBlock(payload: any): Promise<any>;\n\n  /**\n   * 将指定的块移动到新的父块下或同级块的特定位置。移动后会触发相关文档编辑器的重载。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def moveBlock Response returns z.object() directly.\n   */\n  export function moveBlock(payload: any): Promise<any>;\n\n  /**\n   * 移动大纲中的标题块到新的父级或同级位置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def moveOutlineHeading Response returns z.object() directly.\n   */\n  export function moveOutlineHeading(payload: any): Promise<any>;\n\n}\n\ndeclare module './bookmarkClient' {\n  /**\n   * 构建并返回当前工作空间的所有书签列表。书签是为块设置的特定名称，方便快速访问。\n   * (Requires authentication)\n   * @returns Promise<GetBookmarkResponse> \n   */\n  export function getBookmark(): Promise<GetBookmarkResponse>;\n\n  /**\n   * 根据书签名称（即块的 IAL 中 bookmark 属性的值）移除一个或多个书签。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveBookmarkParams)\n   * @returns Promise<RemoveBookmarkResponse> \n   */\n  export function removeBookmark(params: RemoveBookmarkParams): Promise<RemoveBookmarkResponse>;\n\n  /**\n   * 将具有特定旧书签名称（块 IAL 中 bookmark 属性的旧值）的所有书签重命名为一个新的书签名称。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RenameBookmarkParams)\n   * @returns Promise<RenameBookmarkResponse> \n   */\n  export function renameBookmark(params: RenameBookmarkParams): Promise<RenameBookmarkResponse>;\n\n}\n\ndeclare module './broadcastClient' {\n  /**\n   * 获取指定名称的广播频道的详细信息，如订阅者数量。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (GetChannelInfoParams)\n   * @returns Promise<GetChannelInfoResponse> \n   */\n  export function getChannelInfo(params: GetChannelInfoParams): Promise<GetChannelInfoResponse>;\n\n  /**\n   * 获取当前所有活跃的广播频道及其订阅者数量的列表。\n   * (Requires authentication, Requires admin role)\n   * @returns Promise<GetChannelsResponse> \n   */\n  export function getChannels(): Promise<GetChannelsResponse>;\n\n  /**\n   * 向指定的广播频道发送文本消息。也可以用于发送特定命令 (cmd)。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (PostMessageParams)\n   * @returns Promise<PostMessageResponse> \n   */\n  export function postMessage(params: PostMessageParams): Promise<PostMessageResponse>;\n\n  /**\n   * 向指定的广播频道发布消息。可以是文本消息，也可以通过上传文件发布二进制消息。请求体应为 multipart/form-data。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (BroadcastPublishParams)\n   * @returns Promise<BroadcastPublishResponse> \n   */\n  export function broadcastPublish(params: BroadcastPublishParams): Promise<BroadcastPublishResponse>;\n\n}\n\ndeclare module './clipboardClient' {\n  /**\n   * 从系统剪贴板中读取文件路径列表。注意：在 Linux 上此功能可能受限或不可用。\n   * (Requires authentication, Requires admin role)\n   * @returns Promise<ReadFilePathsResponse> \n   */\n  export function readFilePaths(): Promise<ReadFilePathsResponse>;\n\n}\n\ndeclare module './cloudClient' {\n  /**\n   * 获取用户的云端存储空间使用情况、流量消耗以及同步和备份状态等信息。\n   * (Requires authentication, Requires admin role)\n   * @returns Promise<GetCloudSpaceResponse> \n   */\n  export function getCloudSpace(): Promise<GetCloudSpaceResponse>;\n\n}\n\ndeclare module './convertClient' {\n  /**\n   * 调用系统安装的 Pandoc 工具进行文档格式转换。需要提供 Pandoc 命令行参数。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (PandocParams)\n   * @returns Promise<PandocResponse> \n   */\n  export function pandoc(params: PandocParams): Promise<PandocResponse>;\n\n}\n\ndeclare module './exportClient' {\n  /**\n   * 将指定的文档内容导出到链滴社区。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (Export2LiandiParams)\n   * @returns Promise<Export2LiandiResponse> \n   */\n  export function export2Liandi(params: Export2LiandiParams): Promise<Export2LiandiResponse>;\n\n  /**\n   * 接收上传的文件，将其保存到临时导出目录，并返回处理后的文件名及可访问路径。通常用于'另存为'等场景。文件通过 FormData 的 'file' 字段上传。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportAsFileParams)\n   * @returns Promise<ExportAsFileResponse> \n   */\n  export function exportAsFile(params: ExportAsFileParams): Promise<ExportAsFileResponse>;\n\n  /**\n   * 将指定的文档导出为 AsciiDoc 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportAsciiDocParams)\n   * @returns Promise<ExportAsciiDocResponse> \n   */\n  export function exportAsciiDoc(params: ExportAsciiDocParams): Promise<ExportAsciiDocResponse>;\n\n  /**\n   * 将指定的属性视图导出为 CSV 压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportAttributeViewParams)\n   * @returns Promise<ExportAttributeViewResponse> \n   */\n  export function exportAttributeView(params: ExportAttributeViewParams): Promise<ExportAttributeViewResponse>;\n\n  /**\n   * 导出当前工作空间的全部数据为一个 .zip 压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<ExportDataResponse> \n   */\n  export function exportData(payload: any): Promise<ExportDataResponse>;\n\n  /**\n   * 导出指定文件夹内的所有数据为一个压缩包。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportDataInFolderParams)\n   * @returns Promise<ExportDataInFolderResponse> \n   */\n  export function exportDataInFolder(params: ExportDataInFolderParams): Promise<ExportDataInFolderResponse>;\n\n  /**\n   * 将指定的文档导出为 DOCX (.docx) 文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportDocxParams)\n   * @returns Promise<ExportDocxResponse> \n   */\n  export function exportDocx(params: ExportDocxParams): Promise<ExportDocxResponse>;\n\n  /**\n   * 将指定的文档导出为 EPUB 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportEPUBParams)\n   * @returns Promise<ExportEPUBResponse> \n   */\n  export function exportEPUB(params: ExportEPUBParams): Promise<ExportEPUBResponse>;\n\n  /**\n   * 将指定文档导出为标准的、包含完整思源主题样式和脚本的 HTML 内容，通常用于生成可独立浏览的 HTML 文件或作为导出 PDF 的中间步骤。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportHTMLParams)\n   * @returns Promise<ExportHTMLResponse> \n   */\n  export function exportHTML(params: ExportHTMLParams): Promise<ExportHTMLResponse>;\n\n  /**\n   * 将指定的单个文档导出为 Markdown 文件，并打包成一个 .zip 压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportMdParams)\n   * @returns Promise<ExportMdResponse> \n   */\n  export function exportMd(params: ExportMdParams): Promise<ExportMdResponse>;\n\n  /**\n   * 获取指定文档的 Markdown 文本内容，可自定义块引用和嵌入块的处理方式以及是否包含 YAML Front Matter。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportMdContentParams)\n   * @returns Promise<ExportMdContentResponse> \n   */\n  export function exportMdContent(params: ExportMdContentParams): Promise<ExportMdContentResponse>;\n\n  /**\n   * 获取指定文档渲染后的纯 HTML 内容（不包含完整主题样式和脚本，主要用于内容嵌入）。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportMdHTMLParams)\n   * @returns Promise<ExportMdHTMLResponse> \n   */\n  export function exportMdHTML(params: ExportMdHTMLParams): Promise<ExportMdHTMLResponse>;\n\n  /**\n   * 将指定的多个文档分别导出为 Markdown 文件，并打包成一个 .zip 压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportMdsParams)\n   * @returns Promise<ExportMdsResponse> \n   */\n  export function exportMds(params: ExportMdsParams): Promise<ExportMdsResponse>;\n\n  /**\n   * 将指定的文档导出为 MediaWiki 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportMediaWikiParams)\n   * @returns Promise<ExportMediaWikiResponse> \n   */\n  export function exportMediaWiki(params: ExportMediaWikiParams): Promise<ExportMediaWikiResponse>;\n\n  /**\n   * 将指定的笔记本导出为 Markdown 格式的 .zip 压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportNotebookMdParams)\n   * @returns Promise<ExportNotebookMdResponse> \n   */\n  export function exportNotebookMd(params: ExportNotebookMdParams): Promise<ExportNotebookMdResponse>;\n\n  /**\n   * 将指定的笔记本导出为思源原生 .sy 格式的压缩包。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportNotebookSYParams)\n   * @returns Promise<ExportNotebookSYResponse> \n   */\n  export function exportNotebookSY(params: ExportNotebookSYParams): Promise<ExportNotebookSYResponse>;\n\n  /**\n   * 将指定的文档导出为 ODT 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportODTParams)\n   * @returns Promise<ExportODTResponse> \n   */\n  export function exportODT(params: ExportODTParams): Promise<ExportODTResponse>;\n\n  /**\n   * 将指定的文档导出为 OPML 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportOPMLParams)\n   * @returns Promise<ExportOPMLResponse> \n   */\n  export function exportOPML(params: ExportOPMLParams): Promise<ExportOPMLResponse>;\n\n  /**\n   * 将指定的文档导出为 Org-mode 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportOrgModeParams)\n   * @returns Promise<ExportOrgModeResponse> \n   */\n  export function exportOrgMode(params: ExportOrgModeParams): Promise<ExportOrgModeResponse>;\n\n  /**\n   * 获取指定文档用于预览的 HTML 内容，包含块属性、类型等更丰富的上下文信息，并处理了块引链接。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportPreviewHTMLParams)\n   * @returns Promise<ExportPreviewHTMLResponse> \n   */\n  export function exportPreviewHTML(params: ExportPreviewHTMLParams): Promise<ExportPreviewHTMLResponse>;\n\n  /**\n   * 将指定的文档导出为 RTF 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportRTFParams)\n   * @returns Promise<ExportRTFResponse> \n   */\n  export function exportRTF(params: ExportRTFParams): Promise<ExportRTFResponse>;\n\n  /**\n   * 将指定的文档导出为 reStructuredText 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportReStructuredTextParams)\n   * @returns Promise<ExportReStructuredTextResponse> \n   */\n  export function exportReStructuredText(params: ExportReStructuredTextParams): Promise<ExportReStructuredTextResponse>;\n\n  /**\n   * 将指定路径列表的文件或文件夹打包导出为一个 .zip 压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportResourcesParams)\n   * @returns Promise<ExportResourcesResponse> \n   */\n  export function exportResources(params: ExportResourcesParams): Promise<ExportResourcesResponse>;\n\n  /**\n   * 将指定的单个文档导出为思源原生 .sy 格式的压缩包。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportSYParams)\n   * @returns Promise<ExportSYResponse> \n   */\n  export function exportSY(params: ExportSYParams): Promise<ExportSYResponse>;\n\n  /**\n   * 将传入的 Markdown 内容保存为临时文件，并根据参数生成预览（HTML/PDF/图片），返回预览的 URL。注意：此接口在 `export.go` 中并未完整实现所有参数的逻辑（如 mode, theme, title, type, css, js 均未实际使用），主要实现了 content 的临时保存和URL返回。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportTempContentParams)\n   * @returns Promise<ExportTempContentResponse> \n   */\n  export function exportTempContent(params: ExportTempContentParams): Promise<ExportTempContentResponse>;\n\n  /**\n   * 将指定的文档导出为 Textile 格式的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ExportTextileParams)\n   * @returns Promise<ExportTextileResponse> \n   */\n  export function exportTextile(params: ExportTextileParams): Promise<ExportTextileResponse>;\n\n  /**\n   * 获取指定文档的完整 HTML 预览内容，包含标准主题和脚本，可直接用于浏览器展示。\n   * (Requires authentication)\n   * @param params Request parameters (ExportPreviewParams)\n   * @returns Promise<ExportPreviewResponse> \n   */\n  export function exportPreview(params: ExportPreviewParams): Promise<ExportPreviewResponse>;\n\n  /**\n   * 对已生成的用于 PDF 导出的 HTML 文件进行后处理，如添加水印等。通常在调用 exportHTML (pdf=true) 之后使用。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (ProcessPDFParams)\n   * @returns Promise<ProcessPDFResponse> \n   */\n  export function processPDF(params: ProcessPDFParams): Promise<ProcessPDFResponse>;\n\n}\n\ndeclare module './extensionClient' {\n  /**\n   * 处理来自浏览器扩展（如剪藏）复制过来的内容。将 HTML DOM 转换为 Markdown，并处理其中包含的图片等资源，将其保存到指定的笔记本或默认的 assets 目录。支持从链滴剪藏时直接获取 Markdown。这是一个 multipart/form-data 请求，除了明确定义的字段外，还可以包含多个文件字段。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<ExtensionCopyResponse> \n   */\n  export function extensionCopy(payload: any): Promise<ExtensionCopyResponse>;\n\n}\n\ndeclare module './fileClient' {\n  /**\n   * 复制工作空间内的单个文件或资源文件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (CopyFileParams)\n   * @returns Promise<CopyFileResponse> \n   */\n  export function copyFile(params: CopyFileParams): Promise<CopyFileResponse>;\n\n  /**\n   * 获取指定路径的文件内容。注意：此接口不通过JSON返回文件内容，而是直接在HTTP响应体中返回文件数据流，Content-Type 根据文件类型确定。因此，zodResponseSchema 仅用于描述可能的错误情况下的JSON响应。成功获取文件时，HTTP状态码为200，响应体为文件内容。\n   * (Requires authentication)\n   * @param params Request parameters (GetFileParams)\n   * @returns Promise<GetFileResponse> \n   */\n  export function getFile(params: GetFileParams): Promise<GetFileResponse>;\n\n  /**\n   * 根据输入的文件路径，生成一个在目标位置唯一的、不冲突的文件名版本。例如，输入 'assets/image.png'，如果已存在，则可能返回 'assets/image_1.png'。\n   * (Requires authentication)\n   * @param params Request parameters (GetUniqueFilenameParams)\n   * @returns Promise<GetUniqueFilenameResponse> \n   */\n  export function getUniqueFilename(params: GetUniqueFilenameParams): Promise<GetUniqueFilenameResponse>;\n\n  /**\n   * 将多个源文件复制到指定的目标目录 (相对于工作空间)。源文件路径必须是绝对路径。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (GlobalCopyFilesParams)\n   * @returns Promise<GlobalCopyFilesResponse> \n   */\n  export function globalCopyFiles(params: GlobalCopyFilesParams): Promise<GlobalCopyFilesResponse>;\n\n  /**\n   * 上传文件或创建目录。这是一个 multipart/form-data 请求。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<PutFileResponse> \n   */\n  export function putFile(payload: any): Promise<PutFileResponse>;\n\n  /**\n   * 读取指定目录下的文件和子目录列表。\n   * (Requires authentication)\n   * @param params Request parameters (ReadDirParams)\n   * @returns Promise<ReadDirResponse> \n   */\n  export function readDir(params: ReadDirParams): Promise<ReadDirResponse>;\n\n  /**\n   * 移除指定路径的文件或目录。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveFileParams)\n   * @returns Promise<RemoveFileResponse> \n   */\n  export function removeFile(params: RemoveFileParams): Promise<RemoveFileResponse>;\n\n  /**\n   * 重命名指定路径的文件或目录。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RenameFileParams)\n   * @returns Promise<RenameFileResponse> \n   */\n  export function renameFile(params: RenameFileParams): Promise<RenameFileResponse>;\n\n}\n\ndeclare module './filetreeClient' {\n  /**\n   * 更改指定笔记本下，特定路径列表的文档树排序方式。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (ChangeSortParams)\n   * @returns Promise<ChangeSortResponse> \n   */\n  export function changeSort(params: ChangeSortParams): Promise<ChangeSortResponse>;\n\n  /**\n   * 根据用户配置的日记模板创建今日的日记文档。如果今日的日记已存在，则直接返回该日记的信息。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (CreateDailyNoteParams)\n   * @returns Promise<CreateDailyNoteResponse> \n   */\n  export function createDailyNote(params: CreateDailyNoteParams): Promise<CreateDailyNoteResponse>;\n\n  /**\n   * 在指定的笔记本和路径下创建一个新的文档，并可以附带初始Markdown内容和排序信息。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (CreateDocParams)\n   * @returns Promise<CreateDocResponse> \n   */\n  export function createDoc(params: CreateDocParams): Promise<CreateDocResponse>;\n\n  /**\n   * 在指定笔记本、路径下，使用提供的Markdown内容创建一个新文档。可以指定父文档ID、新文档ID、标签等。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (CreateDocWithMdParams)\n   * @returns Promise<CreateDocWithMdResponse> \n   */\n  export function createDocWithMd(params: CreateDocWithMdParams): Promise<CreateDocWithMdResponse>;\n\n  /**\n   * 将一个源文档的内容转换为一个标题块，并将其插入到目标文档的指定标题块之后或之前。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (Doc2HeadingParams)\n   * @returns Promise<Doc2HeadingResponse> \n   */\n  export function doc2Heading(params: Doc2HeadingParams): Promise<Doc2HeadingResponse>;\n\n  /**\n   * 复制（克隆）一个指定的文档。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (DuplicateDocParams)\n   * @returns Promise<DuplicateDocResponse> \n   */\n  export function duplicateDoc(params: DuplicateDocParams): Promise<DuplicateDocResponse>;\n\n  /**\n   * 获取指定文档（或文档中的一部分内容）的详细信息，包括块内容、结构、属性等。支持多种加载模式和查询参数。\n   * (Requires authentication)\n   * @param params Request parameters (GetDocParams)\n   * @returns Promise<GetDocResponse> \n   */\n  export function getDoc(params: GetDocParams): Promise<GetDocResponse>;\n\n  /**\n   * 根据当前笔记本和全局配置，计算并返回创建新文档时应使用的默认笔记本ID和保存路径 (HPath)。路径支持Go模板。\n   * (Requires authentication)\n   * @param params Request parameters (GetDocCreateSavePathParams)\n   * @returns Promise<GetDocCreateSavePathResponse> \n   */\n  export function getDocCreateSavePath(params: GetDocCreateSavePathParams): Promise<GetDocCreateSavePathResponse>;\n\n  /**\n   * 根据文档或块的ID，获取其在笔记本中的完整层级标题路径 (HPath)，例如 '/父文档标题/子文档标题/当前文档标题'。\n   * (Requires authentication)\n   * @param params Request parameters (GetFullHPathByIDParams)\n   * @returns Promise<GetFullHPathByIDResponse> \n   */\n  export function getFullHPathByID(params: GetFullHPathByIDParams): Promise<GetFullHPathByIDResponse>;\n\n  /**\n   * 根据文档或块的ID，获取其在笔记本中的人类可读路径 (HPath)，即文件路径形式的标题路径，例如 '/父文档标题/子文档标题/当前文档标题.sy' 的 Sy 文件名部分。\n   * (Requires authentication)\n   * @param params Request parameters (GetHPathByIDParams)\n   * @returns Promise<GetHPathByIDResponse> \n   */\n  export function getHPathByID(params: GetHPathByIDParams): Promise<GetHPathByIDResponse>;\n\n  /**\n   * 根据文档在笔记本中的实际存储路径 (相对于笔记本根目录)，获取其人类可读路径 (HPath)。\n   * (Requires authentication)\n   * @param params Request parameters (GetHPathByPathParams)\n   * @returns Promise<GetHPathByPathResponse> \n   */\n  export function getHPathByPath(params: GetHPathByPathParams): Promise<GetHPathByPathResponse>;\n\n  /**\n   * 根据一组文档的实际存储路径 (包含笔记本ID和文档相对路径)，批量获取它们对应的人类可读路径 (HPath)。\n   * (Requires authentication)\n   * @param params Request parameters (GetHPathsByPathsParams)\n   * @returns Promise<GetHPathsByPathsResponse> \n   */\n  export function getHPathsByPaths(params: GetHPathsByPathsParams): Promise<GetHPathsByPathsResponse>;\n\n  /**\n   * 根据文档的人类可读路径 (HPath) 和其所在的笔记本ID，获取所有匹配该路径的文档的ID列表。因为HPath可能不唯一，所以返回的是数组。\n   * (Requires authentication)\n   * @param params Request parameters (GetIDsByHPathParams)\n   * @returns Promise<GetIDsByHPathResponse> \n   */\n  export function getIDsByHPath(params: GetIDsByHPathParams): Promise<GetIDsByHPathResponse>;\n\n  /**\n   * 根据文档或块的ID，获取其在工作空间中的实际存储路径 (相对于笔记本根目录) 和所在的笔记本ID。\n   * (Requires authentication)\n   * @param params Request parameters (GetPathByIDParams)\n   * @returns Promise<GetPathByIDResponse> \n   */\n  export function getPathByID(params: GetPathByIDParams): Promise<GetPathByIDResponse>;\n\n  /**\n   * 根据当前笔记本和全局配置，计算并返回创建新块引文档时应使用的默认笔记本ID和保存路径 (HPath)。路径支持Go模板。\n   * (Requires authentication)\n   * @param params Request parameters (GetRefCreateSavePathParams)\n   * @returns Promise<GetRefCreateSavePathResponse> \n   */\n  export function getRefCreateSavePath(params: GetRefCreateSavePathParams): Promise<GetRefCreateSavePathResponse>;\n\n  /**\n   * 将源文档中的一个标题块及其后续同级内容，转换为一个新的独立文档。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (Heading2DocParams)\n   * @returns Promise<Heading2DocResponse> \n   */\n  export function heading2Doc(params: Heading2DocParams): Promise<Heading2DocResponse>;\n\n  /**\n   * 将源文档中的一个列表项（及其所有子项）转换为一个新的独立文档。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (Li2DocParams)\n   * @returns Promise<Li2DocResponse> \n   */\n  export function li2Doc(params: Li2DocParams): Promise<Li2DocResponse>;\n\n  /**\n   * 列出指定笔记本的文档树结构，支持过滤、排序等。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (ListDocTreeParams)\n   * @returns Promise<ListDocTreeResponse> \n   */\n  export function listDocTree(params: ListDocTreeParams): Promise<ListDocTreeResponse>;\n\n  /**\n   * 获取指定笔记本和路径下的文档及子文件夹列表，支持排序、闪卡过滤和数量限制。\n   * (Requires authentication)\n   * @param params Request parameters (ListDocsByPathParams)\n   * @returns Promise<ListDocsByPathResponse> \n   */\n  export function listDocsByPath(params: ListDocsByPathParams): Promise<ListDocsByPathResponse>;\n\n  /**\n   * 将一组源文档（通过其在各自笔记本中的相对路径指定）移动到目标笔记本的指定路径下。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (MoveDocsParams)\n   * @returns Promise<MoveDocsResponse> \n   */\n  export function moveDocs(params: MoveDocsParams): Promise<MoveDocsResponse>;\n\n  /**\n   * 将一组源文档（通过其ID指定）移动到目标文档（通过其ID指定）的目录下或成为其子文档（取决于目标ID是文件夹还是文件）。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (MoveDocsByIDParams)\n   * @returns Promise<MoveDocsByIDResponse> \n   */\n  export function moveDocsByID(params: MoveDocsByIDParams): Promise<MoveDocsByIDResponse>;\n\n  /**\n   * 将指定笔记本中的本地闪念速记（通常是未整理的、直接记录在本地的摘录或想法）移动到配置的闪念速记存放位置。这是一个待改进的旧接口，未来可能基于文档树配置实现。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (MoveLocalShorthandsParams)\n   * @returns Promise<MoveLocalShorthandsResponse> \n   */\n  export function moveLocalShorthands(params: MoveLocalShorthandsParams): Promise<MoveLocalShorthandsResponse>;\n\n  /**\n   * 触发一次全局的文档树刷新和全量索引重建。这是一个耗时操作，请谨慎调用。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<RefreshFiletreeResponse> \n   */\n  export function refreshFiletree(payload: any): Promise<RefreshFiletreeResponse>;\n\n  /**\n   * 根据指定的笔记本ID和文档相对路径，移除（删除）该文档。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveDocParams)\n   * @returns Promise<RemoveDocResponse> \n   */\n  export function removeDoc(params: RemoveDocParams): Promise<RemoveDocResponse>;\n\n  /**\n   * 根据指定的文档ID，移除（删除）该文档。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveDocByIDParams)\n   * @returns Promise<RemoveDocByIDResponse> \n   */\n  export function removeDocByID(params: RemoveDocByIDParams): Promise<RemoveDocByIDResponse>;\n\n  /**\n   * 根据一组复合路径（包含笔记本ID和文档相对路径）批量移除（删除）文档。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveDocsParams)\n   * @returns Promise<RemoveDocsResponse> \n   */\n  export function removeDocs(params: RemoveDocsParams): Promise<RemoveDocsResponse>;\n\n  /**\n   * 根据指定的文档路径列表（通常是 .sy 文件路径），从搜索引擎中移除这些文档的索引。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveIndexesParams)\n   * @returns Promise<RemoveIndexesResponse> \n   */\n  export function removeIndexes(params: RemoveIndexesParams): Promise<RemoveIndexesResponse>;\n\n  /**\n   * 根据指定的笔记本ID、旧文档相对路径和新标题，重命名该文档。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RenameDocParams)\n   * @returns Promise<RenameDocResponse> \n   */\n  export function renameDoc(params: RenameDocParams): Promise<RenameDocResponse>;\n\n  /**\n   * 根据指定的文档ID和新标题，重命名该文档。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RenameDocByIDParams)\n   * @returns Promise<RenameDocByIDResponse> \n   */\n  export function renameDocByID(params: RenameDocByIDParams): Promise<RenameDocByIDResponse>;\n\n  /**\n   * 根据关键词搜索匹配的文档标题和别名。主要用于快速查找文档，不支持全文搜索。\n   * (Requires authentication)\n   * @param params Request parameters (SearchDocsParams)\n   * @returns Promise<SearchDocsResponse> \n   */\n  export function searchDocs(params: SearchDocsParams): Promise<SearchDocsResponse>;\n\n  /**\n   * 根据指定的文档路径列表（通常是 .sy 文件路径），更新或插入这些文档在搜索引擎中的索引。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (UpsertIndexesParams)\n   * @returns Promise<UpsertIndexesResponse> \n   */\n  export function upsertIndexes(params: UpsertIndexesParams): Promise<UpsertIndexesResponse>;\n\n}\n\ndeclare module './formatClient' {\n  /**\n   * 为指定块ID的内容（Markdown原文）在中文与英文、数字之间自动添加空格，以优化排版。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (AutoSpaceParams)\n   * @returns Promise<AutoSpaceResponse> \n   */\n  export function autoSpace(params: AutoSpaceParams): Promise<AutoSpaceResponse>;\n\n  /**\n   * 将指定块ID内的所有外部网络资源（如图片、附件等，但不包括仅被引用的网络图片链接）下载并转存为本地资源。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (NetAssets2LocalAssetsParams)\n   * @returns Promise<NetAssets2LocalAssetsResponse> \n   */\n  export function netAssets2LocalAssets(params: NetAssets2LocalAssetsParams): Promise<NetAssets2LocalAssetsResponse>;\n\n  /**\n   * 将指定块ID内的网络图片（Markdown中实际嵌入的图片，非普通链接）转存为本地资源。可以指定单个图片URL进行转存，或留空以转存块内所有网络图片。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (NetImg2LocalAssetsParams)\n   * @returns Promise<NetImg2LocalAssetsResponse> \n   */\n  export function netImg2LocalAssets(params: NetImg2LocalAssetsParams): Promise<NetImg2LocalAssetsResponse>;\n\n}\n\ndeclare module './graphClient' {\n  /**\n   * 根据关键词和配置获取全局关系图的节点和边数据。\n   * (Requires authentication)\n   * @param params Request parameters (GetGraphParams)\n   * @returns Promise<GetGraphResponse> \n   */\n  export function getGraph(params: GetGraphParams): Promise<GetGraphResponse>;\n\n  /**\n   * 根据指定的文档 ID、关键词和配置获取局部关系图（如文档关系图、反链关系图等）的节点和边数据。\n   * (Requires authentication)\n   * @param params Request parameters (GetLocalGraphParams)\n   * @returns Promise<GetLocalGraphResponse> \n   */\n  export function getLocalGraph(params: GetLocalGraphParams): Promise<GetLocalGraphResponse>;\n\n  /**\n   * 将全局关系图的配置恢复为默认设置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<ResetGraphResponse> \n   */\n  export function resetGraph(payload: any): Promise<ResetGraphResponse>;\n\n  /**\n   * 将局部关系图的配置恢复为默认设置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<ResetLocalGraphResponse> \n   */\n  export function resetLocalGraph(payload: any): Promise<ResetLocalGraphResponse>;\n\n}\n\ndeclare module './historyClient' {\n  /**\n   * 清空当前工作空间下的所有历史记录。这是一个耗时操作，执行前会有提示。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<ClearWorkspaceHistoryResponse> \n   */\n  export function clearWorkspaceHistory(payload: any): Promise<ClearWorkspaceHistoryResponse>;\n\n  /**\n   * 获取指定文档历史版本的内容和相关信息。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<GetDocHistoryContentResponse> \n   */\n  export function getDocHistoryContent(payload: any): Promise<GetDocHistoryContentResponse>;\n\n  /**\n   * 根据创建日期、关键词等条件获取历史记录中的具体条目列表。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<GetHistoryItemsResponse> \n   */\n  export function getHistoryItems(payload: any): Promise<GetHistoryItemsResponse>;\n\n  /**\n   * 获取所有笔记本的历史记录信息。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<GetNotebookHistoryResponse> \n   */\n  export function getNotebookHistory(payload: any): Promise<GetNotebookHistoryResponse>;\n\n  /**\n   * 重建整个工作空间的历史记录索引。这是一个后台异步操作。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<ReindexHistoryResponse> \n   */\n  export function reindexHistory(payload: any): Promise<ReindexHistoryResponse>;\n\n  /**\n   * 将资源文件回滚到指定的历史版本。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<RollbackAssetsHistoryResponse> \n   */\n  export function rollbackAssetsHistory(payload: any): Promise<RollbackAssetsHistoryResponse>;\n\n  /**\n   * 将单个文档回滚到指定的历史版本。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<RollbackDocHistoryResponse> \n   */\n  export function rollbackDocHistory(payload: any): Promise<RollbackDocHistoryResponse>;\n\n  /**\n   * 将整个笔记本回滚到指定的历史版本。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<RollbackNotebookHistoryResponse> \n   */\n  export function rollbackNotebookHistory(payload: any): Promise<RollbackNotebookHistoryResponse>;\n\n  /**\n   * 根据关键词、笔记本、类型等分页搜索历史记录。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<SearchHistoryResponse> \n   */\n  export function searchHistory(payload: any): Promise<SearchHistoryResponse>;\n\n}\n\ndeclare module './iconClient' {\n  /**\n   * 根据参数动态生成一个SVG格式的日期或文字图标。此接口直接返回 SVG 图像数据。\n   * @param payload Request payload (any)\n   * @returns Promise<any> 此接口不返回 JSON。成功时直接返回 image/svg+xml 类型的 SVG 图像数据 (HTTP 200)。失败时可能返回其他 HTTP 错误状态码。\n   */\n  export function getDynamicIcon(payload: any): Promise<any>;\n\n}\n\ndeclare module './importClient' {\n  /**\n   * 导入完整的数据包备份 (.zip)。此操作会覆盖当前工作空间的数据。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def importData Response returns z.object() directly.\n   */\n  export function importData(payload: any): Promise<any>;\n\n  /**\n   * 导入 .sy 文件 (思源笔记的标准文档/子文档包) 到指定的笔记本和路径下。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def importSY Response returns z.object() directly.\n   */\n  export function importSY(payload: any): Promise<any>;\n\n  /**\n   * 从本地文件系统导入标准 Markdown 文件或包含 Markdown 文件的文件夹到指定的笔记本和路径下。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def importStdMd Response returns z.object() directly.\n   */\n  export function importStdMd(payload: any): Promise<any>;\n\n}\n\ndeclare module './inboxClient' {\n  /**\n   * 根据ID获取单个云端速记条目的详细内容。速记内容会从 Markdown 转换为 HTML。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (GetShorthandParams)\n   * @returns Promise<GetShorthandResponse> \n   */\n  export function getShorthand(params: GetShorthandParams): Promise<GetShorthandResponse>;\n\n  /**\n   * 分页获取云端速记条目列表。速记内容会从 Markdown 转换为 HTML，描述会做简化处理。\n   * (Requires authentication, Requires admin role)\n   * @param params Request parameters (GetShorthandsParams)\n   * @returns Promise<GetShorthandsResponse> \n   */\n  export function getShorthands(params: GetShorthandsParams): Promise<GetShorthandsResponse>;\n\n  /**\n   * 根据ID列表批量移除云端速记条目。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param params Request parameters (RemoveShorthandsParams)\n   * @returns Promise<RemoveShorthandsResponse> \n   */\n  export function removeShorthands(params: RemoveShorthandsParams): Promise<RemoveShorthandsResponse>;\n\n}\n\ndeclare module './luteClient' {\n  /**\n   * 将指定ID的块内容导出为标准 Markdown 格式的字符串。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def copyStdMarkdown Response returns z.object() directly.\n   */\n  export function copyStdMarkdown(payload: any): Promise<any>;\n\n  /**\n   * 将输入的 HTML 字符串转换为思源笔记的块级 DOM 结构 (仍为HTML字符串，但经过Lute处理)。会处理本地资源路径、空列表项、单列表格转段落等情况。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def html2BlockDOM Response returns z.object() directly.\n   */\n  export function html2BlockDOM(payload: any): Promise<any>;\n\n  /**\n   * 对传入的块级 DOM 字符串执行 Lute 引擎的 SpinBlockDOM 处理，进行原生渲染相关的优化。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def spinBlockDOM Response returns z.object() directly.\n   */\n  export function spinBlockDOM(payload: any): Promise<any>;\n\n}\n\ndeclare module './miscClient' {\n  /**\n   * 通过 Server-Sent Events (SSE) 订阅一个或多个指定广播频道的消息。连接建立后，服务器会持续推送所订阅频道的消息。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> 此接口不返回标准 JSON。成功时建立 SSE 连接，服务器会持续推送事件。每个事件包含 id, event (频道名), retry, data (消息内容)。连接关闭或发生错误时，事件流中断。\n   */\n  export function broadcastSubscribe(payload: any): Promise<any>;\n\n  /**\n   * 通过 WebSocket 连接到指定的广播频道，用于双向实时通讯。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> 此接口不返回标准 JSON。成功时升级为 WebSocket 连接，用于后续的双向消息传递。如果连接失败，可能会返回 HTTP 错误状态码。\n   */\n  export function broadcast(payload: any): Promise<any>;\n\n}\n\ndeclare module './networkClient' {\n  /**\n   * 作为代理，将客户端构造的HTTP(S)请求转发到指定的目标URL，并返回目标服务器的响应。支持多种请求体编码方式。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def forwardProxy Response returns z.object() directly.\n   */\n  export function forwardProxy(payload: any): Promise<any>;\n\n}\n\ndeclare module './notebookClient' {\n  /**\n   * 批量更改笔记本的显示顺序。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def changeSortNotebook Response returns z.object() directly.\n   */\n  export function changeSortNotebook(payload: any): Promise<any>;\n\n  /**\n   * 关闭一个指定的笔记本。关闭后，笔记本内容将不再可访问，直到再次打开。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def closeNotebook Response returns z.object() directly.\n   */\n  export function closeNotebook(payload: any): Promise<any>;\n\n  /**\n   * 创建一个新的笔记本。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def createNotebook Response returns z.object() directly.\n   */\n  export function createNotebook(payload: any): Promise<any>;\n\n  /**\n   * 获取指定笔记本的配置信息。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getNotebookConf Response returns z.object() directly.\n   */\n  export function getNotebookConf(payload: any): Promise<any>;\n\n  /**\n   * 获取指定笔记本的详细信息，包括其配置和统计数据。\n   * (Requires authentication, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getNotebookInfo Response returns z.object() directly.\n   */\n  export function getNotebookInfo(payload: any): Promise<any>;\n\n  /**\n   * 获取当前工作空间中所有笔记本的列表，包含已打开和未打开的笔记本。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def lsNotebooks Response returns z.object() directly.\n   */\n  export function lsNotebooks(payload: any): Promise<any>;\n\n  /**\n   * 打开一个指定的笔记本。如果笔记本已经是打开状态，此操作可能仅刷新其状态。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def openNotebook Response returns z.object() directly.\n   */\n  export function openNotebook(payload: any): Promise<any>;\n\n  /**\n   * 删除一个指定的笔记本。此操作会从工作空间移除笔记本及其所有内容。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeNotebook Response returns z.object() directly.\n   */\n  export function removeNotebook(payload: any): Promise<any>;\n\n  /**\n   * 重命名一个指定的笔记本。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def renameNotebook Response returns z.object() directly.\n   */\n  export function renameNotebook(payload: any): Promise<any>;\n\n  /**\n   * 更新指定笔记本的配置信息。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setNotebookConf Response returns z.object() directly.\n   */\n  export function setNotebookConf(payload: any): Promise<any>;\n\n  /**\n   * 设置指定笔记本的显示图标。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setNotebookIcon Response returns z.object() directly.\n   */\n  export function setNotebookIcon(payload: any): Promise<any>;\n\n}\n\ndeclare module './notificationClient' {\n  /**\n   * 向前端推送一条错误类型的消息通知，通常用于显示操作失败或异常情况。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def pushErrMsg Response returns z.object() directly.\n   */\n  export function pushErrMsg(payload: any): Promise<any>;\n\n  /**\n   * 向前端推送一条普通类型的消息通知，通常用于显示操作成功或提示信息。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def pushMsg Response returns z.object() directly.\n   */\n  export function pushMsg(payload: any): Promise<any>;\n\n}\n\ndeclare module './outlineClient' {\n  /**\n   * 获取指定文档块（通常是文档的根块ID）的层级大纲结构。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getDocOutline Response returns z.object() directly.\n   */\n  export function getDocOutline(payload: any): Promise<any>;\n\n}\n\ndeclare module './petalClient' {\n  /**\n   * 加载指定前端界面的所有已启用且兼容的插件（Petals）及其代码和配置信息。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def loadPetals Response returns z.object() directly.\n   */\n  export function loadPetals(payload: any): Promise<any>;\n\n  /**\n   * 设置指定前端界面中特定插件（由包名识别）的启用或禁用状态。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setPetalEnabled Response returns z.object() directly.\n   */\n  export function setPetalEnabled(payload: any): Promise<any>;\n\n}\n\ndeclare module './queryClient' {\n  /**\n   * 执行 SQL 查询语句，返回查询结果。思源笔记使用 SQLite 作为底层数据库，支持标准的 SQL 查询语法。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def SQL Response returns z.object() directly.\n   */\n  export function SQL(payload: any): Promise<any>;\n\n}\n\ndeclare module './refClient' {\n  /**\n   * 获取指定块ID的反向链接和反向提及列表。此接口为旧版，建议使用 /api/ref/getBacklink2。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getBacklink Response returns z.object() directly.\n   */\n  export function getBacklink(payload: any): Promise<any>;\n\n  /**\n   * 获取指定块ID的反向链接和反向提及列表，支持排序。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getBacklink2 Response returns z.object() directly.\n   */\n  export function getBacklink2(payload: any): Promise<any>;\n\n  /**\n   * 获取指定 定义块 在某个特定 文档树 内的反向链接列表。用于在打开一个文档时，显示该文档中有哪些块引用了当前面板的文档。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getBacklinkDoc Response returns z.object() directly.\n   */\n  export function getBacklinkDoc(payload: any): Promise<any>;\n\n  /**\n   * 获取指定 定义块 在某个特定 文档树 内的反向提及列表 (提及了定义块的名称或别名，但未直接引用的块)。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getBackmentionDoc Response returns z.object() directly.\n   */\n  export function getBackmentionDoc(payload: any): Promise<any>;\n\n  /**\n   * 手动触发指定块的反向链接和提及关系的刷新计算。通常在数据发生变更后，系统会自动更新，但此接口可用于强制刷新。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def refreshBacklink Response returns z.object() directly.\n   */\n  export function refreshBacklink(payload: any): Promise<any>;\n\n}\n\ndeclare module './repoClient' {\n  /**\n   * 将当前工作区内容回滚到指定的仓库快照版本。这是一个危险操作，会导致当前未保存的更改丢失，请谨慎操作。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def checkoutRepo Response returns z.object() directly.\n   */\n  export function checkoutRepo(payload: any): Promise<any>;\n\n  /**\n   * 为当前工作区创建一个新的快照。可以附带备注信息和标签。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def createSnapshot Response returns z.object() directly.\n   */\n  export function createSnapshot(payload: any): Promise<any>;\n\n  /**\n   * 比较两个指定的本地快照之间的差异，列出新增、修改和删除的文档。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def diffRepoSnapshots Response returns z.object() directly.\n   */\n  export function diffRepoSnapshots(payload: any): Promise<any>;\n\n  /**\n   * 从云端下载指定的快照到本地。如果本地已存在同名快照，可能会被覆盖或操作失败。下载的是标签快照时需要提供标签名。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def downloadCloudSnapshot Response returns z.object() directly.\n   */\n  export function downloadCloudSnapshot(payload: any): Promise<any>;\n\n  /**\n   * 分页获取当前用户在云端存储的所有普通快照列表。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getCloudRepoSnapshots Response returns z.object() directly.\n   */\n  export function getCloudRepoSnapshots(payload: any): Promise<any>;\n\n  /**\n   * 分页获取当前用户在云端存储的所有标签快照列表。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getCloudRepoTagSnapshots Response returns z.object() directly.\n   */\n  export function getCloudRepoTagSnapshots(payload: any): Promise<any>;\n\n  /**\n   * 获取指定快照中特定文件的原始内容。此接口直接返回文件数据流，不返回标准JSON结构。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> 此接口不返回标准 JSON。成功时直接返回文件数据流 (HTTP 200)，Content-Type 根据文件类型确定。失败时返回标准 JSON 错误结构。\n   */\n  export function getRepoFile(payload: any): Promise<any>;\n\n  /**\n   * 分页获取当前工作区本地存储的所有普通快照列表。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getRepoSnapshots Response returns z.object() directly.\n   */\n  export function getRepoSnapshots(payload: any): Promise<any>;\n\n  /**\n   * 分页获取当前工作区本地存储的所有标签快照列表。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getRepoTagSnapshots Response returns z.object() directly.\n   */\n  export function getRepoTagSnapshots(payload: any): Promise<any>;\n\n  /**\n   * 导入仓库加密密钥。这是一个危险操作，错误的密钥可能导致数据无法解密。导入的密钥文件通常是 .sykey 后缀。此操作通过 FormData 接收文件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def importRepoKey Response returns z.object() directly.\n   */\n  export function importRepoKey(payload: any): Promise<any>;\n\n  /**\n   * 为当前工作区初始化一个新的随机加密密钥。此操作通常在首次设置加密或重置密钥时使用。旧密钥将被覆盖。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def initRepoKey Response returns z.object() directly.\n   */\n  export function initRepoKey(payload: any): Promise<any>;\n\n  /**\n   * 通过用户提供的口令生成并初始化仓库加密密钥。旧密钥将被覆盖。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def initRepoKeyFromPassphrase Response returns z.object() directly.\n   */\n  export function initRepoKeyFromPassphrase(payload: any): Promise<any>;\n\n  /**\n   * 获取并打开指定快照中特定文档的内容，用于预览历史版本。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def openRepoSnapshotDoc Response returns z.object() directly.\n   */\n  export function openRepoSnapshotDoc(payload: any): Promise<any>;\n\n  /**\n   * 彻底删除用户在云端的所有仓库数据，包括所有快照和标签快照。这是一个非常危险且不可逆的操作，执行前通常会有二次确认。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def purgeCloudRepo Response returns z.object() directly.\n   */\n  export function purgeCloudRepo(payload: any): Promise<any>;\n\n  /**\n   * 彻底删除当前工作区的本地仓库数据，包括所有快照和标签快照。这是一个非常危险且不可逆的操作，执行前通常会有二次确认。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def purgeRepo Response returns z.object() directly.\n   */\n  export function purgeRepo(payload: any): Promise<any>;\n\n  /**\n   * 从云端移除指定的标签快照。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeCloudRepoTagSnapshot Response returns z.object() directly.\n   */\n  export function removeCloudRepoTagSnapshot(payload: any): Promise<any>;\n\n  /**\n   * 从本地仓库移除指定的标签快照。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeRepoTagSnapshot Response returns z.object() directly.\n   */\n  export function removeRepoTagSnapshot(payload: any): Promise<any>;\n\n  /**\n   * 重置本地仓库，会清空所有快照和标签，并重新初始化仓库密钥。这是一个危险操作，执行前通常会有二次确认。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def resetRepo Response returns z.object() directly.\n   */\n  export function resetRepo(payload: any): Promise<any>;\n\n  /**\n   * 设置本地仓库快照索引的保留天数。过期的索引将被自动清理。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setRepoIndexRetentionDays Response returns z.object() directly.\n   */\n  export function setRepoIndexRetentionDays(payload: any): Promise<any>;\n\n  /**\n   * 设置每日自动创建的快照在本地的保留数量。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setRetentionIndexesDaily Response returns z.object() directly.\n   */\n  export function setRetentionIndexesDaily(payload: any): Promise<any>;\n\n  /**\n   * 为指定的本地快照打上标签，使其成为一个标签快照。可以同时提供备注，如果提供会覆盖快照原有的备注。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def tagSnapshot Response returns z.object() directly.\n   */\n  export function tagSnapshot(payload: any): Promise<any>;\n\n  /**\n   * 将指定的本地快照上传到云端。如果是标签快照，需要提供标签名。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def uploadCloudSnapshot Response returns z.object() directly.\n   */\n  export function uploadCloudSnapshot(payload: any): Promise<any>;\n\n}\n\ndeclare module './riffClient' {\n  /**\n   * 将指定的块添加为闪卡到指定的闪卡包中。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def addRiffCards Response returns z.object() directly.\n   */\n  export function addRiffCards(payload: any): Promise<any>;\n\n  /**\n   * 批量设置闪卡的到期时间。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def batchSetRiffCardsDueTime Response returns z.object() directly.\n   */\n  export function batchSetRiffCardsDueTime(payload: any): Promise<any>;\n\n  /**\n   * 创建一个新的闪卡包。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def createRiffDeck Response returns z.object() directly.\n   */\n  export function createRiffDeck(payload: any): Promise<any>;\n\n  /**\n   * 获取指定笔记本下的所有闪卡块 ID，支持分页。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getNotebookRiffCards Response returns z.object() directly.\n   */\n  export function getNotebookRiffCards(payload: any): Promise<any>;\n\n  /**\n   * 获取指定笔记本下所有到期应复习的闪卡。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getNotebookRiffDueCards Response returns z.object() directly.\n   */\n  export function getNotebookRiffDueCards(payload: any): Promise<any>;\n\n  /**\n   * 获取指定闪卡包中的所有闪卡块 ID，支持分页。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getRiffCards Response returns z.object() directly.\n   */\n  export function getRiffCards(payload: any): Promise<any>;\n\n  /**\n   * 根据一组块 ID 批量获取它们对应的闪卡信息。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getRiffCardsByBlockIDs Response returns z.object() directly.\n   */\n  export function getRiffCardsByBlockIDs(payload: any): Promise<any>;\n\n  /**\n   * 获取当前工作空间中所有的闪卡包列表。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getRiffDecks Response returns z.object() directly.\n   */\n  export function getRiffDecks(payload: any): Promise<any>;\n\n  /**\n   * 获取指定闪卡包中所有到期应复习的闪卡。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getRiffDueCards Response returns z.object() directly.\n   */\n  export function getRiffDueCards(payload: any): Promise<any>;\n\n  /**\n   * 获取指定文档树（根块）下的所有闪卡块 ID，支持分页。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getTreeRiffCards Response returns z.object() directly.\n   */\n  export function getTreeRiffCards(payload: any): Promise<any>;\n\n  /**\n   * 获取指定文档树（根块）下所有到期应复习的闪卡。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getTreeRiffDueCards Response returns z.object() directly.\n   */\n  export function getTreeRiffDueCards(payload: any): Promise<any>;\n\n  /**\n   * 从指定的闪卡包中移除指定的闪卡。如果 deckID 为空字符串，则从所有闪卡包中移除。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeRiffCards Response returns z.object() directly.\n   */\n  export function removeRiffCards(payload: any): Promise<any>;\n\n  /**\n   * 移除指定的闪卡包及其包含的所有闪卡。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeRiffDeck Response returns z.object() directly.\n   */\n  export function removeRiffDeck(payload: any): Promise<any>;\n\n  /**\n   * 重命名指定的闪卡包。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def renameRiffDeck Response returns z.object() directly.\n   */\n  export function renameRiffDeck(payload: any): Promise<any>;\n\n  /**\n   * 重置指定范围内的闪卡的学习进度。可以按笔记本、文档树或闪卡包进行重置，也可以指定具体的块 ID 列表。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def resetRiffCards Response returns z.object() directly.\n   */\n  export function resetRiffCards(payload: any): Promise<any>;\n\n  /**\n   * 对指定的闪卡进行一次复习，并根据评分更新其下次到期时间等学习状态。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def reviewRiffCard Response returns z.object() directly.\n   */\n  export function reviewRiffCard(payload: any): Promise<any>;\n\n  /**\n   * 跳过当前闪卡的复习，通常是将其推迟到当前学习队列的末尾或稍后。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def skipReviewRiffCard Response returns z.object() directly.\n   */\n  export function skipReviewRiffCard(payload: any): Promise<any>;\n\n}\n\ndeclare module './searchClient' {\n  /**\n   * 在指定的块ID范围、路径、笔记本、类型中查找内容并进行替换。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def findReplace Response returns z.object() directly.\n   */\n  export function findReplace(payload: any): Promise<any>;\n\n  /**\n   * 对资源文件内容进行全文搜索（此功能需要付费订阅）。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def fullTextSearchAssetContent Response returns z.object() directly.\n   */\n  export function fullTextSearchAssetContent(payload: any): Promise<any>;\n\n  /**\n   * 对块内容进行全文搜索，支持多种搜索方式和过滤条件。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def fullTextSearchBlock Response returns z.object() directly.\n   */\n  export function fullTextSearchBlock(payload: any): Promise<any>;\n\n  /**\n   * 获取资源文件内容中，与指定查询相关的片段。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getAssetContent Response returns z.object() directly.\n   */\n  export function getAssetContent(payload: any): Promise<any>;\n\n  /**\n   * 获取指定嵌入块的渲染内容，支持包含其子块或显示面包屑。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getEmbedBlock Response returns z.object() directly.\n   */\n  export function getEmbedBlock(payload: any): Promise<any>;\n\n  /**\n   * 分页列出在当前工作空间中所有无效的块引用（例如，引用的块已被删除）。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def listInvalidBlockRefs Response returns z.object() directly.\n   */\n  export function listInvalidBlockRefs(payload: any): Promise<any>;\n\n  /**\n   * 根据路径移除指定的模板文件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeTemplate Response returns z.object() directly.\n   */\n  export function removeTemplate(payload: any): Promise<any>;\n\n  /**\n   * 根据文件名关键词和可选的文件扩展名搜索资源文件。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def searchAsset Response returns z.object() directly.\n   */\n  export function searchAsset(payload: any): Promise<any>;\n\n  /**\n   * 在指定的嵌入块（及其可能的子块）中使用 SQL 语句进行内容搜索。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def searchEmbedBlock Response returns z.object() directly.\n   */\n  export function searchEmbedBlock(payload: any): Promise<any>;\n\n  /**\n   * 在输入引用（例如 `((` 或 `[[`）时，根据关键词动态搜索可能的引用块建议。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def searchRefBlock Response returns z.object() directly.\n   */\n  export function searchRefBlock(payload: any): Promise<any>;\n\n  /**\n   * 根据关键词搜索已存在的标签。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def searchTag Response returns z.object() directly.\n   */\n  export function searchTag(payload: any): Promise<any>;\n\n  /**\n   * 根据关键词搜索模板（通常是模板文件名或内容）。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def searchTemplate Response returns z.object() directly.\n   */\n  export function searchTemplate(payload: any): Promise<any>;\n\n  /**\n   * 根据关键词搜索挂件块。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def searchWidget Response returns z.object() directly.\n   */\n  export function searchWidget(payload: any): Promise<any>;\n\n  /**\n   * 更新指定**查询嵌入块（`query_embed` 类型）**的原始查询语句或脚本内容。此接口专门用于处理查询嵌入块，不适用于普通块的自定义属性更新。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def updateEmbedBlock Response returns z.object() directly.\n   */\n  export function updateEmbedBlock(payload: any): Promise<any>;\n\n}\n\ndeclare module './settingClient' {\n  /**\n   * 将指定的关键字列表添加到虚拟块引用的全局排除列表中。这些关键字将不会用于生成虚拟引用。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def addVirtualBlockRefExclude Response returns z.object() directly.\n   */\n  export function addVirtualBlockRefExclude(payload: any): Promise<any>;\n\n  /**\n   * 将指定的关键字列表添加到虚拟块引用的全局包含列表中。只有这些关键字才可能用于生成虚拟引用（如果全局虚拟引用开关已打开）。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def addVirtualBlockRefInclude Response returns z.object() directly.\n   */\n  export function addVirtualBlockRefInclude(payload: any): Promise<any>;\n\n  /**\n   * 刷新并获取当前登录的思源云端账户信息。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getCloudUser Response returns z.object() directly.\n   */\n  export function getCloudUser(payload: any): Promise<any>;\n\n  /**\n   * 获取当前的发布服务配置信息，包括端口和具体的发布设置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getPublish Response returns z.object() directly.\n   */\n  export function getPublish(payload: any): Promise<any>;\n\n  /**\n   * 使用令牌和两步验证码完成云端用户的登录过程。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def login2faCloudUser Response returns z.object() directly.\n   */\n  export function login2faCloudUser(payload: any): Promise<any>;\n\n  /**\n   * 登出当前已登录的思源云端账户。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def logoutCloudUser Response returns z.object() directly.\n   */\n  export function logoutCloudUser(payload: any): Promise<any>;\n\n  /**\n   * 清除并重建虚拟块引用的缓存。当虚拟引用的相关配置（如包含/排除列表、编辑器中的开关）发生变化后，可能需要调用此接口。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def refreshVirtualBlockRef Response returns z.object() directly.\n   */\n  export function refreshVirtualBlockRef(payload: any): Promise<any>;\n\n  /**\n   * 更新AI相关的配置，主要针对OpenAI服务。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setAI Response returns z.object() directly.\n   */\n  export function setAI(payload: any): Promise<any>;\n\n  /**\n   * 更新用户账户相关的显示配置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setAccount Response returns z.object() directly.\n   */\n  export function setAccount(payload: any): Promise<any>;\n\n  /**\n   * 更新应用的外观相关配置，如主题、字体、语言等。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setAppearance Response returns z.object() directly.\n   */\n  export function setAppearance(payload: any): Promise<any>;\n\n  /**\n   * 更新与集市相关的配置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setBazaar Response returns z.object() directly.\n   */\n  export function setBazaar(payload: any): Promise<any>;\n\n  /**\n   * 更新编辑器相关的各种配置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setEditor Response returns z.object() directly.\n   */\n  export function setEditor(payload: any): Promise<any>;\n\n  /**\n   * 单独设置整个编辑器的只读状态。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setEditorReadOnly Response returns z.object() directly.\n   */\n  export function setEditorReadOnly(payload: any): Promise<any>;\n\n  /**\n   * 更新编辑器配置中的常用表情列表。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setEmoji Response returns z.object() directly.\n   */\n  export function setEmoji(payload: any): Promise<any>;\n\n  /**\n   * 更新与导出功能相关的配置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setExport Response returns z.object() directly.\n   */\n  export function setExport(payload: any): Promise<any>;\n\n  /**\n   * 更新文件树（文档列表）相关的配置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setFiletree Response returns z.object() directly.\n   */\n  export function setFiletree(payload: any): Promise<any>;\n\n  /**\n   * 更新与闪卡（FSRS算法）相关的配置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setFlashcard Response returns z.object() directly.\n   */\n  export function setFlashcard(payload: any): Promise<any>;\n\n  /**\n   * 更新用户自定义的快捷键映射。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setKeymap Response returns z.object() directly.\n   */\n  export function setKeymap(payload: any): Promise<any>;\n\n  /**\n   * 更新发布服务的配置，并尝试根据新配置初始化（或重启）发布服务。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setPublish Response returns z.object() directly.\n   */\n  export function setPublish(payload: any): Promise<any>;\n\n  /**\n   * 更新与搜索功能相关的配置，部分配置更改可能触发重建索引。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSearch Response returns z.object() directly.\n   */\n  export function setSearch(payload: any): Promise<any>;\n\n  /**\n   * 更新代码片段（Snippets）的启用状态，如是否启用自定义CSS和JS。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setConfSnippet Response returns z.object() directly.\n   */\n  export function setConfSnippet(payload: any): Promise<any>;\n\n}\n\ndeclare module './snippetClient' {\n  /**\n   * 获取已保存的代码片段列表。可以根据类型（js/css/all）、启用状态（0-禁用, 1-启用, 2-全部）和关键字进行过滤。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getSnippet Response returns z.object() directly.\n   */\n  export function getSnippet(payload: any): Promise<any>;\n\n  /**\n   * 设置全新的代码片段列表。这是一个全量替换操作，提供的 snippets 数组将完全覆盖当前所有的代码片段。如果只想修改或添加单个片段，需要先获取所有现有片段，在本地修改/添加后，将修改后的完整列表通过此API发送。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSnippet Response returns z.object() directly.\n   */\n  export function setSnippet(payload: any): Promise<any>;\n\n  /**\n   * 根据ID移除指定的代码片段。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeSnippet Response returns z.object() directly.\n   */\n  export function removeSnippet(payload: any): Promise<any>;\n\n}\n\ndeclare module './sqliteClient' {\n  /**\n   * 将内核中待处理的数据库事务队列立即刷新到磁盘。这通常用于确保在关键操作后数据被持久化。该接口不接收参数。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def flushTransaction Response returns z.object() directly.\n   */\n  export function flushTransaction(payload: any): Promise<any>;\n\n}\n\ndeclare module './storageClient' {\n  /**\n   * 获取所有用户已保存的搜索标准（过滤条件）列表。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getCriteria Response returns z.object() directly.\n   */\n  export function getCriteria(payload: any): Promise<any>;\n\n  /**\n   * 获取浏览器 LocalStorage 中的所有键值对。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getLocalStorage Response returns z.object() directly.\n   */\n  export function getLocalStorage(payload: any): Promise<any>;\n\n  /**\n   * 获取用户最近打开过的文档列表。这些文档按最近打开时间排序。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getRecentDocs Response returns z.object() directly.\n   */\n  export function getRecentDocs(payload: any): Promise<any>;\n\n  /**\n   * 根据名称移除一个已保存的搜索标准（过滤条件）。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeCriterion Response returns z.object() directly.\n   */\n  export function removeCriterion(payload: any): Promise<any>;\n\n  /**\n   * 根据提供的键名列表，批量移除浏览器 LocalStorage 中的项目。同时会广播事件通知其他客户端同步移除。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeLocalStorageVals Response returns z.object() directly.\n   */\n  export function removeLocalStorageVals(payload: any): Promise<any>;\n\n  /**\n   * 保存或更新一个搜索标准（过滤条件）。搜索标准可用于后续的文档或内容搜索。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setCriterion Response returns z.object() directly.\n   */\n  export function setCriterion(payload: any): Promise<any>;\n\n  /**\n   * 使用一个完整的对象来覆盖整个浏览器 LocalStorage 的内容。通常用于导入或恢复 LocalStorage 数据。同时会广播事件通知其他客户端同步设置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setLocalStorage Response returns z.object() directly.\n   */\n  export function setLocalStorage(payload: any): Promise<any>;\n\n  /**\n   * 设置浏览器 LocalStorage 中的单个键值对。同时会广播事件通知其他客户端同步设置。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setLocalStorageVal Response returns z.object() directly.\n   */\n  export function setLocalStorageVal(payload: any): Promise<any>;\n\n}\n\ndeclare module './syncClient' {\n  /**\n   * 在云端存储中创建一个新的同步目录。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def createCloudSyncDir Response returns z.object() directly.\n   */\n  export function createCloudSyncDir(payload: any): Promise<any>;\n\n  /**\n   * 将会话中当前的 S3 同步配置加密并打包成 .zip 文件供导出。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def exportSyncProviderS3 Response returns z.object() directly.\n   */\n  export function exportSyncProviderS3(payload: any): Promise<any>;\n\n  /**\n   * 将会话中当前的 WebDAV 同步配置加密并打包成 .zip 文件供导出。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def exportSyncProviderWebDAV Response returns z.object() directly.\n   */\n  export function exportSyncProviderWebDAV(payload: any): Promise<any>;\n\n  /**\n   * 检查应用启动时数据同步是否成功完成。此接口仅在管理员角色下，且同步已启用且成功时返回特定提示。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getBootSync Response returns z.object() directly.\n   */\n  export function getBootSync(payload: any): Promise<any>;\n\n  /**\n   * 获取当前的同步状态、最后同步时间、以及当前在线的内核实例等信息。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getSyncInfo Response returns z.object() directly.\n   */\n  export function getSyncInfo(payload: any): Promise<any>;\n\n  /**\n   * 通过上传的 .zip 或 .json 文件导入 S3 同步配置。导入的配置会经过解密和验证。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def importSyncProviderS3 Response returns z.object() directly.\n   */\n  export function importSyncProviderS3(payload: any): Promise<any>;\n\n  /**\n   * 通过上传的 .zip 或 .json 文件导入 WebDAV 同步配置。导入的配置会经过解密和验证。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def importSyncProviderWebDAV Response returns z.object() directly.\n   */\n  export function importSyncProviderWebDAV(payload: any): Promise<any>;\n\n  /**\n   * 列出当前配置的云端存储中可用的同步目录及其大小信息。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def listCloudSyncDir Response returns z.object() directly.\n   */\n  export function listCloudSyncDir(payload: any): Promise<any>;\n\n  /**\n   * 执行启动时的数据同步流程。此接口会触发 model.BootSyncData()。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def performBootSync Response returns z.object() directly.\n   */\n  export function performBootSync(payload: any): Promise<any>;\n\n  /**\n   * 执行数据同步操作。对于非云端同步模式 (mode != 3)，将触发 model.SyncData(true)。对于云端同步模式 (mode === 3)，需要明确指定同步方向 (upload: true/false)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def performSync Response returns z.object() directly.\n   */\n  export function performSync(payload: any): Promise<any>;\n\n  /**\n   * 从云端存储中移除指定的同步目录。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeCloudSyncDir Response returns z.object() directly.\n   */\n  export function removeCloudSyncDir(payload: any): Promise<any>;\n\n  /**\n   * 设置当前内核实例使用的云端同步目录。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setCloudSyncDir Response returns z.object() directly.\n   */\n  export function setCloudSyncDir(payload: any): Promise<any>;\n\n  /**\n   * 设置是否启用数据同步功能。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncEnable Response returns z.object() directly.\n   */\n  export function setSyncEnable(payload: any): Promise<any>;\n\n  /**\n   * 设置在数据同步过程中发生内容冲突时，是否自动生成冲突副本文件。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncGenerateConflictDoc Response returns z.object() directly.\n   */\n  export function setSyncGenerateConflictDoc(payload: any): Promise<any>;\n\n  /**\n   * 设置自动数据同步的时间间隔（单位：分钟）。设置后会重置同步计时器。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncInterval Response returns z.object() directly.\n   */\n  export function setSyncInterval(payload: any): Promise<any>;\n\n  /**\n   * 设置数据同步的模式。例如：0 表示自动同步，1 表示手动同步，3 表示云端双向同步时需手动触发单向同步。设置后会重置同步计时器。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncMode Response returns z.object() directly.\n   */\n  export function setSyncMode(payload: any): Promise<any>;\n\n  /**\n   * 设置是否启用同步感知功能。启用后，当检测到远程数据更新时，可能会有相应的提示或行为。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncPerception Response returns z.object() directly.\n   */\n  export function setSyncPerception(payload: any): Promise<any>;\n\n  /**\n   * 设置当前使用的数据同步服务提供商，例如 S3、WebDAV 或本地文件夹。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncProvider Response returns z.object() directly.\n   */\n  export function setSyncProvider(payload: any): Promise<any>;\n\n  /**\n   * 设置当同步服务提供商为本地文件夹时，所使用的本地文件夹路径。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncProviderLocal Response returns z.object() directly.\n   */\n  export function setSyncProviderLocal(payload: any): Promise<any>;\n\n  /**\n   * 设置使用 S3作为同步服务提供商时的详细配置信息，如 Access Key, Secret Key, Endpoint, Bucket 等。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncProviderS3 Response returns z.object() directly.\n   */\n  export function setSyncProviderS3(payload: any): Promise<any>;\n\n  /**\n   * 设置使用 WebDAV 作为同步服务提供商时的详细配置信息，如 Endpoint, 用户名和密码。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setSyncProviderWebDAV Response returns z.object() directly.\n   */\n  export function setSyncProviderWebDAV(payload: any): Promise<any>;\n\n}\n\ndeclare module './systemClient' {\n  /**\n   * 将思源笔记相关目录添加到 Microsoft Defender 的排除项中，以避免潜在的性能问题或冲突。此操作仅在 Windows 系统上有效。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def addMicrosoftDefenderExclusion Response returns z.object() directly.\n   */\n  export function addMicrosoftDefenderExclusion(payload: any): Promise<any>;\n\n  /**\n   * 获取思源笔记内核的启动进度。此接口也接受 POST 请求。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def bootProgress Response returns z.object() directly.\n   */\n  export function bootProgress(payload: any): Promise<any>;\n\n  /**\n   * 获取思源笔记内核的启动进度。此接口也接受 GET 请求。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def bootProgress Response returns z.object() directly.\n   */\n  export function bootProgress(payload: any): Promise<any>;\n\n  /**\n   * 检查思源笔记是否有新版本。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def checkUpdate Response returns z.object() directly.\n   */\n  export function checkUpdate(payload: any): Promise<any>;\n\n  /**\n   * 检查指定路径是否可以作为思源笔记的工作空间目录。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def checkWorkspaceDir Response returns z.object() directly.\n   */\n  export function checkWorkspaceDir(payload: any): Promise<any>;\n\n  /**\n   * 在指定路径创建一个新的思源笔记工作空间。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def createWorkspaceDir Response returns z.object() directly.\n   */\n  export function createWorkspaceDir(payload: any): Promise<any>;\n\n  /**\n   * 获取思源笔记服务器当前的 Unix 时间戳 (毫秒)。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def currentTime Response returns z.object() directly.\n   */\n  export function currentTime(payload: any): Promise<any>;\n\n  /**\n   * 关闭并退出思源笔记程序。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def exit Response returns z.object() directly.\n   */\n  export function exit(payload: any): Promise<any>;\n\n  /**\n   * 导出一份包含当前用户所有配置的 JSON 文件。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def exportConf Response returns z.object() directly.\n   */\n  export function exportConf(payload: any): Promise<any>;\n\n  /**\n   * 导出包含系统运行日志的压缩文件。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def exportLog Response returns z.object() directly.\n   */\n  export function exportLog(payload: any): Promise<any>;\n\n  /**\n   * 获取用于登录验证的图片验证码。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def GetCaptcha Response returns z.object() directly.\n   */\n  export function GetCaptcha(payload: any): Promise<any>;\n\n  /**\n   * 获取当前版本的更新日志内容 (Markdown 格式转换为 HTML)。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getChangelog Response returns z.object() directly.\n   */\n  export function getChangelog(payload: any): Promise<any>;\n\n  /**\n   * 获取思源笔记的全部配置信息。配置项繁多，具体结构请参考 `siyuan/kernel/conf/conf.go` 中的 `Conf` 结构体。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getConf Response returns z.object() directly.\n   */\n  export function getConf(payload: any): Promise<any>;\n\n  /**\n   * 获取内置及自定义 Emoji 的配置信息，用于 Emoji 选择器等功能。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getEmojiConf Response returns z.object() directly.\n   */\n  export function getEmojiConf(payload: any): Promise<any>;\n\n  /**\n   * 获取用于移动端同步的工作空间列表。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getMobileWorkspaces Response returns z.object() directly.\n   */\n  export function getMobileWorkspaces(payload: any): Promise<any>;\n\n  /**\n   * 获取当前的网络代理等配置信息。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getNetwork Response returns z.object() directly.\n   */\n  export function getNetwork(payload: any): Promise<any>;\n\n  /**\n   * 获取当前操作系统上安装的可用字体列表。\n   * (Requires authentication, Requires admin role)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getSysFonts Response returns z.object() directly.\n   */\n  export function getSysFonts(payload: any): Promise<any>;\n\n  /**\n   * 获取当前打开的工作空间目录路径和思源版本号。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getWorkspaceInfo Response returns z.object() directly.\n   */\n  export function getWorkspaceInfo(payload: any): Promise<any>;\n\n  /**\n   * 获取所有已配置或曾经打开过的工作空间列表。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getWorkspaces Response returns z.object() directly.\n   */\n  export function getWorkspaces(payload: any): Promise<any>;\n\n  /**\n   * 设置不再提示用户添加 Microsoft Defender 排除项。此操作仅在 Windows 系统上有效。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def ignoreAddMicrosoftDefenderExclusion Response returns z.object() directly.\n   */\n  export function ignoreAddMicrosoftDefenderExclusion(payload: any): Promise<any>;\n\n  /**\n   * 通过上传 `conf.json` 文件来导入用户配置。导入成功后通常需要重启或刷新UI生效。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def importConf Response returns z.object() directly.\n   */\n  export function importConf(payload: any): Promise<any>;\n\n  /**\n   * 使用访问授权码或用户名密码进行登录验证。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def LoginAuth Response returns z.object() directly.\n   */\n  export function LoginAuth(payload: any): Promise<any>;\n\n  /**\n   * 清除当前的登录授权状态。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def LogoutAuth Response returns z.object() directly.\n   */\n  export function LogoutAuth(payload: any): Promise<any>;\n\n  /**\n   * 命令客户端重新加载思源笔记的用户界面。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def reloadUI Response returns z.object() directly.\n   */\n  export function reloadUI(payload: any): Promise<any>;\n\n  /**\n   * 从工作空间列表中移除指定的目录（逻辑删除，不删除物理文件）。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeWorkspaceDir Response returns z.object() directly.\n   */\n  export function removeWorkspaceDir(payload: any): Promise<any>;\n\n  /**\n   * 从工作空间列表中移除并物理删除指定目录及其所有内容。这是一个危险操作！\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeWorkspaceDirPhysically Response returns z.object() directly.\n   */\n  export function removeWorkspaceDirPhysically(payload: any): Promise<any>;\n\n  /**\n   * 设置或清空 API 访问令牌 (token)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setAPIToken Response returns z.object() directly.\n   */\n  export function setAPIToken(payload: any): Promise<any>;\n\n  /**\n   * 设置或清空访问思源笔记的授权码。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setAccessAuthCode Response returns z.object() directly.\n   */\n  export function setAccessAuthCode(payload: any): Promise<any>;\n\n  /**\n   * 设置思源笔记的外观模式 (亮色/暗色)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setAppearanceMode Response returns z.object() directly.\n   */\n  export function setAppearanceMode(payload: any): Promise<any>;\n\n  /**\n   * 设置思源笔记是否开机自启动 (仅对桌面客户端有效)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setAutoLaunch Response returns z.object() directly.\n   */\n  export function setAutoLaunch(payload: any): Promise<any>;\n\n  /**\n   * 设置是否在检测到新版本后自动下载并安装更新包。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setDownloadInstallPkg Response returns z.object() directly.\n   */\n  export function setDownloadInstallPkg(payload: any): Promise<any>;\n\n  /**\n   * 设置思源笔记是否在系统锁屏时自动锁定 (仅对桌面客户端有效)。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setFollowSystemLockScreen Response returns z.object() directly.\n   */\n  export function setFollowSystemLockScreen(payload: any): Promise<any>;\n\n  /**\n   * 启用或禁用 Google Analytics 数据追踪。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setGoogleAnalytics Response returns z.object() directly.\n   */\n  export function setGoogleAnalytics(payload: any): Promise<any>;\n\n  /**\n   * 设置网络连接时使用的代理服务器。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setNetworkProxy Response returns z.object() directly.\n   */\n  export function setNetworkProxy(payload: any): Promise<any>;\n\n  /**\n   * 配置思源笔记的网络服务，如服务端口、是否允许其他设备访问等。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setNetworkServe Response returns z.object() directly.\n   */\n  export function setNetworkServe(payload: any): Promise<any>;\n\n  /**\n   * 设置用户界面的布局模式，例如左右布局、顶部分栏等。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setUILayout Response returns z.object() directly.\n   */\n  export function setUILayout(payload: any): Promise<any>;\n\n  /**\n   * 切换到指定路径的工作空间。成功后通常需要重启或刷新 UI。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def setWorkspaceDir Response returns z.object() directly.\n   */\n  export function setWorkspaceDir(payload: any): Promise<any>;\n\n  /**\n   * （内部接口）用于桌面端添加 UI 进程的相关信息，如 PID。通常不由普通用户或第三方应用直接调用。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def addUIProcess Response returns z.object() directly.\n   */\n  export function addUIProcess(payload: any): Promise<any>;\n\n  /**\n   * 获取当前思源笔记内核的版本号。此接口也接受 POST 请求。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def version Response returns z.object() directly.\n   */\n  export function version(payload: any): Promise<any>;\n\n  /**\n   * 获取当前思源笔记内核的版本号。此接口也接受 GET 请求。\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def version Response returns z.object() directly.\n   */\n  export function version(payload: any): Promise<any>;\n\n}\n\ndeclare module './tagClient' {\n  /**\n   * 获取当前工作空间的所有标签列表。可以提供一个可选的排序参数来即时更新并应用全局标签排序设置。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def getTag Response returns z.object() directly.\n   */\n  export function getTag(payload: any): Promise<any>;\n\n  /**\n   * 根据标签名称移除一个标签。这会从所有关联的块中移除该标签。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def removeTag Response returns z.object() directly.\n   */\n  export function removeTag(payload: any): Promise<any>;\n\n  /**\n   * 将一个旧标签名称重命名为一个新标签名称。所有关联块中的标签引用都会被更新。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def renameTag Response returns z.object() directly.\n   */\n  export function renameTag(payload: any): Promise<any>;\n\n}\n\ndeclare module './templateClient' {\n  /**\n   * 将指定 ID 的文档内容保存为一个模板。可以指定模板名称，以及是否覆盖同名模板。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def docSaveAsTemplate Response returns z.object() directly.\n   */\n  export function docSaveAsTemplate(payload: any): Promise<any>;\n\n  /**\n   * 根据给定的模板文件路径和可选的上下文块ID，渲染模板内容。可以指定是否为预览模式。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def renderTemplate Response returns z.object() directly.\n   */\n  export function renderTemplate(payload: any): Promise<any>;\n\n  /**\n   * 使用 Go 的 Sprig 模板函数库渲染给定的模板字符串。\n   * (Requires authentication)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def renderSprig Response returns z.object() directly.\n   */\n  export function renderSprig(payload: any): Promise<any>;\n\n}\n\ndeclare module './transactionsClient' {\n  /**\n   * 执行一个或多个事务操作，每个事务可以包含多个具体的数据修改动作。这是思源笔记中进行数据修改最核心的接口之一。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def performTransactions Response returns z.object() directly.\n   */\n  export function performTransactions(payload: any): Promise<any>;\n\n}\n\ndeclare module './uiClient' {\n  /**\n   * 重新加载指定的属性视图。通常在属性视图的结构或数据发生变化后调用，以刷新显示。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def reloadAttributeView Response returns z.object() directly.\n   */\n  export function reloadAttributeView(payload: any): Promise<any>;\n\n  /**\n   * 重新加载文件树。当文档结构发生变化（如创建、删除、移动文档或笔记本）后，调用此接口以刷新文件树显示。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def reloadFiletree Response returns z.object() directly.\n   */\n  export function reloadFiletree(payload: any): Promise<any>;\n\n  /**\n   * 重新加载指定的 Protyle 编辑器实例。通常在编辑器内容或状态在后端被修改后调用，以刷新前端显示。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def reloadProtyle Response returns z.object() directly.\n   */\n  export function reloadProtyle(payload: any): Promise<any>;\n\n  /**\n   * 重新加载标签列表。当标签被创建、删除、重命名或引用发生变化后，调用此接口以刷新标签面板的显示。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def reloadTag Response returns z.object() directly.\n   */\n  export function reloadTag(payload: any): Promise<any>;\n\n  /**\n   * 触发整个用户界面的重新加载。这是一个比较重的操作，通常在发生可能影响全局UI状态的重大变更后使用，或者作为一种通用的刷新手段。\n   * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n   * @param payload Request payload (any)\n   * @returns Promise<any> ERROR: API def reloadUI Response returns z.object() directly.\n   */\n  export function reloadUI(payload: any): Promise<any>;\n\n}