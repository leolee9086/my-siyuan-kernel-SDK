// Generated client for API group ui\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 重新加载指定的属性视图。通常在属性视图的结构或数据发生变化后调用，以刷新显示。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def reloadAttributeView Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def reloadAttributeView Response returns z.object() directly.\n */\nexport async function reloadAttributeView(payload) {\n  // Example: return fetchWrapper('POST', '/api/ui/reloadAttributeView', payload, true);\n  console.log('Mock call to reloadAttributeView with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 重新加载文件树。当文档结构发生变化（如创建、删除、移动文档或笔记本）后，调用此接口以刷新文件树显示。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def reloadFiletree Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def reloadFiletree Response returns z.object() directly.\n */\nexport async function reloadFiletree(payload) {\n  // Example: return fetchWrapper('POST', '/api/ui/reloadFiletree', payload, true);\n  console.log('Mock call to reloadFiletree with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 重新加载指定的 Protyle 编辑器实例。通常在编辑器内容或状态在后端被修改后调用，以刷新前端显示。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def reloadProtyle Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def reloadProtyle Response returns z.object() directly.\n */\nexport async function reloadProtyle(payload) {\n  // Example: return fetchWrapper('POST', '/api/ui/reloadProtyle', payload, true);\n  console.log('Mock call to reloadProtyle with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 重新加载标签列表。当标签被创建、删除、重命名或引用发生变化后，调用此接口以刷新标签面板的显示。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def reloadTag Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def reloadTag Response returns z.object() directly.\n */\nexport async function reloadTag(payload) {\n  // Example: return fetchWrapper('POST', '/api/ui/reloadTag', payload, true);\n  console.log('Mock call to reloadTag with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 触发整个用户界面的重新加载。这是一个比较重的操作，通常在发生可能影响全局UI状态的重大变更后使用，或者作为一种通用的刷新手段。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def reloadUI Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def reloadUI Response returns z.object() directly.\n */\nexport async function reloadUI(payload) {\n  // Example: return fetchWrapper('POST', '/api/ui/reloadUI', payload, true);\n  console.log('Mock call to reloadUI with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n