// Generated client for API group search\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 在指定的块ID范围、路径、笔记本、类型中查找内容并进行替换。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def findReplace Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def findReplace Response returns z.object() directly.\n */\nexport async function findReplace(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/findReplace', payload, true);\n  console.log('Mock call to findReplace with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 对资源文件内容进行全文搜索（此功能需要付费订阅）。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def fullTextSearchAssetContent Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def fullTextSearchAssetContent Response returns z.object() directly.\n */\nexport async function fullTextSearchAssetContent(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/fullTextSearchAssetContent', payload, true);\n  console.log('Mock call to fullTextSearchAssetContent with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 对块内容进行全文搜索，支持多种搜索方式和过滤条件。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def fullTextSearchBlock Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def fullTextSearchBlock Response returns z.object() directly.\n */\nexport async function fullTextSearchBlock(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/fullTextSearchBlock', payload, true);\n  console.log('Mock call to fullTextSearchBlock with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 获取资源文件内容中，与指定查询相关的片段。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def getAssetContent Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def getAssetContent Response returns z.object() directly.\n */\nexport async function getAssetContent(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/getAssetContent', payload, true);\n  console.log('Mock call to getAssetContent with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 获取指定嵌入块的渲染内容，支持包含其子块或显示面包屑。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def getEmbedBlock Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def getEmbedBlock Response returns z.object() directly.\n */\nexport async function getEmbedBlock(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/getEmbedBlock', payload, true);\n  console.log('Mock call to getEmbedBlock with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 分页列出在当前工作空间中所有无效的块引用（例如，引用的块已被删除）。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def listInvalidBlockRefs Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def listInvalidBlockRefs Response returns z.object() directly.\n */\nexport async function listInvalidBlockRefs(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/listInvalidBlockRefs', payload, true);\n  console.log('Mock call to listInvalidBlockRefs with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 根据路径移除指定的模板文件。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def removeTemplate Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def removeTemplate Response returns z.object() directly.\n */\nexport async function removeTemplate(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/removeTemplate', payload, true);\n  console.log('Mock call to removeTemplate with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 根据文件名关键词和可选的文件扩展名搜索资源文件。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def searchAsset Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def searchAsset Response returns z.object() directly.\n */\nexport async function searchAsset(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/searchAsset', payload, true);\n  console.log('Mock call to searchAsset with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 在指定的嵌入块（及其可能的子块）中使用 SQL 语句进行内容搜索。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def searchEmbedBlock Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def searchEmbedBlock Response returns z.object() directly.\n */\nexport async function searchEmbedBlock(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/searchEmbedBlock', payload, true);\n  console.log('Mock call to searchEmbedBlock with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 在输入引用（例如 `((` 或 `[[`）时，根据关键词动态搜索可能的引用块建议。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def searchRefBlock Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def searchRefBlock Response returns z.object() directly.\n */\nexport async function searchRefBlock(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/searchRefBlock', payload, true);\n  console.log('Mock call to searchRefBlock with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 根据关键词搜索已存在的标签。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def searchTag Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def searchTag Response returns z.object() directly.\n */\nexport async function searchTag(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/searchTag', payload, true);\n  console.log('Mock call to searchTag with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 根据关键词搜索模板（通常是模板文件名或内容）。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def searchTemplate Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def searchTemplate Response returns z.object() directly.\n */\nexport async function searchTemplate(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/searchTemplate', payload, true);\n  console.log('Mock call to searchTemplate with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 根据关键词搜索挂件块。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def searchWidget Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def searchWidget Response returns z.object() directly.\n */\nexport async function searchWidget(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/searchWidget', payload, true);\n  console.log('Mock call to searchWidget with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 更新指定**查询嵌入块（`query_embed` 类型）**的原始查询语句或脚本内容。此接口专门用于处理查询嵌入块，不适用于普通块的自定义属性更新。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def updateEmbedBlock Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def updateEmbedBlock Response returns z.object() directly.\n */\nexport async function updateEmbedBlock(payload) {\n  // Example: return fetchWrapper('POST', '/api/search/updateEmbedBlock', payload, true);\n  console.log('Mock call to updateEmbedBlock with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n