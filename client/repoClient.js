// Generated client for API group repo\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 将当前工作区内容回滚到指定的仓库快照版本。这是一个危险操作，会导致当前未保存的更改丢失，请谨慎操作。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def checkoutRepo Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def checkoutRepo Response returns z.object() directly.\n */\nexport async function checkoutRepo(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/checkoutRepo', payload, true);\n  console.log('Mock call to checkoutRepo with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 为当前工作区创建一个新的快照。可以附带备注信息和标签。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def createSnapshot Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def createSnapshot Response returns z.object() directly.\n */\nexport async function createSnapshot(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/createSnapshot', payload, true);\n  console.log('Mock call to createSnapshot with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 比较两个指定的本地快照之间的差异，列出新增、修改和删除的文档。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def diffRepoSnapshots Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def diffRepoSnapshots Response returns z.object() directly.\n */\nexport async function diffRepoSnapshots(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/diffRepoSnapshots', payload, true);\n  console.log('Mock call to diffRepoSnapshots with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 从云端下载指定的快照到本地。如果本地已存在同名快照，可能会被覆盖或操作失败。下载的是标签快照时需要提供标签名。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def downloadCloudSnapshot Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def downloadCloudSnapshot Response returns z.object() directly.\n */\nexport async function downloadCloudSnapshot(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/downloadCloudSnapshot', payload, true);\n  console.log('Mock call to downloadCloudSnapshot with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 分页获取当前用户在云端存储的所有普通快照列表。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getCloudRepoSnapshots Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def getCloudRepoSnapshots Response returns z.object() directly.\n */\nexport async function getCloudRepoSnapshots(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/getCloudRepoSnapshots', payload, true);\n  console.log('Mock call to getCloudRepoSnapshots with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 分页获取当前用户在云端存储的所有标签快照列表。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getCloudRepoTagSnapshots Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def getCloudRepoTagSnapshots Response returns z.object() directly.\n */\nexport async function getCloudRepoTagSnapshots(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/getCloudRepoTagSnapshots', payload, true);\n  console.log('Mock call to getCloudRepoTagSnapshots with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 获取指定快照中特定文件的原始内容。此接口直接返回文件数据流，不返回标准JSON结构。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getRepoFile Request returns z.object() directly.\n * @returns {Promise<any>} 此接口不返回标准 JSON。成功时直接返回文件数据流 (HTTP 200)，Content-Type 根据文件类型确定。失败时返回标准 JSON 错误结构。\n */\nexport async function getRepoFile(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/getRepoFile', payload, true);\n  console.log('Mock call to getRepoFile with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 分页获取当前工作区本地存储的所有普通快照列表。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getRepoSnapshots Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def getRepoSnapshots Response returns z.object() directly.\n */\nexport async function getRepoSnapshots(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/getRepoSnapshots', payload, true);\n  console.log('Mock call to getRepoSnapshots with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 分页获取当前工作区本地存储的所有标签快照列表。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getRepoTagSnapshots Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def getRepoTagSnapshots Response returns z.object() directly.\n */\nexport async function getRepoTagSnapshots(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/getRepoTagSnapshots', payload, true);\n  console.log('Mock call to getRepoTagSnapshots with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 导入仓库加密密钥。这是一个危险操作，错误的密钥可能导致数据无法解密。导入的密钥文件通常是 .sykey 后缀。此操作通过 FormData 接收文件。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def importRepoKey Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def importRepoKey Response returns z.object() directly.\n */\nexport async function importRepoKey(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/importRepoKey', payload, true);\n  console.log('Mock call to importRepoKey with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 为当前工作区初始化一个新的随机加密密钥。此操作通常在首次设置加密或重置密钥时使用。旧密钥将被覆盖。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def initRepoKey Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def initRepoKey Response returns z.object() directly.\n */\nexport async function initRepoKey(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/initRepoKey', payload, true);\n  console.log('Mock call to initRepoKey with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 通过用户提供的口令生成并初始化仓库加密密钥。旧密钥将被覆盖。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def initRepoKeyFromPassphrase Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def initRepoKeyFromPassphrase Response returns z.object() directly.\n */\nexport async function initRepoKeyFromPassphrase(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/initRepoKeyFromPassphrase', payload, true);\n  console.log('Mock call to initRepoKeyFromPassphrase with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 获取并打开指定快照中特定文档的内容，用于预览历史版本。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def openRepoSnapshotDoc Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def openRepoSnapshotDoc Response returns z.object() directly.\n */\nexport async function openRepoSnapshotDoc(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/openRepoSnapshotDoc', payload, true);\n  console.log('Mock call to openRepoSnapshotDoc with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 彻底删除用户在云端的所有仓库数据，包括所有快照和标签快照。这是一个非常危险且不可逆的操作，执行前通常会有二次确认。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def purgeCloudRepo Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def purgeCloudRepo Response returns z.object() directly.\n */\nexport async function purgeCloudRepo(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/purgeCloudRepo', payload, true);\n  console.log('Mock call to purgeCloudRepo with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 彻底删除当前工作区的本地仓库数据，包括所有快照和标签快照。这是一个非常危险且不可逆的操作，执行前通常会有二次确认。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def purgeRepo Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def purgeRepo Response returns z.object() directly.\n */\nexport async function purgeRepo(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/purgeRepo', payload, true);\n  console.log('Mock call to purgeRepo with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 从云端移除指定的标签快照。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def removeCloudRepoTagSnapshot Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def removeCloudRepoTagSnapshot Response returns z.object() directly.\n */\nexport async function removeCloudRepoTagSnapshot(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/removeCloudRepoTagSnapshot', payload, true);\n  console.log('Mock call to removeCloudRepoTagSnapshot with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 从本地仓库移除指定的标签快照。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def removeRepoTagSnapshot Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def removeRepoTagSnapshot Response returns z.object() directly.\n */\nexport async function removeRepoTagSnapshot(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/removeRepoTagSnapshot', payload, true);\n  console.log('Mock call to removeRepoTagSnapshot with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 重置本地仓库，会清空所有快照和标签，并重新初始化仓库密钥。这是一个危险操作，执行前通常会有二次确认。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def resetRepo Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def resetRepo Response returns z.object() directly.\n */\nexport async function resetRepo(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/resetRepo', payload, true);\n  console.log('Mock call to resetRepo with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置本地仓库快照索引的保留天数。过期的索引将被自动清理。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def setRepoIndexRetentionDays Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setRepoIndexRetentionDays Response returns z.object() directly.\n */\nexport async function setRepoIndexRetentionDays(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/setRepoIndexRetentionDays', payload, true);\n  console.log('Mock call to setRepoIndexRetentionDays with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置每日自动创建的快照在本地的保留数量。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def setRetentionIndexesDaily Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setRetentionIndexesDaily Response returns z.object() directly.\n */\nexport async function setRetentionIndexesDaily(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/setRetentionIndexesDaily', payload, true);\n  console.log('Mock call to setRetentionIndexesDaily with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 为指定的本地快照打上标签，使其成为一个标签快照。可以同时提供备注，如果提供会覆盖快照原有的备注。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def tagSnapshot Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def tagSnapshot Response returns z.object() directly.\n */\nexport async function tagSnapshot(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/tagSnapshot', payload, true);\n  console.log('Mock call to tagSnapshot with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 将指定的本地快照上传到云端。如果是标签快照，需要提供标签名。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def uploadCloudSnapshot Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def uploadCloudSnapshot Response returns z.object() directly.\n */\nexport async function uploadCloudSnapshot(payload) {\n  // Example: return fetchWrapper('POST', '/api/repo/uploadCloudSnapshot', payload, true);\n  console.log('Mock call to uploadCloudSnapshot with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n