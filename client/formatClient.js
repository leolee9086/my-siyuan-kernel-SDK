// Generated client for API group format\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 为指定块ID的内容（Markdown原文）在中文与英文、数字之间自动添加空格，以优化排版。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.id 要处理的块 ID。
 * @property {number} Code API 调用返回码，0 表示成功
 * @property {string} Msg API 调用返回消息
 * @property {null} Data 操作成功时为 null
 */\nexport async function autoSpace(params) {\n  // Example: return fetchWrapper('POST', '/api/format/autoSpace', params, true);\n  console.log('Mock call to autoSpace with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<AutoSpaceResponse>\n}\n\n/**\n * 将指定块ID内的所有外部网络资源（如图片、附件等，但不包括仅被引用的网络图片链接）下载并转存为本地资源。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.id 要处理的块 ID，该块内的网络资源将被转存。
 * @property {number} Code API 调用返回码，0 表示成功
 * @property {string} Msg API 调用返回消息
 * @property {null} Data 操作成功时为 null
 */\nexport async function netAssets2LocalAssets(params) {\n  // Example: return fetchWrapper('POST', '/api/format/netAssets2LocalAssets', params, true);\n  console.log('Mock call to netAssets2LocalAssets with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<NetAssets2LocalAssetsResponse>\n}\n\n/**\n * 将指定块ID内的网络图片（Markdown中实际嵌入的图片，非普通链接）转存为本地资源。可以指定单个图片URL进行转存，或留空以转存块内所有网络图片。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.id 要处理的块 ID。块内的网络图片将被转存。
 * @param {string} [params.url] url
 * @property {number} Code API 调用返回码，0 表示成功
 * @property {string} Msg API 调用返回消息
 * @property {null} Data 操作成功时为 null
 */\nexport async function netImg2LocalAssets(params) {\n  // Example: return fetchWrapper('POST', '/api/format/netImg2LocalAssets', params, true);\n  console.log('Mock call to netImg2LocalAssets with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<NetImg2LocalAssetsResponse>\n}\n\n