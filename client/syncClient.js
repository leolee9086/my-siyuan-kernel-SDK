// Generated client for API group sync\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 在云端存储中创建一个新的同步目录。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def createCloudSyncDir Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def createCloudSyncDir Response returns z.object() directly.\n */\nexport async function createCloudSyncDir(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/createCloudSyncDir', payload, true);\n  console.log('Mock call to createCloudSyncDir with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 将会话中当前的 S3 同步配置加密并打包成 .zip 文件供导出。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def exportSyncProviderS3 Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def exportSyncProviderS3 Response returns z.object() directly.\n */\nexport async function exportSyncProviderS3(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/exportSyncProviderS3', payload, true);\n  console.log('Mock call to exportSyncProviderS3 with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 将会话中当前的 WebDAV 同步配置加密并打包成 .zip 文件供导出。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def exportSyncProviderWebDAV Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def exportSyncProviderWebDAV Response returns z.object() directly.\n */\nexport async function exportSyncProviderWebDAV(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/exportSyncProviderWebDAV', payload, true);\n  console.log('Mock call to exportSyncProviderWebDAV with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 检查应用启动时数据同步是否成功完成。此接口仅在管理员角色下，且同步已启用且成功时返回特定提示。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def getBootSync Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def getBootSync Response returns z.object() directly.\n */\nexport async function getBootSync(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/getBootSync', payload, true);\n  console.log('Mock call to getBootSync with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 获取当前的同步状态、最后同步时间、以及当前在线的内核实例等信息。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getSyncInfo Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def getSyncInfo Response returns z.object() directly.\n */\nexport async function getSyncInfo(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/getSyncInfo', payload, true);\n  console.log('Mock call to getSyncInfo with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 通过上传的 .zip 或 .json 文件导入 S3 同步配置。导入的配置会经过解密和验证。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def importSyncProviderS3 Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def importSyncProviderS3 Response returns z.object() directly.\n */\nexport async function importSyncProviderS3(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/importSyncProviderS3', payload, true);\n  console.log('Mock call to importSyncProviderS3 with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 通过上传的 .zip 或 .json 文件导入 WebDAV 同步配置。导入的配置会经过解密和验证。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def importSyncProviderWebDAV Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def importSyncProviderWebDAV Response returns z.object() directly.\n */\nexport async function importSyncProviderWebDAV(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/importSyncProviderWebDAV', payload, true);\n  console.log('Mock call to importSyncProviderWebDAV with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 列出当前配置的云端存储中可用的同步目录及其大小信息。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def listCloudSyncDir Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def listCloudSyncDir Response returns z.object() directly.\n */\nexport async function listCloudSyncDir(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/listCloudSyncDir', payload, true);\n  console.log('Mock call to listCloudSyncDir with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 执行启动时的数据同步流程。此接口会触发 model.BootSyncData()。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def performBootSync Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def performBootSync Response returns z.object() directly.\n */\nexport async function performBootSync(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/performBootSync', payload, true);\n  console.log('Mock call to performBootSync with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 执行数据同步操作。对于非云端同步模式 (mode != 3)，将触发 model.SyncData(true)。对于云端同步模式 (mode === 3)，需要明确指定同步方向 (upload: true/false)。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def performSync Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def performSync Response returns z.object() directly.\n */\nexport async function performSync(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/performSync', payload, true);\n  console.log('Mock call to performSync with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 从云端存储中移除指定的同步目录。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def removeCloudSyncDir Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def removeCloudSyncDir Response returns z.object() directly.\n */\nexport async function removeCloudSyncDir(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/removeCloudSyncDir', payload, true);\n  console.log('Mock call to removeCloudSyncDir with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置当前内核实例使用的云端同步目录。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setCloudSyncDir Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setCloudSyncDir Response returns z.object() directly.\n */\nexport async function setCloudSyncDir(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setCloudSyncDir', payload, true);\n  console.log('Mock call to setCloudSyncDir with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置是否启用数据同步功能。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setSyncEnable Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncEnable Response returns z.object() directly.\n */\nexport async function setSyncEnable(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncEnable', payload, true);\n  console.log('Mock call to setSyncEnable with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置在数据同步过程中发生内容冲突时，是否自动生成冲突副本文件。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setSyncGenerateConflictDoc Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncGenerateConflictDoc Response returns z.object() directly.\n */\nexport async function setSyncGenerateConflictDoc(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncGenerateConflictDoc', payload, true);\n  console.log('Mock call to setSyncGenerateConflictDoc with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置自动数据同步的时间间隔（单位：分钟）。设置后会重置同步计时器。\n * (Requires authentication)\n * @param {any} payload - ERROR: API def setSyncInterval Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncInterval Response returns z.object() directly.\n */\nexport async function setSyncInterval(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncInterval', payload, true);\n  console.log('Mock call to setSyncInterval with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置数据同步的模式。例如：0 表示自动同步，1 表示手动同步，3 表示云端双向同步时需手动触发单向同步。设置后会重置同步计时器。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setSyncMode Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncMode Response returns z.object() directly.\n */\nexport async function setSyncMode(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncMode', payload, true);\n  console.log('Mock call to setSyncMode with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置是否启用同步感知功能。启用后，当检测到远程数据更新时，可能会有相应的提示或行为。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setSyncPerception Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncPerception Response returns z.object() directly.\n */\nexport async function setSyncPerception(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncPerception', payload, true);\n  console.log('Mock call to setSyncPerception with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置当前使用的数据同步服务提供商，例如 S3、WebDAV 或本地文件夹。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setSyncProvider Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncProvider Response returns z.object() directly.\n */\nexport async function setSyncProvider(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncProvider', payload, true);\n  console.log('Mock call to setSyncProvider with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置当同步服务提供商为本地文件夹时，所使用的本地文件夹路径。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setSyncProviderLocal Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncProviderLocal Response returns z.object() directly.\n */\nexport async function setSyncProviderLocal(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncProviderLocal', payload, true);\n  console.log('Mock call to setSyncProviderLocal with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置使用 S3作为同步服务提供商时的详细配置信息，如 Access Key, Secret Key, Endpoint, Bucket 等。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setSyncProviderS3 Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncProviderS3 Response returns z.object() directly.\n */\nexport async function setSyncProviderS3(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncProviderS3', payload, true);\n  console.log('Mock call to setSyncProviderS3 with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n/**\n * 设置使用 WebDAV 作为同步服务提供商时的详细配置信息，如 Endpoint, 用户名和密码。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def setSyncProviderWebDAV Request returns z.object() directly.\n * @returns {Promise<any>} ERROR: API def setSyncProviderWebDAV Response returns z.object() directly.\n */\nexport async function setSyncProviderWebDAV(payload) {\n  // Example: return fetchWrapper('POST', '/api/sync/setSyncProviderWebDAV', payload, true);\n  console.log('Mock call to setSyncProviderWebDAV with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<any>\n}\n\n