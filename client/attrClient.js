// Generated client for API group attr\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 根据提供的块 ID 列表，批量获取这些块的所有自定义属性。\n * (Requires authentication)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {Array<string>} params.ids 要获取属性的块 ID 数组
 * @property {number} Code 返回码，0 表示成功
 * @property {string} Msg 返回消息
 * @property {Object<string,} Data 一个对象，键为块 ID，值为该块的属性对象 (属性名: 属性值)
 */\nexport async function batchGetBlockAttrs(params) {\n  // Example: return fetchWrapper('POST', '/api/attr/batchGetBlockAttrs', params, true);\n  console.log('Mock call to batchGetBlockAttrs with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<BatchGetBlockAttrsResponse>\n}\n\n/**\n * 根据提供的块 ID 和对应的属性集，批量为这些块设置自定义属性。如果属性值为 null，则表示删除该属性。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {Array<object>} params.blockAttrs 包含多个块属性设置的对象数组
 * @property {number} Code 返回码，0 表示成功
 * @property {string} Msg 返回消息
 * @property {any} Data Data
 */\nexport async function batchSetBlockAttrs(params) {\n  // Example: return fetchWrapper('POST', '/api/attr/batchSetBlockAttrs', params, true);\n  console.log('Mock call to batchSetBlockAttrs with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<BatchSetBlockAttrsResponse>\n}\n\n/**\n * 获取指定块 ID 的所有自定义属性。\n * (Requires authentication)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.id 要获取属性的块 ID
 * @property {number} Code 返回码，0 表示成功
 * @property {string} Msg 返回消息
 * @property {Object<string,} Data 该块的属性对象 (属性名: 属性值)
 */\nexport async function getBlockAttrs(params) {\n  // Example: return fetchWrapper('POST', '/api/attr/getBlockAttrs', params, true);\n  console.log('Mock call to getBlockAttrs with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<GetBlockAttrsResponse>\n}\n\n/**\n * 获取当前工作空间中所有书签使用过的标签列表。\n * (Requires authentication)\n * @returns {Promise<object>}\n * @property {number} Code 返回码，0 表示成功
 * @property {string} Msg 返回消息
 * @property {Array<string>} Data 书签标签字符串数组
 */\nexport async function getBookmarkLabels() {\n  // Example: return fetchWrapper('POST', '/api/attr/getBookmarkLabels', undefined, true);\n  console.log('Mock call to getBookmarkLabels with:', "'no params'");\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<GetBookmarkLabelsResponse>\n}\n\n/**\n * 重置指定块的若干属性。此操作通常用于删除属性，但需要提供属性的当前期望值进行匹配后才会执行。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.id 要重置属性的块 ID
 * @param {Object<string,} params.attrs 要重置的属性对象 (属性名: 期望的当前属性值)。只有当块的属性值与此处提供的值匹配时，该属性才会被移除。
 * @property {number} Code 返回码，0 表示成功
 * @property {string} Msg 返回消息
 * @property {any} Data Data
 */\nexport async function resetBlockAttrs(params) {\n  // Example: return fetchWrapper('POST', '/api/attr/resetBlockAttrs', params, true);\n  console.log('Mock call to resetBlockAttrs with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<ResetBlockAttrsResponse>\n}\n\n/**\n * 为指定的单个块设置自定义属性。如果属性值为 null，则表示删除该属性。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.id 要设置属性的块 ID
 * @param {Object<string,} params.attrs 要设置的属性对象 (属性名: 属性值)。如果属性值为 null，则删除该属性。
 * @property {number} Code 返回码，0 表示成功
 * @property {string} Msg 返回消息
 * @property {any} Data Data
 */\nexport async function setBlockAttrs(params) {\n  // Example: return fetchWrapper('POST', '/api/attr/setBlockAttrs', params, true);\n  console.log('Mock call to setBlockAttrs with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<SetBlockAttrsResponse>\n}\n\n