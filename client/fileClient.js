// Generated client for API group file\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 复制工作空间内的单个文件或资源文件。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.src 源文件路径。如果是资源文件，则为相对于 assets 目录的路径；如果是普通工作空间文件，则为相对于工作空间根目录的路径。后端会尝试将其解析为绝对路径。注意：此接口不能直接复制目录。后台实现会先尝试将其作为资源文件解析，如果失败则作为工作空间普通文件解析。若要复制普通文件，建议使用 /api/file/globalCopyFiles。 
 * @param {string} params.dest 目标文件绝对路径。
 * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {object} Data Data
 */\nexport async function copyFile(params) {\n  // Example: return fetchWrapper('POST', '/api/file/copyFile', params, true);\n  console.log('Mock call to copyFile with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<CopyFileResponse>\n}\n\n/**\n * 获取指定路径的文件内容。注意：此接口不通过JSON返回文件内容，而是直接在HTTP响应体中返回文件数据流，Content-Type 根据文件类型确定。因此，zodResponseSchema 仅用于描述可能的错误情况下的JSON响应。成功获取文件时，HTTP状态码为200，响应体为文件内容。\n * (Requires authentication)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.path 要获取内容的文件路径 (相对于工作空间根目录)。
 * @property {number} Code 错误状态码 (例如 403, 404, 500)
 * @property {string} Msg 错误消息
 */\nexport async function getFile(params) {\n  // Example: return fetchWrapper('POST', '/api/file/getFile', params, true);\n  console.log('Mock call to getFile with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<GetFileResponse>\n}\n\n/**\n * 根据输入的文件路径，生成一个在目标位置唯一的、不冲突的文件名版本。例如，输入 'assets/image.png'，如果已存在，则可能返回 'assets/image_1.png'。\n * (Requires authentication)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.path 原始文件路径 (通常包含期望的文件名和扩展名)。
 * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {object} Data Data
 */\nexport async function getUniqueFilename(params) {\n  // Example: return fetchWrapper('POST', '/api/file/getUniqueFilename', params, true);\n  console.log('Mock call to getUniqueFilename with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<GetUniqueFilenameResponse>\n}\n\n/**\n * 将多个源文件复制到指定的目标目录 (相对于工作空间)。源文件路径必须是绝对路径。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {Array<string>} params.srcs 要复制的源文件绝对路径数组。如果任何一个文件不存在，操作将失败。注意：不能是目录。
 * @param {string} params.destDir 目标目录路径 (相对于工作空间根目录)。
 * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {null} Data? Data
 */\nexport async function globalCopyFiles(params) {\n  // Example: return fetchWrapper('POST', '/api/file/globalCopyFiles', params, true);\n  console.log('Mock call to globalCopyFiles with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<GlobalCopyFilesResponse>\n}\n\n/**\n * 上传文件或创建目录。这是一个 multipart/form-data 请求。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - Error in schema function: {(intermediate value)(intermediate value)(intermediate value)}.describe is not a function\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {null} Data? Data
 */\nexport async function putFile(payload) {\n  // Example: return fetchWrapper('POST', '/api/file/putFile', payload, true);\n  console.log('Mock call to putFile with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<PutFileResponse>\n}\n\n/**\n * 读取指定目录下的文件和子目录列表。\n * (Requires authentication)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.path 要读取的目录路径 (相对于工作空间根目录)。
 * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {Array<object>} Data 目录中的条目列表
 */\nexport async function readDir(params) {\n  // Example: return fetchWrapper('POST', '/api/file/readDir', params, true);\n  console.log('Mock call to readDir with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<ReadDirResponse>\n}\n\n/**\n * 移除指定路径的文件或目录。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.path 要移除的文件或目录路径 (相对于工作空间根目录)。
 * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {null} Data? Data
 */\nexport async function removeFile(params) {\n  // Example: return fetchWrapper('POST', '/api/file/removeFile', params, true);\n  console.log('Mock call to removeFile with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<RemoveFileResponse>\n}\n\n/**\n * 重命名指定路径的文件或目录。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.path 原始文件或目录路径 (相对于工作空间根目录)。
 * @param {string} params.newPath 新的文件或目录路径 (相对于工作空间根目录)。
 * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {null} Data? Data
 */\nexport async function renameFile(params) {\n  // Example: return fetchWrapper('POST', '/api/file/renameFile', params, true);\n  console.log('Mock call to renameFile with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<RenameFileResponse>\n}\n\n