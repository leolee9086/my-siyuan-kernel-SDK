// Generated client for API group account\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 检查用户输入的激活码是否有效。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.data 要检查的激活码
 * @property {number} Code 返回码，0 表示成功，其他表示失败
 * @property {string} Msg 返回消息
 * @property {any} Data Data
 */\nexport async function checkActivationcode(params) {\n  // Example: return fetchWrapper('POST', '/api/account/checkActivationcode', params, true);\n  console.log('Mock call to checkActivationcode with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<CheckActivationcodeResponse>\n}\n\n/**\n * 注销当前用户账号。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @returns {Promise<object>}\n * @property {number} Code 返回码，0 表示成功，其他表示失败
 * @property {string} Msg 返回消息
 * @property {any} Data Data
 */\nexport async function deactivateUser() {\n  // Example: return fetchWrapper('POST', '/api/account/deactivate', undefined, true);\n  console.log('Mock call to deactivateUser with:', "'no params'");\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<DeactivateUserResponse>\n}\n\n/**\n * 用户登录，需要提供用户名、密码、验证码和云端区域。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.userName 用户名
 * @param {string} params.userPassword 用户密码
 * @param {string} params.captcha 验证码
 * @param {number} params.cloudRegion 云端区域代码，例如 0 表示中国区
 * @property {number} Code 返回码，0 表示成功，其他表示失败
 * @property {string} Msg 返回消息
 * @property {any} Data Data
 */\nexport async function login(params) {\n  // Example: return fetchWrapper('POST', '/api/account/login', params, true);\n  console.log('Mock call to login with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<LoginResponse>\n}\n\n/**\n * 为当前用户开启免费试用。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @returns {Promise<object>}\n * @property {number} Code 返回码，0 表示成功，其他表示失败
 * @property {string} Msg 返回消息
 * @property {any} Data Data
 */\nexport async function startFreeTrial() {\n  // Example: return fetchWrapper('POST', '/api/account/startFreeTrial', undefined, true);\n  console.log('Mock call to startFreeTrial with:', "'no params'");\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<StartFreeTrialResponse>\n}\n\n/**\n * 使用激活码激活账户。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {object} params - Request parameters.\n * @returns {Promise<object>}\n * @param {string} params.data 要使用的激活码
 * @property {number} Code 返回码，0 表示成功，其他表示失败
 * @property {string} Msg 返回消息
 * @property {any} Data Data
 */\nexport async function useActivationcode(params) {\n  // Example: return fetchWrapper('POST', '/api/account/useActivationcode', params, true);\n  console.log('Mock call to useActivationcode with:', params);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<UseActivationcodeResponse>\n}\n\n