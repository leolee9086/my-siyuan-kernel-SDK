// Generated client for API group history\n// TODO: Implement or import a common HTTP request wrapper function (e.g., fetchWrapper)\n/*\nasync function fetchWrapper(method, endpoint, params, needAuth) {\n  const SiyuanKernelPrefix = typeof window === 'object' ? '' : 'http://127.0.0.1:6806';\n  const url = SiyuanKernelPrefix + endpoint;\n  const options = { method, headers: {} };\n  if (method === 'POST' && params && Object.keys(params).length > 0) { // Only add body if params exist and are not empty\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(params);\n  }\n  if (needAuth) {\n    // Example: Retrieve and add auth token\n    // const token = localStorage.getItem('siyuan-auth-token'); \n    // if (token) options.headers['Authorization'] = `Token ${token}`;\n    options.headers['Authorization'] = 'Bearer YOUR_TOKEN_HERE'; // Placeholder\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    let errorData = 'Failed to parse error response';\n    try { errorData = await response.json(); } catch (e) { try {errorData = await response.text(); } catch (e2) { /* ignore secondary error */ }}\n    console.error('API Error:', response.status, errorData); \n    throw new Error(`API Error ${response.status}: ${JSON.stringify(errorData)}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } \n  return response.text(); // Or handle other content types\n}\n*/\n\n/**\n * 清空当前工作空间下的所有历史记录。这是一个耗时操作，执行前会有提示。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def clearWorkspaceHistory Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {null} Data 成功时固定为 null
 */\nexport async function clearWorkspaceHistory(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/clearWorkspaceHistory', payload, true);\n  console.log('Mock call to clearWorkspaceHistory with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<ClearWorkspaceHistoryResponse>\n}\n\n/**\n * 获取指定文档历史版本的内容和相关信息。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getDocHistoryContent Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {object} Data Data
 */\nexport async function getDocHistoryContent(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/getDocHistoryContent', payload, true);\n  console.log('Mock call to getDocHistoryContent with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<GetDocHistoryContentResponse>\n}\n\n/**\n * 根据创建日期、关键词等条件获取历史记录中的具体条目列表。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getHistoryItems Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {object} Data Data
 */\nexport async function getHistoryItems(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/getHistoryItems', payload, true);\n  console.log('Mock call to getHistoryItems with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<GetHistoryItemsResponse>\n}\n\n/**\n * 获取所有笔记本的历史记录信息。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def getNotebookHistory Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {object} Data Data
 */\nexport async function getNotebookHistory(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/getNotebookHistory', payload, true);\n  console.log('Mock call to getNotebookHistory with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<GetNotebookHistoryResponse>\n}\n\n/**\n * 重建整个工作空间的历史记录索引。这是一个后台异步操作。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def reindexHistory Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {null} Data 成功时固定为 null
 */\nexport async function reindexHistory(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/reindexHistory', payload, true);\n  console.log('Mock call to reindexHistory with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<ReindexHistoryResponse>\n}\n\n/**\n * 将资源文件回滚到指定的历史版本。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def rollbackAssetsHistory Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {null} Data 成功时固定为 null
 */\nexport async function rollbackAssetsHistory(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/rollbackAssetsHistory', payload, true);\n  console.log('Mock call to rollbackAssetsHistory with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<RollbackAssetsHistoryResponse>\n}\n\n/**\n * 将单个文档回滚到指定的历史版本。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def rollbackDocHistory Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {object} Data Data
 */\nexport async function rollbackDocHistory(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/rollbackDocHistory', payload, true);\n  console.log('Mock call to rollbackDocHistory with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<RollbackDocHistoryResponse>\n}\n\n/**\n * 将整个笔记本回滚到指定的历史版本。\n * (Requires authentication, Requires admin role, Unavailable in read-only mode)\n * @param {any} payload - ERROR: API def rollbackNotebookHistory Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {null} Data 成功时固定为 null
 */\nexport async function rollbackNotebookHistory(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/rollbackNotebookHistory', payload, true);\n  console.log('Mock call to rollbackNotebookHistory with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<RollbackNotebookHistoryResponse>\n}\n\n/**\n * 根据关键词、笔记本、类型等分页搜索历史记录。\n * (Requires authentication, Requires admin role)\n * @param {any} payload - ERROR: API def searchHistory Request returns z.object() directly.\n * @returns {Promise<object>}\n * @property {number} Code 响应状态码，0 表示成功
 * @property {string} Msg 响应消息
 * @property {object} Data Data
 */\nexport async function searchHistory(payload) {\n  // Example: return fetchWrapper('POST', '/api/history/searchHistory', payload, true);\n  console.log('Mock call to searchHistory with:', payload);\n  return Promise.resolve({}); // TODO: Ensure mock response matches Promise<SearchHistoryResponse>\n}\n\n