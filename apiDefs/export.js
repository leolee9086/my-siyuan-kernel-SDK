export const exportApiDefs = [
  {
    method: "POST",
    endpoint: "/api/export/export2Liandi",
    en: "export2Liandi",
    zh_cn: "导出到链滴",
    description: "将指定的文档内容导出到链滴社区。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: true,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出到链滴的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.null().optional().describe("此接口成功时不返回具体数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportAsFile",
    en: "exportAsFile",
    zh_cn: "导出上传的文件",
    description: "接收上传的文件，将其保存到临时导出目录，并返回处理后的文件名及可访问路径。通常用于'另存为'等场景。文件通过 FormData 的 'file' 字段上传。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ type: z.string().describe("上传文件的MIME类型") /* FormData, file field is implicit */ }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("处理后的文件名"), file: z.string().describe("文件在服务器上的可访问路径 (相对于/export/)") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportAsciiDoc",
    en: "exportAsciiDoc",
    zh_cn: "导出文档为AsciiDoc",
    description: "将指定的文档导出为 AsciiDoc 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportAttributeView",
    en: "exportAttributeView",
    zh_cn: "导出属性视图为CSV",
    description: "将指定的属性视图导出为 CSV 压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("属性视图的ID (avID)"), blockID: z.string().describe("包含该属性视图的块ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ zip: z.string().describe("导出的CSV压缩文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportData",
    en: "exportData",
    zh_cn: "导出全部数据",
    description: "导出当前工作空间的全部数据为一个 .zip 压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({}),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportDataInFolder",
    en: "exportDataInFolder",
    zh_cn: "导出文件夹数据",
    description: "导出指定文件夹内的所有数据为一个压缩包。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ folder: z.string().describe("要导出数据的文件夹路径 (相对于工作空间data目录)") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的压缩包文件名 (不含路径)") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportDocx",
    en: "exportDocx",
    zh_cn: "导出文档为DOCX",
    description: "将指定的文档导出为 DOCX (.docx) 文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID"), savePath: z.string().describe("服务器上保存 .docx 文件的绝对路径"), removeAssets: z.boolean().describe("是否移除导出的 Word 文件中包含的资源文件（如图片）的原始文件"), merge: z.boolean().optional().describe("是否将子文档内容合并到主文档中导出 (默认为 false)") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ path: z.string().describe("最终生成的 .docx 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportEPUB",
    en: "exportEPUB",
    zh_cn: "导出文档为EPUB",
    description: "将指定的文档导出为 EPUB 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportHTML",
    en: "exportHTML",
    zh_cn: "导出文档为标准HTML",
    description: "将指定文档导出为标准的、包含完整思源主题样式和脚本的 HTML 内容，通常用于生成可独立浏览的 HTML 文件或作为导出 PDF 的中间步骤。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({
      id: z.string().describe("要导出的文档ID"),
      pdf: z.boolean().describe("是否为导出 PDF 进行预处理（例如，处理链接和资源路径以适应 PDF 生成环境）"),
      savePath: z.string().describe("服务器上保存 HTML 文件的绝对路径 (如果 pdf 为 true，则此路径可能用于临时存储)"),
      keepFold: z.boolean().optional().describe("是否在导出时保持块的折叠状态 (默认为 false，展开所有)"),
      merge: z.boolean().optional().describe("是否将子文档内容合并到主文档中导出 (默认为 false)")
    }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ id: z.string().describe("导出的文档ID"), name: z.string().describe("文档的原始名称"), content: z.string().describe("生成的 HTML 内容") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportMd",
    en: "exportMd",
    zh_cn: "导出单个文档为Markdown",
    description: "将指定的单个文档导出为 Markdown 文件，并打包成一个 .zip 压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportMdContent",
    en: "exportMdContent",
    zh_cn: "导出文档Markdown内容",
    description: "获取指定文档的 Markdown 文本内容，可自定义块引用和嵌入块的处理方式以及是否包含 YAML Front Matter。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({
      id: z.string().describe("要导出 Markdown 内容的文档ID"),
      refMode: z.number().optional().describe("块引用处理模式 (0: 锚文本, 1: ((id)) 形式, 2: 嵌入块, 默认遵从全局配置)"),
      embedMode: z.number().optional().describe("嵌入块处理模式 (0: 忽略, 1: 展开, 默认遵从全局配置)"),
      yfm: z.boolean().optional().describe("是否包含 YAML Front Matter (默认为 true)")
    }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ hPath: z.string().describe("文档的人类可读路径 (面包屑路径)"), content: z.string().describe("导出的 Markdown 文本内容") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportMdHTML",
    en: "exportMdHTML",
    zh_cn: "导出文档为纯HTML内容",
    description: "获取指定文档渲染后的纯 HTML 内容（不包含完整主题样式和脚本，主要用于内容嵌入）。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出 HTML 内容的文档ID"), savePath: z.string().describe("服务器上保存 HTML 文件的绝对路径 (此参数在后端代码中存在但似乎未实际用于此接口，可能为遗留或通用逻辑)") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ id: z.string().describe("导出的文档ID"), name: z.string().describe("文档的原始名称"), content: z.string().describe("生成的纯 HTML 内容") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportMds",
    en: "exportMds",
    zh_cn: "批量导出文档为Markdown",
    description: "将指定的多个文档分别导出为 Markdown 文件，并打包成一个 .zip 压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ ids: z.array(z.string()).describe("要导出的文档ID数组") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportMediaWiki",
    en: "exportMediaWiki",
    zh_cn: "导出文档为MediaWiki",
    description: "将指定的文档导出为 MediaWiki 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportNotebookMd",
    en: "exportNotebookMd",
    zh_cn: "导出笔记本为Markdown",
    description: "将指定的笔记本导出为 Markdown 格式的 .zip 压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ notebook: z.string().describe("要导出的笔记本ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名 (通常为笔记本名称)"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportNotebookSY",
    en: "exportNotebookSY",
    zh_cn: "导出笔记本为.sy包",
    description: "将指定的笔记本导出为思源原生 .sy 格式的压缩包。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的笔记本ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ zip: z.string().describe("导出的 .sy 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportODT",
    en: "exportODT",
    zh_cn: "导出文档为ODT",
    description: "将指定的文档导出为 ODT 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportOPML",
    en: "exportOPML",
    zh_cn: "导出文档为OPML",
    description: "将指定的文档导出为 OPML 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportOrgMode",
    en: "exportOrgMode",
    zh_cn: "导出文档为OrgMode",
    description: "将指定的文档导出为 Org-mode 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportPreviewHTML",
    en: "exportPreviewHTML",
    zh_cn: "导出文档预览HTML",
    description: "获取指定文档用于预览的 HTML 内容，包含块属性、类型等更丰富的上下文信息，并处理了块引链接。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({
      id: z.string().describe("要导出预览 HTML 的文档ID"),
      keepFold: z.boolean().optional().describe("是否在导出时保持块的折叠状态 (默认为 false，展开所有)"),
      merge: z.boolean().optional().describe("是否将子文档内容合并到主文档中导出 (默认为 false)"),
      image: z.boolean().optional().describe("是否为图片导出优化，例如，将图片转换为 Base64 嵌入 (默认为 false)")
    }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ id: z.string().describe("导出的文档ID"), name: z.string().describe("文档的原始名称"), content: z.string().describe("生成的预览 HTML 内容"), attrs: z.record(z.string()).describe("文档块的属性 (IAL)"), type: z.string().describe("文档块的类型 (如 'd' 表示文档块)") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportRTF",
    en: "exportRTF",
    zh_cn: "导出文档为RTF",
    description: "将指定的文档导出为 RTF 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportReStructuredText",
    en: "exportReStructuredText",
    zh_cn: "导出文档为reStructuredText",
    description: "将指定的文档导出为 reStructuredText 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportResources",
    en: "exportResources",
    zh_cn: "导出指定资源",
    description: "将指定路径列表的文件或文件夹打包导出为一个 .zip 压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({
      name: z.string().optional().describe("导出的 .zip 文件的主文件名 (不含扩展名)。如果为空，则默认为 'export-YYYY-MM-DD_HH-mm-ss' 格式"),
      paths: z.array(z.string()).describe("要导出的文件或文件夹在工作空间中的相对路径数组 (相对于data目录)")
    }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ path: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportSY",
    en: "exportSY",
    zh_cn: "导出单个文档为.sy包",
    description: "将指定的单个文档导出为思源原生 .sy 格式的压缩包。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .sy 文件名"), zip: z.string().describe("导出的 .sy 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportTempContent",
    en: "exportTempContent",
    zh_cn: "导出临时内容预览",
    description: "将传入的 Markdown 内容保存为临时文件，并根据参数生成预览（HTML/PDF/图片），返回预览的 URL。注意：此接口在 `export.go` 中并未完整实现所有参数的逻辑（如 mode, theme, title, type, css, js 均未实际使用），主要实现了 content 的临时保存和URL返回。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({
      content: z.string().describe("要导出预览的 Markdown 内容字符串"),
      mode: z.number().optional().describe("导出模式 (具体含义未在后端实现中明确使用)"),
      theme: z.string().optional().describe("主题名称 (未在后端实现中明确使用)"),
      title: z.string().optional().describe("导出内容的标题 (未在后端实现中明确使用)"),
      type: z.string().optional().describe("导出类型，如 'html', 'pdf', 'png' (未在后端实现中明确使用)"),
      css: z.string().optional().describe("自定义 CSS 内容 (未在后端实现中明确使用)"),
      js: z.string().optional().describe("自定义 JavaScript 内容 (未在后端实现中明确使用)")
    }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ url: z.string().describe("生成的临时内容预览 URL (形如 http://localhost:6806/export/temp/xxxxxxx)") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/exportTextile",
    en: "exportTextile",
    zh_cn: "导出文档为Textile",
    description: "将指定的文档导出为 Textile 格式的压缩文件。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要导出的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ name: z.string().describe("导出的 .zip 文件名"), zip: z.string().describe("导出的 .zip 文件在服务器上的绝对路径") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/preview",
    en: "exportPreview",
    zh_cn: "获取文档HTML预览",
    description: "获取指定文档的完整 HTML 预览内容，包含标准主题和脚本，可直接用于浏览器展示。",
    needAuth: true,
    needAdminRole: false,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({ id: z.string().describe("要获取 HTML 预览的文档ID") }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.object({ html: z.string().describe("生成的文档 HTML 预览内容") }).describe("成功时返回的数据") })
  },
  {
    method: "POST",
    endpoint: "/api/export/processPDF",
    en: "processPDF",
    zh_cn: "PDF导出后处理",
    description: "对已生成的用于 PDF 导出的 HTML 文件进行后处理，如添加水印等。通常在调用 exportHTML (pdf=true) 之后使用。",
    needAuth: true,
    needAdminRole: true,
    unavailableIfReadonly: false,
    zodRequestSchema: (z) => ({
      id: z.string().describe("相关文档的ID (用于日志记录或上下文关联)"),
      path: z.string().describe("已生成的 HTML 文件的绝对路径 (该文件将被用于生成或处理 PDF)"),
      merge: z.boolean().optional().describe("是否将子文档内容合并 (默认为 false)"),
      removeAssets: z.boolean().describe("处理完成后是否移除相关资源文件"),
      watermark: z.boolean().describe("是否添加水印")
    }),
    zodResponseSchema: (z) => ({ Code: z.number().describe("响应状态码，0 表示成功"), Msg: z.string().describe("响应消息"), Data: z.null().optional().describe("此接口成功时不返回具体数据") })
  }
];
